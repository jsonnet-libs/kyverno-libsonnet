{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kyverno Jsonnet library","text":"<p>This library is generated with <code>k8s</code>.</p> <ul> <li>1.6</li> <li>1.9</li> <li>1.11</li> </ul>"},{"location":"1.11/","title":"kyverno","text":"<pre><code>local kyverno = import \"github.com/jsonnet-libs/kyverno-libsonnet/1.11/main.libsonnet\"\n</code></pre> <ul> <li>kyverno</li> </ul>"},{"location":"1.11/kyverno/","title":"kyverno","text":"<ul> <li>v1</li> <li>v1alpha2</li> <li>v1beta1</li> <li>v2alpha1</li> <li>v2beta1</li> </ul>"},{"location":"1.11/kyverno/v1/","title":"kyverno.v1","text":"<ul> <li>clusterPolicy</li> <li>policy</li> </ul>"},{"location":"1.11/kyverno/v1/clusterPolicy/","title":"kyverno.v1.clusterPolicy","text":"<p>\"ClusterPolicy declares validation, mutation, and generation behaviors for matching resources.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAdmission(admission)</code></li> <li><code>fn withApplyRules(applyRules)</code></li> <li><code>fn withBackground(background)</code></li> <li><code>fn withFailurePolicy(failurePolicy)</code></li> <li><code>fn withGenerateExisting(generateExisting)</code></li> <li><code>fn withGenerateExistingOnPolicyUpdate(generateExistingOnPolicyUpdate)</code></li> <li><code>fn withMutateExistingOnPolicyUpdate(mutateExistingOnPolicyUpdate)</code></li> <li><code>fn withRules(rules)</code></li> <li><code>fn withRulesMixin(rules)</code></li> <li><code>fn withSchemaValidation(schemaValidation)</code></li> <li><code>fn withUseServerSideApply(useServerSideApply)</code></li> <li><code>fn withValidationFailureAction(validationFailureAction)</code></li> <li><code>fn withValidationFailureActionOverrides(validationFailureActionOverrides)</code></li> <li><code>fn withValidationFailureActionOverridesMixin(validationFailureActionOverrides)</code></li> <li><code>fn withWebhookTimeoutSeconds(webhookTimeoutSeconds)</code></li> <li><code>obj spec.rules</code><ul> <li><code>fn withCelPreconditions(celPreconditions)</code></li> <li><code>fn withCelPreconditionsMixin(celPreconditions)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withImageExtractors(imageExtractors)</code></li> <li><code>fn withImageExtractorsMixin(imageExtractors)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPreconditions(preconditions)</code></li> <li><code>fn withVerifyImages(verifyImages)</code></li> <li><code>fn withVerifyImagesMixin(verifyImages)</code></li> <li><code>obj spec.rules.celPreconditions</code><ul> <li><code>fn withExpression(expression)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.rules.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.context.apiCall</code><ul> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> <li><code>obj spec.rules.context.apiCall.data</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.context.apiCall.service</code><ul> <li><code>fn withCaBundle(caBundle)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> <li><code>obj spec.rules.context.imageRegistry.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.rules.exclude.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.rules.exclude.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.rules.exclude.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.generate</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withData(data)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withSynchronize(synchronize)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec.rules.generate.clone</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.generate.cloneList</code><ul> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.rules.generate.cloneList.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.generate.cloneList.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.rules.match.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.rules.match.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.rules.match.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate</code><ul> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withForeachMixin(foreach)</code></li> <li><code>fn withPatchStrategicMerge(patchStrategicMerge)</code></li> <li><code>fn withPatchesJson6902(patchesJson6902)</code></li> <li><code>fn withTargets(targets)</code></li> <li><code>fn withTargetsMixin(targets)</code></li> <li><code>obj spec.rules.mutate.foreach</code><ul> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withList(list)</code></li> <li><code>fn withOrder(order)</code></li> <li><code>fn withPatchStrategicMerge(patchStrategicMerge)</code></li> <li><code>fn withPatchesJson6902(patchesJson6902)</code></li> <li><code>obj spec.rules.mutate.foreach.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.mutate.foreach.context.apiCall</code><ul> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> <li><code>obj spec.rules.mutate.foreach.context.apiCall.data</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.apiCall.service</code><ul> <li><code>fn withCaBundle(caBundle)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> <li><code>obj spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.mutate.foreach.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.targets</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPreconditions(preconditions)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec.rules.mutate.targets.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.mutate.targets.context.apiCall</code><ul> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> <li><code>obj spec.rules.mutate.targets.context.apiCall.data</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.targets.context.apiCall.service</code><ul> <li><code>fn withCaBundle(caBundle)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.targets.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.targets.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> <li><code>obj spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.targets.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate</code><ul> <li><code>fn withAnyPattern(anyPattern)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withForeachMixin(foreach)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPattern(pattern)</code></li> <li><code>obj spec.rules.validate.cel</code><ul> <li><code>fn withAuditAnnotations(auditAnnotations)</code></li> <li><code>fn withAuditAnnotationsMixin(auditAnnotations)</code></li> <li><code>fn withExpressions(expressions)</code></li> <li><code>fn withExpressionsMixin(expressions)</code></li> <li><code>fn withVariables(variables)</code></li> <li><code>fn withVariablesMixin(variables)</code></li> <li><code>obj spec.rules.validate.cel.auditAnnotations</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValueExpression(valueExpression)</code></li> </ul> </li> <li><code>obj spec.rules.validate.cel.expressions</code><ul> <li><code>fn withExpression(expression)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withMessageExpression(messageExpression)</code></li> <li><code>fn withReason(reason)</code></li> </ul> </li> <li><code>obj spec.rules.validate.cel.paramKind</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> </ul> </li> <li><code>obj spec.rules.validate.cel.paramRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withParameterNotFoundAction(parameterNotFoundAction)</code></li> <li><code>obj spec.rules.validate.cel.paramRef.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.validate.cel.paramRef.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.cel.variables</code><ul> <li><code>fn withExpression(expression)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.deny</code><ul> <li><code>fn withConditions(conditions)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach</code><ul> <li><code>fn withAnyPattern(anyPattern)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withElementScope(elementScope)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withList(list)</code></li> <li><code>fn withPattern(pattern)</code></li> <li><code>obj spec.rules.validate.foreach.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.validate.foreach.context.apiCall</code><ul> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> <li><code>obj spec.rules.validate.foreach.context.apiCall.data</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.apiCall.service</code><ul> <li><code>fn withCaBundle(caBundle)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> <li><code>obj spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach.deny</code><ul> <li><code>fn withConditions(conditions)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.validate.foreach.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests</code><ul> <li><code>fn withAnnotationDomain(annotationDomain)</code></li> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withIgnoreFields(ignoreFields)</code></li> <li><code>fn withIgnoreFieldsMixin(ignoreFields)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.validate.manifests.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.certificates.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.certificates.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keyless.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keyless.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.dryRun</code><ul> <li><code>fn withEnable(enable)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.ignoreFields</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>fn withObjects(objects)</code></li> <li><code>fn withObjectsMixin(objects)</code></li> <li><code>obj spec.rules.validate.manifests.ignoreFields.objects</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withVersion(version)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.podSecurity</code><ul> <li><code>fn withExclude(exclude)</code></li> <li><code>fn withExcludeMixin(exclude)</code></li> <li><code>fn withLevel(level)</code></li> <li><code>fn withVersion(version)</code></li> <li><code>obj spec.rules.validate.podSecurity.exclude</code><ul> <li><code>fn withControlName(controlName)</code></li> <li><code>fn withImages(images)</code></li> <li><code>fn withImagesMixin(images)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestations(attestations)</code></li> <li><code>fn withAttestationsMixin(attestations)</code></li> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withImage(image)</code></li> <li><code>fn withImageReferences(imageReferences)</code></li> <li><code>fn withImageReferencesMixin(imageReferences)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withMutateDigest(mutateDigest)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>fn withRequired(required)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withUseCache(useCache)</code></li> <li><code>fn withVerifyDigest(verifyDigest)</code></li> <li><code>obj spec.rules.verifyImages.attestations</code><ul> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withConditions(conditions)</code></li> <li><code>fn withConditionsMixin(conditions)</code></li> <li><code>fn withPredicateType(predicateType)</code></li> <li><code>fn withType(type)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.certificates.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keyless.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.conditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.verifyImages.attestations.conditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.conditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.certificates.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.certificates.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.keyless.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keyless.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.validationFailureActionOverrides</code><ul> <li><code>fn withAction(action)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.validationFailureActionOverrides.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.validationFailureActionOverrides.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fields","title":"Fields","text":""},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ClusterPolicy</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec declares policy behaviors.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specwithadmission","title":"fn spec.withAdmission","text":"<pre><code>withAdmission(admission)\n</code></pre> <p>\"Admission controls if rules are applied during admission. Optional. Default value is \\\"true\\\".\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specwithapplyrules","title":"fn spec.withApplyRules","text":"<pre><code>withApplyRules(applyRules)\n</code></pre> <p>\"ApplyRules controls how rules in a policy are applied. Rule are processed in the order of declaration. When set to <code>One</code> processing stops after a rule has been applied i.e. the rule matches and results in a pass, fail, or error. When set to <code>All</code> all rules in the policy are processed. The default is <code>All</code>.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specwithbackground","title":"fn spec.withBackground","text":"<pre><code>withBackground(background)\n</code></pre> <p>\"Background controls if rules are applied to existing resources during a background scan. Optional. Default value is \\\"true\\\". The value must be set to \\\"false\\\" if the policy rule uses variables that are only available in the admission review request (e.g. user name).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specwithfailurepolicy","title":"fn spec.withFailurePolicy","text":"<pre><code>withFailurePolicy(failurePolicy)\n</code></pre> <p>\"FailurePolicy defines how unexpected policy errors and webhook response timeout errors are handled. Rules within the same policy share the same failure behavior. This field should not be accessed directly, instead <code>GetFailurePolicy()</code> should be used. Allowed values are Ignore or Fail. Defaults to Fail.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specwithgenerateexisting","title":"fn spec.withGenerateExisting","text":"<pre><code>withGenerateExisting(generateExisting)\n</code></pre> <p>\"GenerateExisting controls whether to trigger generate rule in existing resources If is set to \\\"true\\\" generate rule will be triggered and applied to existing matched resources. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specwithgenerateexistingonpolicyupdate","title":"fn spec.withGenerateExistingOnPolicyUpdate","text":"<pre><code>withGenerateExistingOnPolicyUpdate(generateExistingOnPolicyUpdate)\n</code></pre> <p>\"Deprecated, use generateExisting instead\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specwithmutateexistingonpolicyupdate","title":"fn spec.withMutateExistingOnPolicyUpdate","text":"<pre><code>withMutateExistingOnPolicyUpdate(mutateExistingOnPolicyUpdate)\n</code></pre> <p>\"MutateExistingOnPolicyUpdate controls if a mutateExisting policy is applied on policy events. Default value is \\\"false\\\".\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specwithrules","title":"fn spec.withRules","text":"<pre><code>withRules(rules)\n</code></pre> <p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specwithrulesmixin","title":"fn spec.withRulesMixin","text":"<pre><code>withRulesMixin(rules)\n</code></pre> <p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specwithschemavalidation","title":"fn spec.withSchemaValidation","text":"<pre><code>withSchemaValidation(schemaValidation)\n</code></pre> <p>\"SchemaValidation skips validation checks for policies as well as patched resources. Optional. The default value is set to \\\"true\\\", it must be set to \\\"false\\\" to disable the validation checks.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specwithuseserversideapply","title":"fn spec.withUseServerSideApply","text":"<pre><code>withUseServerSideApply(useServerSideApply)\n</code></pre> <p>\"UseServerSideApply controls whether to use server-side apply for generate rules If is set to \\\"true\\\" create &amp; update for generate rules will use apply instead of create/update. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specwithvalidationfailureaction","title":"fn spec.withValidationFailureAction","text":"<pre><code>withValidationFailureAction(validationFailureAction)\n</code></pre> <p>\"ValidationFailureAction defines if a validation policy rule violation should block the admission review request (enforce), or allow (audit) the admission review request and report an error in a policy report. Optional. Allowed values are audit or enforce. The default value is \\\"Audit\\\".\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specwithvalidationfailureactionoverrides","title":"fn spec.withValidationFailureActionOverrides","text":"<pre><code>withValidationFailureActionOverrides(validationFailureActionOverrides)\n</code></pre> <p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specwithvalidationfailureactionoverridesmixin","title":"fn spec.withValidationFailureActionOverridesMixin","text":"<pre><code>withValidationFailureActionOverridesMixin(validationFailureActionOverrides)\n</code></pre> <p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specwithwebhooktimeoutseconds","title":"fn spec.withWebhookTimeoutSeconds","text":"<pre><code>withWebhookTimeoutSeconds(webhookTimeoutSeconds)\n</code></pre> <p>\"WebhookTimeoutSeconds specifies the maximum time in seconds allowed to apply this policy. After the configured time expires, the admission request may fail, or may simply ignore the policy results, based on the failure policy. The default timeout is 10s, the value must be between 1 and 30 seconds.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrules","title":"obj spec.rules","text":"<p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specruleswithcelpreconditions","title":"fn spec.rules.withCelPreconditions","text":"<pre><code>withCelPreconditions(celPreconditions)\n</code></pre> <p>\"CELPreconditions are used to determine if a policy rule should be applied by evaluating a set of CEL conditions. It can only be used with the validate.cel subrule\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specruleswithcelpreconditionsmixin","title":"fn spec.rules.withCelPreconditionsMixin","text":"<pre><code>withCelPreconditionsMixin(celPreconditions)\n</code></pre> <p>\"CELPreconditions are used to determine if a policy rule should be applied by evaluating a set of CEL conditions. It can only be used with the validate.cel subrule\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specruleswithcontext","title":"fn spec.rules.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specruleswithcontextmixin","title":"fn spec.rules.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specruleswithimageextractors","title":"fn spec.rules.withImageExtractors","text":"<pre><code>withImageExtractors(imageExtractors)\n</code></pre> <p>\"ImageExtractors defines a mapping from kinds to ImageExtractorConfigs. This config is only valid for verifyImages rules.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specruleswithimageextractorsmixin","title":"fn spec.rules.withImageExtractorsMixin","text":"<pre><code>withImageExtractorsMixin(imageExtractors)\n</code></pre> <p>\"ImageExtractors defines a mapping from kinds to ImageExtractorConfigs. This config is only valid for verifyImages rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specruleswithname","title":"fn spec.rules.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a label to identify the rule, It must be unique within the policy.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specruleswithpreconditions","title":"fn spec.rules.withPreconditions","text":"<pre><code>withPreconditions(preconditions)\n</code></pre> <p>\"Preconditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. A direct list of conditions (without <code>any</code> or <code>all</code> statements is supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specruleswithverifyimages","title":"fn spec.rules.withVerifyImages","text":"<pre><code>withVerifyImages(verifyImages)\n</code></pre> <p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specruleswithverifyimagesmixin","title":"fn spec.rules.withVerifyImagesMixin","text":"<pre><code>withVerifyImagesMixin(verifyImages)\n</code></pre> <p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulescelpreconditions","title":"obj spec.rules.celPreconditions","text":"<p>\"CELPreconditions are used to determine if a policy rule should be applied by evaluating a set of CEL conditions. It can only be used with the validate.cel subrule\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescelpreconditionswithexpression","title":"fn spec.rules.celPreconditions.withExpression","text":"<pre><code>withExpression(expression)\n</code></pre> <p>\"Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables: \\n 'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request. See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the request resource. Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/ \\n Required.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescelpreconditionswithname","title":"fn spec.rules.celPreconditions.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName') \\n Required.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulescontext","title":"obj spec.rules.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextwithname","title":"fn spec.rules.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulescontextapicall","title":"obj spec.rules.context.apiCall","text":"<p>\"APICall is an HTTP request to the Kubernetes API server, or other JSON web service. The data returned is stored in the context with the name for the context entry.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextapicallwithdata","title":"fn spec.rules.context.apiCall.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextapicallwithdatamixin","title":"fn spec.rules.context.apiCall.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextapicallwithjmespath","title":"fn spec.rules.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response for the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextapicallwithmethod","title":"fn spec.rules.context.apiCall.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is the HTTP request type (GET or POST).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextapicallwithurlpath","title":"fn spec.rules.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulescontextapicalldata","title":"obj spec.rules.context.apiCall.data","text":"<p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextapicalldatawithkey","title":"fn spec.rules.context.apiCall.data.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is a unique identifier for the data value\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextapicalldatawithvalue","title":"fn spec.rules.context.apiCall.data.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the data value\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulescontextapicallservice","title":"obj spec.rules.context.apiCall.service","text":"<p>\"Service is an API call to a JSON web service\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextapicallservicewithcabundle","title":"fn spec.rules.context.apiCall.service.withCaBundle","text":"<pre><code>withCaBundle(caBundle)\n</code></pre> <p>\"CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextapicallservicewithurl","title":"fn spec.rules.context.apiCall.service.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the JSON web service URL. A typical form is <code>https://{service}.{namespace}:{port}/{path}</code>.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulescontextconfigmap","title":"obj spec.rules.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextconfigmapwithname","title":"fn spec.rules.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextconfigmapwithnamespace","title":"fn spec.rules.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulescontextimageregistry","title":"obj spec.rules.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextimageregistrywithjmespath","title":"fn spec.rules.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextimageregistrywithreference","title":"fn spec.rules.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulescontextimageregistryimageregistrycredentials","title":"obj spec.rules.context.imageRegistry.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextimageregistryimageregistrycredentialswithallowinsecureregistry","title":"fn spec.rules.context.imageRegistry.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextimageregistryimageregistrycredentialswithproviders","title":"fn spec.rules.context.imageRegistry.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextimageregistryimageregistrycredentialswithprovidersmixin","title":"fn spec.rules.context.imageRegistry.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextimageregistryimageregistrycredentialswithsecrets","title":"fn spec.rules.context.imageRegistry.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextimageregistryimageregistrycredentialswithsecretsmixin","title":"fn spec.rules.context.imageRegistry.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulescontextvariable","title":"obj spec.rules.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextvariablewithdefault","title":"fn spec.rules.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextvariablewithjmespath","title":"fn spec.rules.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulescontextvariablewithvalue","title":"fn spec.rules.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexclude","title":"obj spec.rules.exclude","text":"<p>\"ExcludeResources defines when this policy rule should not be applied. The exclude criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the name or role.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithall","title":"fn spec.rules.exclude.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithallmixin","title":"fn spec.rules.exclude.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithany","title":"fn spec.rules.exclude.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithanymixin","title":"fn spec.rules.exclude.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithclusterroles","title":"fn spec.rules.exclude.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithclusterrolesmixin","title":"fn spec.rules.exclude.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithroles","title":"fn spec.rules.exclude.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithrolesmixin","title":"fn spec.rules.exclude.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithsubjects","title":"fn spec.rules.exclude.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithsubjectsmixin","title":"fn spec.rules.exclude.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexcludeall","title":"obj spec.rules.exclude.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallwithclusterroles","title":"fn spec.rules.exclude.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallwithclusterrolesmixin","title":"fn spec.rules.exclude.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallwithroles","title":"fn spec.rules.exclude.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallwithrolesmixin","title":"fn spec.rules.exclude.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallwithsubjects","title":"fn spec.rules.exclude.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallwithsubjectsmixin","title":"fn spec.rules.exclude.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexcludeallresources","title":"obj spec.rules.exclude.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithannotations","title":"fn spec.rules.exclude.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithannotationsmixin","title":"fn spec.rules.exclude.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithkinds","title":"fn spec.rules.exclude.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithkindsmixin","title":"fn spec.rules.exclude.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithname","title":"fn spec.rules.exclude.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithnames","title":"fn spec.rules.exclude.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithnamesmixin","title":"fn spec.rules.exclude.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithnamespaces","title":"fn spec.rules.exclude.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithnamespacesmixin","title":"fn spec.rules.exclude.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithoperations","title":"fn spec.rules.exclude.all.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithoperationsmixin","title":"fn spec.rules.exclude.all.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexcludeallresourcesnamespaceselector","title":"obj spec.rules.exclude.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexcludeallresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexcludeallresourcesselector","title":"obj spec.rules.exclude.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexcludeallresourcesselectormatchexpressions","title":"obj spec.rules.exclude.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexcludeallsubjects","title":"obj spec.rules.exclude.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallsubjectswithapigroup","title":"fn spec.rules.exclude.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallsubjectswithkind","title":"fn spec.rules.exclude.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallsubjectswithname","title":"fn spec.rules.exclude.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallsubjectswithnamespace","title":"fn spec.rules.exclude.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexcludeany","title":"obj spec.rules.exclude.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanywithclusterroles","title":"fn spec.rules.exclude.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanywithclusterrolesmixin","title":"fn spec.rules.exclude.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanywithroles","title":"fn spec.rules.exclude.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanywithrolesmixin","title":"fn spec.rules.exclude.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanywithsubjects","title":"fn spec.rules.exclude.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanywithsubjectsmixin","title":"fn spec.rules.exclude.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexcludeanyresources","title":"obj spec.rules.exclude.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithannotations","title":"fn spec.rules.exclude.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithannotationsmixin","title":"fn spec.rules.exclude.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithkinds","title":"fn spec.rules.exclude.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithkindsmixin","title":"fn spec.rules.exclude.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithname","title":"fn spec.rules.exclude.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithnames","title":"fn spec.rules.exclude.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithnamesmixin","title":"fn spec.rules.exclude.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithnamespaces","title":"fn spec.rules.exclude.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithnamespacesmixin","title":"fn spec.rules.exclude.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithoperations","title":"fn spec.rules.exclude.any.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithoperationsmixin","title":"fn spec.rules.exclude.any.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexcludeanyresourcesnamespaceselector","title":"obj spec.rules.exclude.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexcludeanyresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexcludeanyresourcesselector","title":"obj spec.rules.exclude.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexcludeanyresourcesselectormatchexpressions","title":"obj spec.rules.exclude.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexcludeanysubjects","title":"obj spec.rules.exclude.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanysubjectswithapigroup","title":"fn spec.rules.exclude.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanysubjectswithkind","title":"fn spec.rules.exclude.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanysubjectswithname","title":"fn spec.rules.exclude.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanysubjectswithnamespace","title":"fn spec.rules.exclude.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexcluderesources","title":"obj spec.rules.exclude.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified. Requires at least one tag to be specified when under MatchResources. Specifying ResourceDescription directly under match is being deprecated. Please specify under \\\"any\\\" or \\\"all\\\" instead.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithannotations","title":"fn spec.rules.exclude.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithannotationsmixin","title":"fn spec.rules.exclude.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithkinds","title":"fn spec.rules.exclude.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithkindsmixin","title":"fn spec.rules.exclude.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithname","title":"fn spec.rules.exclude.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithnames","title":"fn spec.rules.exclude.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithnamesmixin","title":"fn spec.rules.exclude.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithnamespaces","title":"fn spec.rules.exclude.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithnamespacesmixin","title":"fn spec.rules.exclude.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithoperations","title":"fn spec.rules.exclude.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithoperationsmixin","title":"fn spec.rules.exclude.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexcluderesourcesnamespaceselector","title":"obj spec.rules.exclude.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexcluderesourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexcluderesourcesselector","title":"obj spec.rules.exclude.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexcluderesourcesselectormatchexpressions","title":"obj spec.rules.exclude.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesexcludesubjects","title":"obj spec.rules.exclude.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludesubjectswithapigroup","title":"fn spec.rules.exclude.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludesubjectswithkind","title":"fn spec.rules.exclude.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludesubjectswithname","title":"fn spec.rules.exclude.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesexcludesubjectswithnamespace","title":"fn spec.rules.exclude.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesgenerate","title":"obj spec.rules.generate","text":"<p>\"Generation is used to create new resources.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesgeneratewithapiversion","title":"fn spec.rules.generate.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesgeneratewithdata","title":"fn spec.rules.generate.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data provides the resource declaration used to populate each generated resource. At most one of Data or Clone must be specified. If neither are provided, the generated resource will be created with default data only.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesgeneratewithkind","title":"fn spec.rules.generate.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesgeneratewithname","title":"fn spec.rules.generate.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesgeneratewithnamespace","title":"fn spec.rules.generate.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesgeneratewithsynchronize","title":"fn spec.rules.generate.withSynchronize","text":"<pre><code>withSynchronize(synchronize)\n</code></pre> <p>\"Synchronize controls if generated resources should be kept in-sync with their source resource. If Synchronize is set to \\\"true\\\" changes to generated resources will be overwritten with resource data from Data or the resource specified in the Clone declaration. Optional. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesgeneratewithuid","title":"fn spec.rules.generate.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID specifies the resource uid.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesgenerateclone","title":"obj spec.rules.generate.clone","text":"<p>\"Clone specifies the source resource used to populate each generated resource. At most one of Data or Clone can be specified. If neither are provided, the generated resource will be created with default data only.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonewithname","title":"fn spec.rules.generate.clone.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies name of the resource.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonewithnamespace","title":"fn spec.rules.generate.clone.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies source resource namespace.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesgenerateclonelist","title":"obj spec.rules.generate.cloneList","text":"<p>\"CloneList specifies the list of source resource used to populate each generated resource.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistwithkinds","title":"fn spec.rules.generate.cloneList.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistwithkindsmixin","title":"fn spec.rules.generate.cloneList.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistwithnamespace","title":"fn spec.rules.generate.cloneList.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies source resource namespace.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesgenerateclonelistselector","title":"obj spec.rules.generate.cloneList.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code>. wildcard characters are not supported.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistselectorwithmatchexpressions","title":"fn spec.rules.generate.cloneList.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistselectorwithmatchexpressionsmixin","title":"fn spec.rules.generate.cloneList.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistselectorwithmatchlabels","title":"fn spec.rules.generate.cloneList.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistselectorwithmatchlabelsmixin","title":"fn spec.rules.generate.cloneList.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesgenerateclonelistselectormatchexpressions","title":"obj spec.rules.generate.cloneList.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistselectormatchexpressionswithkey","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistselectormatchexpressionswithoperator","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistselectormatchexpressionswithvalues","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatch","title":"obj spec.rules.match","text":"<p>\"MatchResources defines when this policy rule should be applied. The match criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the user name or role. At least one kind is required.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithall","title":"fn spec.rules.match.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithallmixin","title":"fn spec.rules.match.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithany","title":"fn spec.rules.match.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithanymixin","title":"fn spec.rules.match.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithclusterroles","title":"fn spec.rules.match.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithclusterrolesmixin","title":"fn spec.rules.match.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithroles","title":"fn spec.rules.match.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithrolesmixin","title":"fn spec.rules.match.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithsubjects","title":"fn spec.rules.match.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithsubjectsmixin","title":"fn spec.rules.match.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatchall","title":"obj spec.rules.match.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallwithclusterroles","title":"fn spec.rules.match.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallwithclusterrolesmixin","title":"fn spec.rules.match.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallwithroles","title":"fn spec.rules.match.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallwithrolesmixin","title":"fn spec.rules.match.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallwithsubjects","title":"fn spec.rules.match.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallwithsubjectsmixin","title":"fn spec.rules.match.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatchallresources","title":"obj spec.rules.match.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithannotations","title":"fn spec.rules.match.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithannotationsmixin","title":"fn spec.rules.match.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithkinds","title":"fn spec.rules.match.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithkindsmixin","title":"fn spec.rules.match.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithname","title":"fn spec.rules.match.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithnames","title":"fn spec.rules.match.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithnamesmixin","title":"fn spec.rules.match.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithnamespaces","title":"fn spec.rules.match.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithnamespacesmixin","title":"fn spec.rules.match.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithoperations","title":"fn spec.rules.match.all.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithoperationsmixin","title":"fn spec.rules.match.all.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatchallresourcesnamespaceselector","title":"obj spec.rules.match.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatchallresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatchallresourcesselector","title":"obj spec.rules.match.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectorwithmatchlabels","title":"fn spec.rules.match.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatchallresourcesselectormatchexpressions","title":"obj spec.rules.match.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatchallsubjects","title":"obj spec.rules.match.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallsubjectswithapigroup","title":"fn spec.rules.match.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallsubjectswithkind","title":"fn spec.rules.match.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallsubjectswithname","title":"fn spec.rules.match.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchallsubjectswithnamespace","title":"fn spec.rules.match.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatchany","title":"obj spec.rules.match.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanywithclusterroles","title":"fn spec.rules.match.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanywithclusterrolesmixin","title":"fn spec.rules.match.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanywithroles","title":"fn spec.rules.match.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanywithrolesmixin","title":"fn spec.rules.match.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanywithsubjects","title":"fn spec.rules.match.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanywithsubjectsmixin","title":"fn spec.rules.match.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatchanyresources","title":"obj spec.rules.match.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithannotations","title":"fn spec.rules.match.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithannotationsmixin","title":"fn spec.rules.match.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithkinds","title":"fn spec.rules.match.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithkindsmixin","title":"fn spec.rules.match.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithname","title":"fn spec.rules.match.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithnames","title":"fn spec.rules.match.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithnamesmixin","title":"fn spec.rules.match.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithnamespaces","title":"fn spec.rules.match.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithnamespacesmixin","title":"fn spec.rules.match.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithoperations","title":"fn spec.rules.match.any.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithoperationsmixin","title":"fn spec.rules.match.any.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatchanyresourcesnamespaceselector","title":"obj spec.rules.match.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatchanyresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatchanyresourcesselector","title":"obj spec.rules.match.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectorwithmatchlabels","title":"fn spec.rules.match.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatchanyresourcesselectormatchexpressions","title":"obj spec.rules.match.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatchanysubjects","title":"obj spec.rules.match.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanysubjectswithapigroup","title":"fn spec.rules.match.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanysubjectswithkind","title":"fn spec.rules.match.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanysubjectswithname","title":"fn spec.rules.match.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchanysubjectswithnamespace","title":"fn spec.rules.match.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatchresources","title":"obj spec.rules.match.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified. Requires at least one tag to be specified when under MatchResources. Specifying ResourceDescription directly under match is being deprecated. Please specify under \\\"any\\\" or \\\"all\\\" instead.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithannotations","title":"fn spec.rules.match.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithannotationsmixin","title":"fn spec.rules.match.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithkinds","title":"fn spec.rules.match.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithkindsmixin","title":"fn spec.rules.match.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithname","title":"fn spec.rules.match.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithnames","title":"fn spec.rules.match.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithnamesmixin","title":"fn spec.rules.match.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithnamespaces","title":"fn spec.rules.match.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithnamespacesmixin","title":"fn spec.rules.match.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithoperations","title":"fn spec.rules.match.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithoperationsmixin","title":"fn spec.rules.match.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatchresourcesnamespaceselector","title":"obj spec.rules.match.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatchresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatchresourcesselector","title":"obj spec.rules.match.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectorwithmatchlabels","title":"fn spec.rules.match.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatchresourcesselectormatchexpressions","title":"obj spec.rules.match.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmatchsubjects","title":"obj spec.rules.match.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchsubjectswithapigroup","title":"fn spec.rules.match.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchsubjectswithkind","title":"fn spec.rules.match.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchsubjectswithname","title":"fn spec.rules.match.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmatchsubjectswithnamespace","title":"fn spec.rules.match.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutate","title":"obj spec.rules.mutate","text":"<p>\"Mutation is used to modify matching resources.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatewithforeach","title":"fn spec.rules.mutate.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatewithforeachmixin","title":"fn spec.rules.mutate.withForeachMixin","text":"<pre><code>withForeachMixin(foreach)\n</code></pre> <p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatewithpatchstrategicmerge","title":"fn spec.rules.mutate.withPatchStrategicMerge","text":"<pre><code>withPatchStrategicMerge(patchStrategicMerge)\n</code></pre> <p>\"PatchStrategicMerge is a strategic merge patch used to modify resources. See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatewithpatchesjson6902","title":"fn spec.rules.mutate.withPatchesJson6902","text":"<pre><code>withPatchesJson6902(patchesJson6902)\n</code></pre> <p>\"PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources. See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatewithtargets","title":"fn spec.rules.mutate.withTargets","text":"<pre><code>withTargets(targets)\n</code></pre> <p>\"Targets defines the target resources to be mutated.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatewithtargetsmixin","title":"fn spec.rules.mutate.withTargetsMixin","text":"<pre><code>withTargetsMixin(targets)\n</code></pre> <p>\"Targets defines the target resources to be mutated.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeach","title":"obj spec.rules.mutate.foreach","text":"<p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachwithcontext","title":"fn spec.rules.mutate.foreach.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachwithcontextmixin","title":"fn spec.rules.mutate.foreach.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachwithforeach","title":"fn spec.rules.mutate.foreach.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"Foreach declares a nested foreach iterator\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachwithlist","title":"fn spec.rules.mutate.foreach.withList","text":"<pre><code>withList(list)\n</code></pre> <p>\"List specifies a JMESPath expression that results in one or more elements to which the validation logic is applied.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachwithorder","title":"fn spec.rules.mutate.foreach.withOrder","text":"<pre><code>withOrder(order)\n</code></pre> <p>\"Order defines the iteration order on the list. Can be Ascending to iterate from first to last element or Descending to iterate in from last to first element.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachwithpatchstrategicmerge","title":"fn spec.rules.mutate.foreach.withPatchStrategicMerge","text":"<pre><code>withPatchStrategicMerge(patchStrategicMerge)\n</code></pre> <p>\"PatchStrategicMerge is a strategic merge patch used to modify resources. See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachwithpatchesjson6902","title":"fn spec.rules.mutate.foreach.withPatchesJson6902","text":"<pre><code>withPatchesJson6902(patchesJson6902)\n</code></pre> <p>\"PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources. See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachcontext","title":"obj spec.rules.mutate.foreach.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextwithname","title":"fn spec.rules.mutate.foreach.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachcontextapicall","title":"obj spec.rules.mutate.foreach.context.apiCall","text":"<p>\"APICall is an HTTP request to the Kubernetes API server, or other JSON web service. The data returned is stored in the context with the name for the context entry.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextapicallwithdata","title":"fn spec.rules.mutate.foreach.context.apiCall.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextapicallwithdatamixin","title":"fn spec.rules.mutate.foreach.context.apiCall.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextapicallwithjmespath","title":"fn spec.rules.mutate.foreach.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response for the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextapicallwithmethod","title":"fn spec.rules.mutate.foreach.context.apiCall.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is the HTTP request type (GET or POST).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextapicallwithurlpath","title":"fn spec.rules.mutate.foreach.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachcontextapicalldata","title":"obj spec.rules.mutate.foreach.context.apiCall.data","text":"<p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextapicalldatawithkey","title":"fn spec.rules.mutate.foreach.context.apiCall.data.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is a unique identifier for the data value\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextapicalldatawithvalue","title":"fn spec.rules.mutate.foreach.context.apiCall.data.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the data value\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachcontextapicallservice","title":"obj spec.rules.mutate.foreach.context.apiCall.service","text":"<p>\"Service is an API call to a JSON web service\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextapicallservicewithcabundle","title":"fn spec.rules.mutate.foreach.context.apiCall.service.withCaBundle","text":"<pre><code>withCaBundle(caBundle)\n</code></pre> <p>\"CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextapicallservicewithurl","title":"fn spec.rules.mutate.foreach.context.apiCall.service.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the JSON web service URL. A typical form is <code>https://{service}.{namespace}:{port}/{path}</code>.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachcontextconfigmap","title":"obj spec.rules.mutate.foreach.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextconfigmapwithname","title":"fn spec.rules.mutate.foreach.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextconfigmapwithnamespace","title":"fn spec.rules.mutate.foreach.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachcontextimageregistry","title":"obj spec.rules.mutate.foreach.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextimageregistrywithjmespath","title":"fn spec.rules.mutate.foreach.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextimageregistrywithreference","title":"fn spec.rules.mutate.foreach.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachcontextimageregistryimageregistrycredentials","title":"obj spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextimageregistryimageregistrycredentialswithallowinsecureregistry","title":"fn spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextimageregistryimageregistrycredentialswithproviders","title":"fn spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextimageregistryimageregistrycredentialswithprovidersmixin","title":"fn spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextimageregistryimageregistrycredentialswithsecrets","title":"fn spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextimageregistryimageregistrycredentialswithsecretsmixin","title":"fn spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachcontextvariable","title":"obj spec.rules.mutate.foreach.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextvariablewithdefault","title":"fn spec.rules.mutate.foreach.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextvariablewithjmespath","title":"fn spec.rules.mutate.foreach.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextvariablewithvalue","title":"fn spec.rules.mutate.foreach.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachpreconditions","title":"obj spec.rules.mutate.foreach.preconditions","text":"<p>\"AnyAllConditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionswithall","title":"fn spec.rules.mutate.foreach.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionswithallmixin","title":"fn spec.rules.mutate.foreach.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionswithany","title":"fn spec.rules.mutate.foreach.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionswithanymixin","title":"fn spec.rules.mutate.foreach.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachpreconditionsall","title":"obj spec.rules.mutate.foreach.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsallwithkey","title":"fn spec.rules.mutate.foreach.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsallwithmessage","title":"fn spec.rules.mutate.foreach.preconditions.all.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsallwithoperator","title":"fn spec.rules.mutate.foreach.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsallwithvalue","title":"fn spec.rules.mutate.foreach.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachpreconditionsany","title":"obj spec.rules.mutate.foreach.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsanywithkey","title":"fn spec.rules.mutate.foreach.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsanywithmessage","title":"fn spec.rules.mutate.foreach.preconditions.any.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsanywithoperator","title":"fn spec.rules.mutate.foreach.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsanywithvalue","title":"fn spec.rules.mutate.foreach.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutatetargets","title":"obj spec.rules.mutate.targets","text":"<p>\"Targets defines the target resources to be mutated.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetswithapiversion","title":"fn spec.rules.mutate.targets.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetswithcontext","title":"fn spec.rules.mutate.targets.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetswithcontextmixin","title":"fn spec.rules.mutate.targets.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetswithkind","title":"fn spec.rules.mutate.targets.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetswithname","title":"fn spec.rules.mutate.targets.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetswithnamespace","title":"fn spec.rules.mutate.targets.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetswithpreconditions","title":"fn spec.rules.mutate.targets.withPreconditions","text":"<pre><code>withPreconditions(preconditions)\n</code></pre> <p>\"Preconditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. A direct list of conditions (without <code>any</code> or <code>all</code> statements is supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetswithuid","title":"fn spec.rules.mutate.targets.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID specifies the resource uid.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutatetargetscontext","title":"obj spec.rules.mutate.targets.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextwithname","title":"fn spec.rules.mutate.targets.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutatetargetscontextapicall","title":"obj spec.rules.mutate.targets.context.apiCall","text":"<p>\"APICall is an HTTP request to the Kubernetes API server, or other JSON web service. The data returned is stored in the context with the name for the context entry.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextapicallwithdata","title":"fn spec.rules.mutate.targets.context.apiCall.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextapicallwithdatamixin","title":"fn spec.rules.mutate.targets.context.apiCall.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextapicallwithjmespath","title":"fn spec.rules.mutate.targets.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response for the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextapicallwithmethod","title":"fn spec.rules.mutate.targets.context.apiCall.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is the HTTP request type (GET or POST).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextapicallwithurlpath","title":"fn spec.rules.mutate.targets.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutatetargetscontextapicalldata","title":"obj spec.rules.mutate.targets.context.apiCall.data","text":"<p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextapicalldatawithkey","title":"fn spec.rules.mutate.targets.context.apiCall.data.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is a unique identifier for the data value\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextapicalldatawithvalue","title":"fn spec.rules.mutate.targets.context.apiCall.data.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the data value\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutatetargetscontextapicallservice","title":"obj spec.rules.mutate.targets.context.apiCall.service","text":"<p>\"Service is an API call to a JSON web service\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextapicallservicewithcabundle","title":"fn spec.rules.mutate.targets.context.apiCall.service.withCaBundle","text":"<pre><code>withCaBundle(caBundle)\n</code></pre> <p>\"CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextapicallservicewithurl","title":"fn spec.rules.mutate.targets.context.apiCall.service.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the JSON web service URL. A typical form is <code>https://{service}.{namespace}:{port}/{path}</code>.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutatetargetscontextconfigmap","title":"obj spec.rules.mutate.targets.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextconfigmapwithname","title":"fn spec.rules.mutate.targets.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextconfigmapwithnamespace","title":"fn spec.rules.mutate.targets.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutatetargetscontextimageregistry","title":"obj spec.rules.mutate.targets.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextimageregistrywithjmespath","title":"fn spec.rules.mutate.targets.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextimageregistrywithreference","title":"fn spec.rules.mutate.targets.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutatetargetscontextimageregistryimageregistrycredentials","title":"obj spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextimageregistryimageregistrycredentialswithallowinsecureregistry","title":"fn spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextimageregistryimageregistrycredentialswithproviders","title":"fn spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextimageregistryimageregistrycredentialswithprovidersmixin","title":"fn spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextimageregistryimageregistrycredentialswithsecrets","title":"fn spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextimageregistryimageregistrycredentialswithsecretsmixin","title":"fn spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesmutatetargetscontextvariable","title":"obj spec.rules.mutate.targets.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextvariablewithdefault","title":"fn spec.rules.mutate.targets.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextvariablewithjmespath","title":"fn spec.rules.mutate.targets.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetscontextvariablewithvalue","title":"fn spec.rules.mutate.targets.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidate","title":"obj spec.rules.validate","text":"<p>\"Validation is used to validate matching resources.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatewithanypattern","title":"fn spec.rules.validate.withAnyPattern","text":"<pre><code>withAnyPattern(anyPattern)\n</code></pre> <p>\"AnyPattern specifies list of validation patterns. At least one of the patterns must be satisfied for the validation rule to succeed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatewithforeach","title":"fn spec.rules.validate.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatewithforeachmixin","title":"fn spec.rules.validate.withForeachMixin","text":"<pre><code>withForeachMixin(foreach)\n</code></pre> <p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatewithmessage","title":"fn spec.rules.validate.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message specifies a custom message to be displayed on failure.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatewithpattern","title":"fn spec.rules.validate.withPattern","text":"<pre><code>withPattern(pattern)\n</code></pre> <p>\"Pattern specifies an overlay-style pattern used to check resources.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatecel","title":"obj spec.rules.validate.cel","text":"<p>\"CEL allows validation checks using the Common Expression Language (https://kubernetes.io/docs/reference/using-api/cel/).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelwithauditannotations","title":"fn spec.rules.validate.cel.withAuditAnnotations","text":"<pre><code>withAuditAnnotations(auditAnnotations)\n</code></pre> <p>\"AuditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelwithauditannotationsmixin","title":"fn spec.rules.validate.cel.withAuditAnnotationsMixin","text":"<pre><code>withAuditAnnotationsMixin(auditAnnotations)\n</code></pre> <p>\"AuditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelwithexpressions","title":"fn spec.rules.validate.cel.withExpressions","text":"<pre><code>withExpressions(expressions)\n</code></pre> <p>\"Expressions is a list of CELExpression types.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelwithexpressionsmixin","title":"fn spec.rules.validate.cel.withExpressionsMixin","text":"<pre><code>withExpressionsMixin(expressions)\n</code></pre> <p>\"Expressions is a list of CELExpression types.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelwithvariables","title":"fn spec.rules.validate.cel.withVariables","text":"<pre><code>withVariables(variables)\n</code></pre> <p>\"Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under <code>variables</code> in other expressions of the policy.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelwithvariablesmixin","title":"fn spec.rules.validate.cel.withVariablesMixin","text":"<pre><code>withVariablesMixin(variables)\n</code></pre> <p>\"Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under <code>variables</code> in other expressions of the policy.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatecelauditannotations","title":"obj spec.rules.validate.cel.auditAnnotations","text":"<p>\"AuditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelauditannotationswithkey","title":"fn spec.rules.validate.cel.auditAnnotations.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key specifies the audit annotation key. The audit annotation keys of a ValidatingAdmissionPolicy must be unique. The key must be a qualified name ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length. \\n The key is combined with the resource name of the ValidatingAdmissionPolicy to construct an audit annotation key: \\\"{ValidatingAdmissionPolicy name}/{key}\\\". \\n If an admission webhook uses the same resource name as this ValidatingAdmissionPolicy and the same audit annotation key, the annotation key will be identical. In this case, the first annotation written with the key will be included in the audit event and all subsequent annotations with the same key will be discarded. \\n Required.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelauditannotationswithvalueexpression","title":"fn spec.rules.validate.cel.auditAnnotations.withValueExpression","text":"<pre><code>withValueExpression(valueExpression)\n</code></pre> <p>\"valueExpression represents the expression which is evaluated by CEL to produce an audit annotation value. The expression must evaluate to either a string or null value. If the expression evaluates to a string, the audit annotation is included with the string value. If the expression evaluates to null or empty string the audit annotation will be omitted. The valueExpression may be no longer than 5kb in length. If the result of the valueExpression is more than 10kb in length, it will be truncated to 10kb. \\n If multiple ValidatingAdmissionPolicyBinding resources match an API request, then the valueExpression will be evaluated for each binding. All unique values produced by the valueExpressions will be joined together in a comma-separated list. \\n Required.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatecelexpressions","title":"obj spec.rules.validate.cel.expressions","text":"<p>\"Expressions is a list of CELExpression types.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelexpressionswithexpression","title":"fn spec.rules.validate.cel.expressions.withExpression","text":"<pre><code>withExpression(expression)\n</code></pre> <p>\"Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables: \\n - 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request(ref). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value. For example, a variable named 'foo' can be accessed as 'variables.foo'. - 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request. See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the request resource. \\n The <code>apiVersion</code>, <code>kind</code>, <code>metadata.name</code> and <code>metadata.generateName</code> are always accessible from the root of the object. No other metadata properties are accessible. \\n Only property names of the form <code>[a-zA-Z_.-/][a-zA-Z0-9_.-/]*</code> are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '' escapes to '__underscores' - '.' escapes to 'dot' - '-' escapes to 'dash' - '/' escapes to 'slash' - Property names that exactly match a CEL RESERVED keyword escape to '{keyword}'. The keywords are: \\\"true\\\", \\\"false\\\", \\\"null\\\", \\\"in\\\", \\\"as\\\", \\\"break\\\", \\\"const\\\", \\\"continue\\\", \\\"else\\\", \\\"for\\\", \\\"function\\\", \\\"if\\\", \\\"import\\\", \\\"let\\\", \\\"loop\\\", \\\"package\\\", \\\"namespace\\\", \\\"return\\\". Examples: - Expression accessing a property named \\\"namespace\\\": {\\\"Expression\\\": \\\"object.namespace &gt; 0\\\"} - Expression accessing a property named \\\"x-prop\\\": {\\\"Expression\\\": \\\"object.x__dash__prop &gt; 0\\\"} - Expression accessing a property named \\\"redact__d\\\": {\\\"Expression\\\": \\\"object.redact__underscores__d &gt; 0\\\"} \\n Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type: - 'set': <code>X + Y</code> performs a union where the array positions of all elements in <code>X</code> are preserved and non-intersecting elements in <code>Y</code> are appended, retaining their partial order. - 'map': <code>X + Y</code> performs a merge where the array positions of all keys in <code>X</code> are preserved but the values are overwritten by values in <code>Y</code> when the key sets of <code>X</code> and <code>Y</code> intersect. Elements in <code>Y</code> with non-intersecting keys are appended, retaining their partial order. Required.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelexpressionswithmessage","title":"fn spec.rules.validate.cel.expressions.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is \\\"failed rule: {Rule}\\\". e.g. \\\"must be a URL with the host matching spec.host\\\" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is \\\"failed Expression: {Expression}\\\".\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelexpressionswithmessageexpression","title":"fn spec.rules.validate.cel.expressions.withMessageExpression","text":"<pre><code>withMessageExpression(messageExpression)\n</code></pre> <p>\"messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a validation, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the <code>expression</code> except for 'authorizer' and 'authorizer.requestResource'. Example: \\\"object.x must be less than max (\\\"+string(params.max)+\\\")\\</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelexpressionswithreason","title":"fn spec.rules.validate.cel.expressions.withReason","text":"<pre><code>withReason(reason)\n</code></pre> <p>\"Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: \\\"Unauthorized\\\", \\\"Forbidden\\\", \\\"Invalid\\\", \\\"RequestEntityTooLarge\\\". If not set, StatusReasonInvalid is used in the response to the client.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatecelparamkind","title":"obj spec.rules.validate.cel.paramKind","text":"<p>\"ParamKind is a tuple of Group Kind and Version.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelparamkindwithapiversion","title":"fn spec.rules.validate.cel.paramKind.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the API group version the resources belong to. In format of \\\"group/version\\\". Required.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelparamkindwithkind","title":"fn spec.rules.validate.cel.paramKind.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the API kind the resources belong to. Required.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatecelparamref","title":"obj spec.rules.validate.cel.paramRef","text":"<p>\"ParamRef references a parameter resource.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelparamrefwithname","title":"fn spec.rules.validate.cel.paramRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"<code>name</code> is the name of the resource being referenced. \\n <code>name</code> and <code>selector</code> are mutually exclusive properties. If one is set, the other must be unset.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelparamrefwithnamespace","title":"fn spec.rules.validate.cel.paramRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"namespace is the namespace of the referenced resource. Allows limiting the search for params to a specific namespace. Applies to both <code>name</code> and <code>selector</code> fields. \\n A per-namespace parameter may be used by specifying a namespace-scoped <code>paramKind</code> in the policy and leaving this field empty. \\n - If <code>paramKind</code> is cluster-scoped, this field MUST be unset. Setting this field results in a configuration error. \\n - If <code>paramKind</code> is namespace-scoped, the namespace of the object being evaluated for admission will be used when this field is left unset. Take care that if this is left empty the binding must not match any cluster-scoped resources, which will result in an error.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelparamrefwithparameternotfoundaction","title":"fn spec.rules.validate.cel.paramRef.withParameterNotFoundAction","text":"<pre><code>withParameterNotFoundAction(parameterNotFoundAction)\n</code></pre> <p>\"<code>parameterNotFoundAction</code> controls the behavior of the binding when the resource exists, and name or selector is valid, but there are no parameters matched by the binding. If the value is set to <code>Allow</code>, then no matched parameters will be treated as successful validation by the binding. If set to <code>Deny</code>, then no matched parameters will be subject to the <code>failurePolicy</code> of the policy. \\n Allowed values are <code>Allow</code> or <code>Deny</code> Default to <code>Deny</code>\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatecelparamrefselector","title":"obj spec.rules.validate.cel.paramRef.selector","text":"<p>\"selector can be used to match multiple param objects based on their labels. Supply selector: {} to match all resources of the ParamKind. \\n If multiple params are found, they are all evaluated with the policy expressions and the results are ANDed together. \\n One of <code>name</code> or <code>selector</code> must be set, but <code>name</code> and <code>selector</code> are mutually exclusive properties. If one is set, the other must be unset.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelparamrefselectorwithmatchexpressions","title":"fn spec.rules.validate.cel.paramRef.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelparamrefselectorwithmatchexpressionsmixin","title":"fn spec.rules.validate.cel.paramRef.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelparamrefselectorwithmatchlabels","title":"fn spec.rules.validate.cel.paramRef.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelparamrefselectorwithmatchlabelsmixin","title":"fn spec.rules.validate.cel.paramRef.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatecelparamrefselectormatchexpressions","title":"obj spec.rules.validate.cel.paramRef.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelparamrefselectormatchexpressionswithkey","title":"fn spec.rules.validate.cel.paramRef.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelparamrefselectormatchexpressionswithoperator","title":"fn spec.rules.validate.cel.paramRef.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelparamrefselectormatchexpressionswithvalues","title":"fn spec.rules.validate.cel.paramRef.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelparamrefselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.validate.cel.paramRef.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatecelvariables","title":"obj spec.rules.validate.cel.variables","text":"<p>\"Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under <code>variables</code> in other expressions of the policy.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelvariableswithexpression","title":"fn spec.rules.validate.cel.variables.withExpression","text":"<pre><code>withExpression(expression)\n</code></pre> <p>\"Expression is the expression that will be evaluated as the value of the variable. The CEL expression has access to the same identifiers as the CEL expressions in Validation.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatecelvariableswithname","title":"fn spec.rules.validate.cel.variables.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables. The variable can be accessed in other expressions through <code>variables</code> For example, if name is \\\"foo\\\", the variable will be available as <code>variables.foo</code>\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatedeny","title":"obj spec.rules.validate.deny","text":"<p>\"Deny defines conditions used to pass or fail a validation rule.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatedenywithconditions","title":"fn spec.rules.validate.deny.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Multiple conditions can be declared under an <code>any</code> or <code>all</code> statement. A direct list of conditions (without <code>any</code> or <code>all</code> statements) is also supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/validate/#deny-rules\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeach","title":"obj spec.rules.validate.foreach","text":"<p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachwithanypattern","title":"fn spec.rules.validate.foreach.withAnyPattern","text":"<pre><code>withAnyPattern(anyPattern)\n</code></pre> <p>\"AnyPattern specifies list of validation patterns. At least one of the patterns must be satisfied for the validation rule to succeed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachwithcontext","title":"fn spec.rules.validate.foreach.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachwithcontextmixin","title":"fn spec.rules.validate.foreach.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachwithelementscope","title":"fn spec.rules.validate.foreach.withElementScope","text":"<pre><code>withElementScope(elementScope)\n</code></pre> <p>\"ElementScope specifies whether to use the current list element as the scope for validation. Defaults to \\\"true\\\" if not specified. When set to \\\"false\\\", \\\"request.object\\\" is used as the validation scope within the foreach block to allow referencing other elements in the subtree.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachwithforeach","title":"fn spec.rules.validate.foreach.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"Foreach declares a nested foreach iterator\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachwithlist","title":"fn spec.rules.validate.foreach.withList","text":"<pre><code>withList(list)\n</code></pre> <p>\"List specifies a JMESPath expression that results in one or more elements to which the validation logic is applied.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachwithpattern","title":"fn spec.rules.validate.foreach.withPattern","text":"<pre><code>withPattern(pattern)\n</code></pre> <p>\"Pattern specifies an overlay-style pattern used to check resources.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachcontext","title":"obj spec.rules.validate.foreach.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextwithname","title":"fn spec.rules.validate.foreach.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachcontextapicall","title":"obj spec.rules.validate.foreach.context.apiCall","text":"<p>\"APICall is an HTTP request to the Kubernetes API server, or other JSON web service. The data returned is stored in the context with the name for the context entry.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicallwithdata","title":"fn spec.rules.validate.foreach.context.apiCall.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicallwithdatamixin","title":"fn spec.rules.validate.foreach.context.apiCall.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicallwithjmespath","title":"fn spec.rules.validate.foreach.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response for the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicallwithmethod","title":"fn spec.rules.validate.foreach.context.apiCall.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is the HTTP request type (GET or POST).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicallwithurlpath","title":"fn spec.rules.validate.foreach.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachcontextapicalldata","title":"obj spec.rules.validate.foreach.context.apiCall.data","text":"<p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicalldatawithkey","title":"fn spec.rules.validate.foreach.context.apiCall.data.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is a unique identifier for the data value\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicalldatawithvalue","title":"fn spec.rules.validate.foreach.context.apiCall.data.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the data value\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachcontextapicallservice","title":"obj spec.rules.validate.foreach.context.apiCall.service","text":"<p>\"Service is an API call to a JSON web service\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicallservicewithcabundle","title":"fn spec.rules.validate.foreach.context.apiCall.service.withCaBundle","text":"<pre><code>withCaBundle(caBundle)\n</code></pre> <p>\"CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicallservicewithurl","title":"fn spec.rules.validate.foreach.context.apiCall.service.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the JSON web service URL. A typical form is <code>https://{service}.{namespace}:{port}/{path}</code>.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachcontextconfigmap","title":"obj spec.rules.validate.foreach.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextconfigmapwithname","title":"fn spec.rules.validate.foreach.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextconfigmapwithnamespace","title":"fn spec.rules.validate.foreach.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachcontextimageregistry","title":"obj spec.rules.validate.foreach.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextimageregistrywithjmespath","title":"fn spec.rules.validate.foreach.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextimageregistrywithreference","title":"fn spec.rules.validate.foreach.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachcontextimageregistryimageregistrycredentials","title":"obj spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextimageregistryimageregistrycredentialswithallowinsecureregistry","title":"fn spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextimageregistryimageregistrycredentialswithproviders","title":"fn spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextimageregistryimageregistrycredentialswithprovidersmixin","title":"fn spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextimageregistryimageregistrycredentialswithsecrets","title":"fn spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextimageregistryimageregistrycredentialswithsecretsmixin","title":"fn spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachcontextvariable","title":"obj spec.rules.validate.foreach.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextvariablewithdefault","title":"fn spec.rules.validate.foreach.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextvariablewithjmespath","title":"fn spec.rules.validate.foreach.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextvariablewithvalue","title":"fn spec.rules.validate.foreach.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachdeny","title":"obj spec.rules.validate.foreach.deny","text":"<p>\"Deny defines conditions used to pass or fail a validation rule.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachdenywithconditions","title":"fn spec.rules.validate.foreach.deny.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Multiple conditions can be declared under an <code>any</code> or <code>all</code> statement. A direct list of conditions (without <code>any</code> or <code>all</code> statements) is also supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/validate/#deny-rules\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachpreconditions","title":"obj spec.rules.validate.foreach.preconditions","text":"<p>\"AnyAllConditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionswithall","title":"fn spec.rules.validate.foreach.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionswithallmixin","title":"fn spec.rules.validate.foreach.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionswithany","title":"fn spec.rules.validate.foreach.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionswithanymixin","title":"fn spec.rules.validate.foreach.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachpreconditionsall","title":"obj spec.rules.validate.foreach.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsallwithkey","title":"fn spec.rules.validate.foreach.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsallwithmessage","title":"fn spec.rules.validate.foreach.preconditions.all.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsallwithoperator","title":"fn spec.rules.validate.foreach.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsallwithvalue","title":"fn spec.rules.validate.foreach.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachpreconditionsany","title":"obj spec.rules.validate.foreach.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsanywithkey","title":"fn spec.rules.validate.foreach.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsanywithmessage","title":"fn spec.rules.validate.foreach.preconditions.any.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsanywithoperator","title":"fn spec.rules.validate.foreach.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsanywithvalue","title":"fn spec.rules.validate.foreach.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifests","title":"obj spec.rules.validate.manifests","text":"<p>\"Manifest specifies conditions for manifest verification\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestswithannotationdomain","title":"fn spec.rules.validate.manifests.withAnnotationDomain","text":"<pre><code>withAnnotationDomain(annotationDomain)\n</code></pre> <p>\"AnnotationDomain is custom domain of annotation for message and signature. Default is \\\"cosign.sigstore.dev\\\".\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestswithattestors","title":"fn spec.rules.validate.manifests.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestswithattestorsmixin","title":"fn spec.rules.validate.manifests.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestswithignorefields","title":"fn spec.rules.validate.manifests.withIgnoreFields","text":"<pre><code>withIgnoreFields(ignoreFields)\n</code></pre> <p>\"Fields which will be ignored while comparing manifests.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestswithignorefieldsmixin","title":"fn spec.rules.validate.manifests.withIgnoreFieldsMixin","text":"<pre><code>withIgnoreFieldsMixin(ignoreFields)\n</code></pre> <p>\"Fields which will be ignored while comparing manifests.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestswithrepository","title":"fn spec.rules.validate.manifests.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for resource bundle reference. The repository can be overridden per Attestor or Attestation.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestors","title":"obj spec.rules.validate.manifests.attestors","text":"<p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorswithcount","title":"fn spec.rules.validate.manifests.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorswithentries","title":"fn spec.rules.validate.manifests.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorswithentriesmixin","title":"fn spec.rules.validate.manifests.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentries","title":"obj spec.rules.validate.manifests.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieswithannotations","title":"fn spec.rules.validate.manifests.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieswithannotationsmixin","title":"fn spec.rules.validate.manifests.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieswithattestor","title":"fn spec.rules.validate.manifests.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested set of Attestor used to specify a more complex set of match authorities.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieswithrepository","title":"fn spec.rules.validate.manifests.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentriescertificates","title":"obj spec.rules.validate.manifests.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentriescertificateswithcert","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Cert is an optional PEM-encoded public certificate.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentriescertificateswithcertchain","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertChain is an optional PEM encoded set of certificates used to verify.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentriescertificatesctlog","title":"obj spec.rules.validate.manifests.attestors.entries.certificates.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesctlogwithignoresct","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesctlogwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentriescertificatesrekor","title":"obj spec.rules.validate.manifests.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesrekorwithignoretlog","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesrekorwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeyless","title":"obj spec.rules.validate.manifests.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithissuer","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithroots","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithsubject","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeylessctlog","title":"obj spec.rules.validate.manifests.attestors.entries.keyless.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessctlogwithignoresct","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessctlogwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeylessrekor","title":"obj spec.rules.validate.manifests.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessrekorwithignoretlog","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessrekorwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeys","title":"obj spec.rules.validate.manifests.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithkms","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithpublickeys","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeysctlog","title":"obj spec.rules.validate.manifests.attestors.entries.keys.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeysctlogwithignoresct","title":"fn spec.rules.validate.manifests.attestors.entries.keys.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeysctlogwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.keys.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeysrekor","title":"obj spec.rules.validate.manifests.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeysrekorwithignoretlog","title":"fn spec.rules.validate.manifests.attestors.entries.keys.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeysrekorwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.keys.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeysrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeyssecret","title":"obj spec.rules.validate.manifests.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeyssecretwithname","title":"fn spec.rules.validate.manifests.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.validate.manifests.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsdryrun","title":"obj spec.rules.validate.manifests.dryRun","text":"<p>\"DryRun configuration\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsdryrunwithenable","title":"fn spec.rules.validate.manifests.dryRun.withEnable","text":"<pre><code>withEnable(enable)\n</code></pre>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsdryrunwithnamespace","title":"fn spec.rules.validate.manifests.dryRun.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsignorefields","title":"obj spec.rules.validate.manifests.ignoreFields","text":"<p>\"Fields which will be ignored while comparing manifests.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldswithfields","title":"fn spec.rules.validate.manifests.ignoreFields.withFields","text":"<pre><code>withFields(fields)\n</code></pre>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldswithfieldsmixin","title":"fn spec.rules.validate.manifests.ignoreFields.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldswithobjects","title":"fn spec.rules.validate.manifests.ignoreFields.withObjects","text":"<pre><code>withObjects(objects)\n</code></pre>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldswithobjectsmixin","title":"fn spec.rules.validate.manifests.ignoreFields.withObjectsMixin","text":"<pre><code>withObjectsMixin(objects)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsignorefieldsobjects","title":"obj spec.rules.validate.manifests.ignoreFields.objects","text":""},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithgroup","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withGroup","text":"<pre><code>withGroup(group)\n</code></pre>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithkind","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithname","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithnamespace","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithversion","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withVersion","text":"<pre><code>withVersion(version)\n</code></pre>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatepodsecurity","title":"obj spec.rules.validate.podSecurity","text":"<p>\"PodSecurity applies exemptions for Kubernetes Pod Security admission by specifying exclusions for Pod Security Standards controls.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatepodsecuritywithexclude","title":"fn spec.rules.validate.podSecurity.withExclude","text":"<pre><code>withExclude(exclude)\n</code></pre> <p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatepodsecuritywithexcludemixin","title":"fn spec.rules.validate.podSecurity.withExcludeMixin","text":"<pre><code>withExcludeMixin(exclude)\n</code></pre> <p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatepodsecuritywithlevel","title":"fn spec.rules.validate.podSecurity.withLevel","text":"<pre><code>withLevel(level)\n</code></pre> <p>\"Level defines the Pod Security Standard level to be applied to workloads. Allowed values are privileged, baseline, and restricted.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatepodsecuritywithversion","title":"fn spec.rules.validate.podSecurity.withVersion","text":"<pre><code>withVersion(version)\n</code></pre> <p>\"Version defines the Pod Security Standard versions that Kubernetes supports. Allowed values are v1.19, v1.20, v1.21, v1.22, v1.23, v1.24, v1.25, v1.26, latest. Defaults to latest.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesvalidatepodsecurityexclude","title":"obj spec.rules.validate.podSecurity.exclude","text":"<p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatepodsecurityexcludewithcontrolname","title":"fn spec.rules.validate.podSecurity.exclude.withControlName","text":"<pre><code>withControlName(controlName)\n</code></pre> <p>\"ControlName specifies the name of the Pod Security Standard control. See: https://kubernetes.io/docs/concepts/security/pod-security-standards/\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatepodsecurityexcludewithimages","title":"fn spec.rules.validate.podSecurity.exclude.withImages","text":"<pre><code>withImages(images)\n</code></pre> <p>\"Images selects matching containers and applies the container level PSS. Each image is the image name consisting of the registry address, repository, image, and tag. Empty list matches no containers, PSS checks are applied at the pod level only. Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesvalidatepodsecurityexcludewithimagesmixin","title":"fn spec.rules.validate.podSecurity.exclude.withImagesMixin","text":"<pre><code>withImagesMixin(images)\n</code></pre> <p>\"Images selects matching containers and applies the container level PSS. Each image is the image name consisting of the registry address, repository, image, and tag. Empty list matches no containers, PSS checks are applied at the pod level only. Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimages","title":"obj spec.rules.verifyImages","text":"<p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithadditionalextensions","title":"fn spec.rules.verifyImages.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"Deprecated.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithadditionalextensionsmixin","title":"fn spec.rules.verifyImages.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"Deprecated.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithannotations","title":"fn spec.rules.verifyImages.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Deprecated. Use annotations per Attestor instead.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithannotationsmixin","title":"fn spec.rules.verifyImages.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Deprecated. Use annotations per Attestor instead.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithattestations","title":"fn spec.rules.verifyImages.withAttestations","text":"<pre><code>withAttestations(attestations)\n</code></pre> <p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithattestationsmixin","title":"fn spec.rules.verifyImages.withAttestationsMixin","text":"<pre><code>withAttestationsMixin(attestations)\n</code></pre> <p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithattestors","title":"fn spec.rules.verifyImages.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithattestorsmixin","title":"fn spec.rules.verifyImages.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithimage","title":"fn spec.rules.verifyImages.withImage","text":"<pre><code>withImage(image)\n</code></pre> <p>\"Deprecated. Use ImageReferences instead.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithimagereferences","title":"fn spec.rules.verifyImages.withImageReferences","text":"<pre><code>withImageReferences(imageReferences)\n</code></pre> <p>\"ImageReferences is a list of matching image reference patterns. At least one pattern in the list must match the image for the rule to apply. Each image reference consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest). Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithimagereferencesmixin","title":"fn spec.rules.verifyImages.withImageReferencesMixin","text":"<pre><code>withImageReferencesMixin(imageReferences)\n</code></pre> <p>\"ImageReferences is a list of matching image reference patterns. At least one pattern in the list must match the image for the rule to apply. Each image reference consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest). Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithissuer","title":"fn spec.rules.verifyImages.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Deprecated. Use KeylessAttestor instead.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithkey","title":"fn spec.rules.verifyImages.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Deprecated. Use StaticKeyAttestor instead.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithmutatedigest","title":"fn spec.rules.verifyImages.withMutateDigest","text":"<pre><code>withMutateDigest(mutateDigest)\n</code></pre> <p>\"MutateDigest enables replacement of image tags with digests. Defaults to true.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithrepository","title":"fn spec.rules.verifyImages.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule. If specified Repository will override the default OCI image repository configured for the installation. The repository can also be overridden per Attestor or Attestation.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithrequired","title":"fn spec.rules.verifyImages.withRequired","text":"<pre><code>withRequired(required)\n</code></pre> <p>\"Required validates that images are verified i.e. have matched passed a signature or attestation check.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithroots","title":"fn spec.rules.verifyImages.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Deprecated. Use KeylessAttestor instead.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithsubject","title":"fn spec.rules.verifyImages.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Deprecated. Use KeylessAttestor instead.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithtype","title":"fn spec.rules.verifyImages.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies the method of signature validation. The allowed options are Cosign and Notary. By default Cosign is used if a type is not specified.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithusecache","title":"fn spec.rules.verifyImages.withUseCache","text":"<pre><code>withUseCache(useCache)\n</code></pre> <p>\"UseCache enables caching of image verify responses for this rule.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithverifydigest","title":"fn spec.rules.verifyImages.withVerifyDigest","text":"<pre><code>withVerifyDigest(verifyDigest)\n</code></pre> <p>\"VerifyDigest validates that images have a digest.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestations","title":"obj spec.rules.verifyImages.attestations","text":"<p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationswithattestors","title":"fn spec.rules.verifyImages.attestations.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specify the required attestors (i.e. authorities).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationswithattestorsmixin","title":"fn spec.rules.verifyImages.attestations.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specify the required attestors (i.e. authorities).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationswithconditions","title":"fn spec.rules.verifyImages.attestations.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationswithconditionsmixin","title":"fn spec.rules.verifyImages.attestations.withConditionsMixin","text":"<pre><code>withConditionsMixin(conditions)\n</code></pre> <p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationswithpredicatetype","title":"fn spec.rules.verifyImages.attestations.withPredicateType","text":"<pre><code>withPredicateType(predicateType)\n</code></pre> <p>\"Deprecated in favour of 'Type', to be removed soon\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationswithtype","title":"fn spec.rules.verifyImages.attestations.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of attestation contained within the Statement.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestors","title":"obj spec.rules.verifyImages.attestations.attestors","text":"<p>\"Attestors specify the required attestors (i.e. authorities).\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorswithcount","title":"fn spec.rules.verifyImages.attestations.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorswithentries","title":"fn spec.rules.verifyImages.attestations.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorswithentriesmixin","title":"fn spec.rules.verifyImages.attestations.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentries","title":"obj spec.rules.verifyImages.attestations.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieswithannotations","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieswithannotationsmixin","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieswithattestor","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested set of Attestor used to specify a more complex set of match authorities.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieswithrepository","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentriescertificates","title":"obj spec.rules.verifyImages.attestations.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentriescertificateswithcert","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Cert is an optional PEM-encoded public certificate.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentriescertificateswithcertchain","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertChain is an optional PEM encoded set of certificates used to verify.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentriescertificatesctlog","title":"obj spec.rules.verifyImages.attestations.attestors.entries.certificates.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesctlogwithignoresct","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesctlogwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentriescertificatesrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesrekorwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeyless","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithissuer","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithroots","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithsubject","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeylessctlog","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keyless.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessctlogwithignoresct","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessctlogwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeylessrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessrekorwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeys","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithkms","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithpublickeys","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeysctlog","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysctlogwithignoresct","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysctlogwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeysrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysrekorwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeyssecret","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyssecretwithname","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsconditions","title":"obj spec.rules.verifyImages.attestations.conditions","text":"<p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionswithall","title":"fn spec.rules.verifyImages.attestations.conditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionswithallmixin","title":"fn spec.rules.verifyImages.attestations.conditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionswithany","title":"fn spec.rules.verifyImages.attestations.conditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionswithanymixin","title":"fn spec.rules.verifyImages.attestations.conditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsconditionsall","title":"obj spec.rules.verifyImages.attestations.conditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsallwithkey","title":"fn spec.rules.verifyImages.attestations.conditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsallwithmessage","title":"fn spec.rules.verifyImages.attestations.conditions.all.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsallwithoperator","title":"fn spec.rules.verifyImages.attestations.conditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsallwithvalue","title":"fn spec.rules.verifyImages.attestations.conditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsconditionsany","title":"obj spec.rules.verifyImages.attestations.conditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsanywithkey","title":"fn spec.rules.verifyImages.attestations.conditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsanywithmessage","title":"fn spec.rules.verifyImages.attestations.conditions.any.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsanywithoperator","title":"fn spec.rules.verifyImages.attestations.conditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsanywithvalue","title":"fn spec.rules.verifyImages.attestations.conditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestors","title":"obj spec.rules.verifyImages.attestors","text":"<p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorswithcount","title":"fn spec.rules.verifyImages.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorswithentries","title":"fn spec.rules.verifyImages.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorswithentriesmixin","title":"fn spec.rules.verifyImages.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestorsentries","title":"obj spec.rules.verifyImages.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieswithannotations","title":"fn spec.rules.verifyImages.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieswithannotationsmixin","title":"fn spec.rules.verifyImages.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieswithattestor","title":"fn spec.rules.verifyImages.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested set of Attestor used to specify a more complex set of match authorities.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieswithrepository","title":"fn spec.rules.verifyImages.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestorsentriescertificates","title":"obj spec.rules.verifyImages.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentriescertificateswithcert","title":"fn spec.rules.verifyImages.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Cert is an optional PEM-encoded public certificate.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentriescertificateswithcertchain","title":"fn spec.rules.verifyImages.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertChain is an optional PEM encoded set of certificates used to verify.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestorsentriescertificatesctlog","title":"obj spec.rules.verifyImages.attestors.entries.certificates.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentriescertificatesctlogwithignoresct","title":"fn spec.rules.verifyImages.attestors.entries.certificates.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentriescertificatesctlogwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.certificates.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestorsentriescertificatesrekor","title":"obj spec.rules.verifyImages.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentriescertificatesrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestors.entries.certificates.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentriescertificatesrekorwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.certificates.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeyless","title":"obj spec.rules.verifyImages.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylesswithissuer","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylesswithroots","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylesswithsubject","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeylessctlog","title":"obj spec.rules.verifyImages.attestors.entries.keyless.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylessctlogwithignoresct","title":"fn spec.rules.verifyImages.attestors.entries.keyless.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylessctlogwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.keyless.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeylessrekor","title":"obj spec.rules.verifyImages.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylessrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestors.entries.keyless.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylessrekorwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.keyless.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeys","title":"obj spec.rules.verifyImages.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeyswithkms","title":"fn spec.rules.verifyImages.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeyswithpublickeys","title":"fn spec.rules.verifyImages.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.verifyImages.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeysctlog","title":"obj spec.rules.verifyImages.attestors.entries.keys.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeysctlogwithignoresct","title":"fn spec.rules.verifyImages.attestors.entries.keys.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeysctlogwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.keys.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeysrekor","title":"obj spec.rules.verifyImages.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeysrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestors.entries.keys.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeysrekorwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.keys.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeysrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeyssecret","title":"obj spec.rules.verifyImages.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeyssecretwithname","title":"fn spec.rules.verifyImages.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.verifyImages.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesimageregistrycredentials","title":"obj spec.rules.verifyImages.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesimageregistrycredentialswithallowinsecureregistry","title":"fn spec.rules.verifyImages.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesimageregistrycredentialswithproviders","title":"fn spec.rules.verifyImages.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesimageregistrycredentialswithprovidersmixin","title":"fn spec.rules.verifyImages.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesimageregistrycredentialswithsecrets","title":"fn spec.rules.verifyImages.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesimageregistrycredentialswithsecretsmixin","title":"fn spec.rules.verifyImages.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specvalidationfailureactionoverrides","title":"obj spec.validationFailureActionOverrides","text":"<p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specvalidationfailureactionoverrideswithaction","title":"fn spec.validationFailureActionOverrides.withAction","text":"<pre><code>withAction(action)\n</code></pre> <p>\"ValidationFailureAction defines the policy validation failure action\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specvalidationfailureactionoverrideswithnamespaces","title":"fn spec.validationFailureActionOverrides.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specvalidationfailureactionoverrideswithnamespacesmixin","title":"fn spec.validationFailureActionOverrides.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specvalidationfailureactionoverridesnamespaceselector","title":"obj spec.validationFailureActionOverrides.namespaceSelector","text":"<p>\"A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specvalidationfailureactionoverridesnamespaceselectorwithmatchexpressions","title":"fn spec.validationFailureActionOverrides.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specvalidationfailureactionoverridesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.validationFailureActionOverrides.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specvalidationfailureactionoverridesnamespaceselectorwithmatchlabels","title":"fn spec.validationFailureActionOverrides.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specvalidationfailureactionoverridesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.validationFailureActionOverrides.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#obj-specvalidationfailureactionoverridesnamespaceselectormatchexpressions","title":"obj spec.validationFailureActionOverrides.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specvalidationfailureactionoverridesnamespaceselectormatchexpressionswithkey","title":"fn spec.validationFailureActionOverrides.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specvalidationfailureactionoverridesnamespaceselectormatchexpressionswithoperator","title":"fn spec.validationFailureActionOverrides.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specvalidationfailureactionoverridesnamespaceselectormatchexpressionswithvalues","title":"fn spec.validationFailureActionOverrides.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/clusterPolicy/#fn-specvalidationfailureactionoverridesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.validationFailureActionOverrides.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/","title":"kyverno.v1.policy","text":"<p>\"Policy declares validation, mutation, and generation behaviors for matching resources. See: https://kyverno.io/docs/writing-policies/ for more information.\"</p>"},{"location":"1.11/kyverno/v1/policy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAdmission(admission)</code></li> <li><code>fn withApplyRules(applyRules)</code></li> <li><code>fn withBackground(background)</code></li> <li><code>fn withFailurePolicy(failurePolicy)</code></li> <li><code>fn withGenerateExisting(generateExisting)</code></li> <li><code>fn withGenerateExistingOnPolicyUpdate(generateExistingOnPolicyUpdate)</code></li> <li><code>fn withMutateExistingOnPolicyUpdate(mutateExistingOnPolicyUpdate)</code></li> <li><code>fn withRules(rules)</code></li> <li><code>fn withRulesMixin(rules)</code></li> <li><code>fn withSchemaValidation(schemaValidation)</code></li> <li><code>fn withUseServerSideApply(useServerSideApply)</code></li> <li><code>fn withValidationFailureAction(validationFailureAction)</code></li> <li><code>fn withValidationFailureActionOverrides(validationFailureActionOverrides)</code></li> <li><code>fn withValidationFailureActionOverridesMixin(validationFailureActionOverrides)</code></li> <li><code>fn withWebhookTimeoutSeconds(webhookTimeoutSeconds)</code></li> <li><code>obj spec.rules</code><ul> <li><code>fn withCelPreconditions(celPreconditions)</code></li> <li><code>fn withCelPreconditionsMixin(celPreconditions)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withImageExtractors(imageExtractors)</code></li> <li><code>fn withImageExtractorsMixin(imageExtractors)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPreconditions(preconditions)</code></li> <li><code>fn withVerifyImages(verifyImages)</code></li> <li><code>fn withVerifyImagesMixin(verifyImages)</code></li> <li><code>obj spec.rules.celPreconditions</code><ul> <li><code>fn withExpression(expression)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.rules.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.context.apiCall</code><ul> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> <li><code>obj spec.rules.context.apiCall.data</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.context.apiCall.service</code><ul> <li><code>fn withCaBundle(caBundle)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> <li><code>obj spec.rules.context.imageRegistry.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.rules.exclude.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.rules.exclude.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.rules.exclude.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.generate</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withData(data)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withSynchronize(synchronize)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec.rules.generate.clone</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.generate.cloneList</code><ul> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.rules.generate.cloneList.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.generate.cloneList.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.rules.match.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.rules.match.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.rules.match.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate</code><ul> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withForeachMixin(foreach)</code></li> <li><code>fn withPatchStrategicMerge(patchStrategicMerge)</code></li> <li><code>fn withPatchesJson6902(patchesJson6902)</code></li> <li><code>fn withTargets(targets)</code></li> <li><code>fn withTargetsMixin(targets)</code></li> <li><code>obj spec.rules.mutate.foreach</code><ul> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withList(list)</code></li> <li><code>fn withOrder(order)</code></li> <li><code>fn withPatchStrategicMerge(patchStrategicMerge)</code></li> <li><code>fn withPatchesJson6902(patchesJson6902)</code></li> <li><code>obj spec.rules.mutate.foreach.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.mutate.foreach.context.apiCall</code><ul> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> <li><code>obj spec.rules.mutate.foreach.context.apiCall.data</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.apiCall.service</code><ul> <li><code>fn withCaBundle(caBundle)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> <li><code>obj spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.mutate.foreach.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.targets</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPreconditions(preconditions)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec.rules.mutate.targets.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.mutate.targets.context.apiCall</code><ul> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> <li><code>obj spec.rules.mutate.targets.context.apiCall.data</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.targets.context.apiCall.service</code><ul> <li><code>fn withCaBundle(caBundle)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.targets.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.targets.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> <li><code>obj spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.targets.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate</code><ul> <li><code>fn withAnyPattern(anyPattern)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withForeachMixin(foreach)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPattern(pattern)</code></li> <li><code>obj spec.rules.validate.cel</code><ul> <li><code>fn withAuditAnnotations(auditAnnotations)</code></li> <li><code>fn withAuditAnnotationsMixin(auditAnnotations)</code></li> <li><code>fn withExpressions(expressions)</code></li> <li><code>fn withExpressionsMixin(expressions)</code></li> <li><code>fn withVariables(variables)</code></li> <li><code>fn withVariablesMixin(variables)</code></li> <li><code>obj spec.rules.validate.cel.auditAnnotations</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValueExpression(valueExpression)</code></li> </ul> </li> <li><code>obj spec.rules.validate.cel.expressions</code><ul> <li><code>fn withExpression(expression)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withMessageExpression(messageExpression)</code></li> <li><code>fn withReason(reason)</code></li> </ul> </li> <li><code>obj spec.rules.validate.cel.paramKind</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> </ul> </li> <li><code>obj spec.rules.validate.cel.paramRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withParameterNotFoundAction(parameterNotFoundAction)</code></li> <li><code>obj spec.rules.validate.cel.paramRef.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.validate.cel.paramRef.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.cel.variables</code><ul> <li><code>fn withExpression(expression)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.deny</code><ul> <li><code>fn withConditions(conditions)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach</code><ul> <li><code>fn withAnyPattern(anyPattern)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withElementScope(elementScope)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withList(list)</code></li> <li><code>fn withPattern(pattern)</code></li> <li><code>obj spec.rules.validate.foreach.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.validate.foreach.context.apiCall</code><ul> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> <li><code>obj spec.rules.validate.foreach.context.apiCall.data</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.apiCall.service</code><ul> <li><code>fn withCaBundle(caBundle)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> <li><code>obj spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach.deny</code><ul> <li><code>fn withConditions(conditions)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.validate.foreach.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests</code><ul> <li><code>fn withAnnotationDomain(annotationDomain)</code></li> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withIgnoreFields(ignoreFields)</code></li> <li><code>fn withIgnoreFieldsMixin(ignoreFields)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.validate.manifests.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.certificates.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.certificates.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keyless.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keyless.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.dryRun</code><ul> <li><code>fn withEnable(enable)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.ignoreFields</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>fn withObjects(objects)</code></li> <li><code>fn withObjectsMixin(objects)</code></li> <li><code>obj spec.rules.validate.manifests.ignoreFields.objects</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withVersion(version)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.podSecurity</code><ul> <li><code>fn withExclude(exclude)</code></li> <li><code>fn withExcludeMixin(exclude)</code></li> <li><code>fn withLevel(level)</code></li> <li><code>fn withVersion(version)</code></li> <li><code>obj spec.rules.validate.podSecurity.exclude</code><ul> <li><code>fn withControlName(controlName)</code></li> <li><code>fn withImages(images)</code></li> <li><code>fn withImagesMixin(images)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestations(attestations)</code></li> <li><code>fn withAttestationsMixin(attestations)</code></li> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withImage(image)</code></li> <li><code>fn withImageReferences(imageReferences)</code></li> <li><code>fn withImageReferencesMixin(imageReferences)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withMutateDigest(mutateDigest)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>fn withRequired(required)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withUseCache(useCache)</code></li> <li><code>fn withVerifyDigest(verifyDigest)</code></li> <li><code>obj spec.rules.verifyImages.attestations</code><ul> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withConditions(conditions)</code></li> <li><code>fn withConditionsMixin(conditions)</code></li> <li><code>fn withPredicateType(predicateType)</code></li> <li><code>fn withType(type)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.certificates.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keyless.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.conditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.verifyImages.attestations.conditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.conditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.certificates.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.certificates.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.keyless.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keyless.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.validationFailureActionOverrides</code><ul> <li><code>fn withAction(action)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.validationFailureActionOverrides.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.validationFailureActionOverrides.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.11/kyverno/v1/policy/#fields","title":"Fields","text":""},{"location":"1.11/kyverno/v1/policy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of Policy</p>"},{"location":"1.11/kyverno/v1/policy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-spec","title":"obj spec","text":"<p>\"Spec defines policy behaviors and contains one or more rules.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specwithadmission","title":"fn spec.withAdmission","text":"<pre><code>withAdmission(admission)\n</code></pre> <p>\"Admission controls if rules are applied during admission. Optional. Default value is \\\"true\\\".\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specwithapplyrules","title":"fn spec.withApplyRules","text":"<pre><code>withApplyRules(applyRules)\n</code></pre> <p>\"ApplyRules controls how rules in a policy are applied. Rule are processed in the order of declaration. When set to <code>One</code> processing stops after a rule has been applied i.e. the rule matches and results in a pass, fail, or error. When set to <code>All</code> all rules in the policy are processed. The default is <code>All</code>.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specwithbackground","title":"fn spec.withBackground","text":"<pre><code>withBackground(background)\n</code></pre> <p>\"Background controls if rules are applied to existing resources during a background scan. Optional. Default value is \\\"true\\\". The value must be set to \\\"false\\\" if the policy rule uses variables that are only available in the admission review request (e.g. user name).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specwithfailurepolicy","title":"fn spec.withFailurePolicy","text":"<pre><code>withFailurePolicy(failurePolicy)\n</code></pre> <p>\"FailurePolicy defines how unexpected policy errors and webhook response timeout errors are handled. Rules within the same policy share the same failure behavior. This field should not be accessed directly, instead <code>GetFailurePolicy()</code> should be used. Allowed values are Ignore or Fail. Defaults to Fail.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specwithgenerateexisting","title":"fn spec.withGenerateExisting","text":"<pre><code>withGenerateExisting(generateExisting)\n</code></pre> <p>\"GenerateExisting controls whether to trigger generate rule in existing resources If is set to \\\"true\\\" generate rule will be triggered and applied to existing matched resources. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specwithgenerateexistingonpolicyupdate","title":"fn spec.withGenerateExistingOnPolicyUpdate","text":"<pre><code>withGenerateExistingOnPolicyUpdate(generateExistingOnPolicyUpdate)\n</code></pre> <p>\"Deprecated, use generateExisting instead\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specwithmutateexistingonpolicyupdate","title":"fn spec.withMutateExistingOnPolicyUpdate","text":"<pre><code>withMutateExistingOnPolicyUpdate(mutateExistingOnPolicyUpdate)\n</code></pre> <p>\"MutateExistingOnPolicyUpdate controls if a mutateExisting policy is applied on policy events. Default value is \\\"false\\\".\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specwithrules","title":"fn spec.withRules","text":"<pre><code>withRules(rules)\n</code></pre> <p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specwithrulesmixin","title":"fn spec.withRulesMixin","text":"<pre><code>withRulesMixin(rules)\n</code></pre> <p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specwithschemavalidation","title":"fn spec.withSchemaValidation","text":"<pre><code>withSchemaValidation(schemaValidation)\n</code></pre> <p>\"SchemaValidation skips validation checks for policies as well as patched resources. Optional. The default value is set to \\\"true\\\", it must be set to \\\"false\\\" to disable the validation checks.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specwithuseserversideapply","title":"fn spec.withUseServerSideApply","text":"<pre><code>withUseServerSideApply(useServerSideApply)\n</code></pre> <p>\"UseServerSideApply controls whether to use server-side apply for generate rules If is set to \\\"true\\\" create &amp; update for generate rules will use apply instead of create/update. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specwithvalidationfailureaction","title":"fn spec.withValidationFailureAction","text":"<pre><code>withValidationFailureAction(validationFailureAction)\n</code></pre> <p>\"ValidationFailureAction defines if a validation policy rule violation should block the admission review request (enforce), or allow (audit) the admission review request and report an error in a policy report. Optional. Allowed values are audit or enforce. The default value is \\\"Audit\\\".\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specwithvalidationfailureactionoverrides","title":"fn spec.withValidationFailureActionOverrides","text":"<pre><code>withValidationFailureActionOverrides(validationFailureActionOverrides)\n</code></pre> <p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specwithvalidationfailureactionoverridesmixin","title":"fn spec.withValidationFailureActionOverridesMixin","text":"<pre><code>withValidationFailureActionOverridesMixin(validationFailureActionOverrides)\n</code></pre> <p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specwithwebhooktimeoutseconds","title":"fn spec.withWebhookTimeoutSeconds","text":"<pre><code>withWebhookTimeoutSeconds(webhookTimeoutSeconds)\n</code></pre> <p>\"WebhookTimeoutSeconds specifies the maximum time in seconds allowed to apply this policy. After the configured time expires, the admission request may fail, or may simply ignore the policy results, based on the failure policy. The default timeout is 10s, the value must be between 1 and 30 seconds.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrules","title":"obj spec.rules","text":"<p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specruleswithcelpreconditions","title":"fn spec.rules.withCelPreconditions","text":"<pre><code>withCelPreconditions(celPreconditions)\n</code></pre> <p>\"CELPreconditions are used to determine if a policy rule should be applied by evaluating a set of CEL conditions. It can only be used with the validate.cel subrule\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specruleswithcelpreconditionsmixin","title":"fn spec.rules.withCelPreconditionsMixin","text":"<pre><code>withCelPreconditionsMixin(celPreconditions)\n</code></pre> <p>\"CELPreconditions are used to determine if a policy rule should be applied by evaluating a set of CEL conditions. It can only be used with the validate.cel subrule\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specruleswithcontext","title":"fn spec.rules.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specruleswithcontextmixin","title":"fn spec.rules.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specruleswithimageextractors","title":"fn spec.rules.withImageExtractors","text":"<pre><code>withImageExtractors(imageExtractors)\n</code></pre> <p>\"ImageExtractors defines a mapping from kinds to ImageExtractorConfigs. This config is only valid for verifyImages rules.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specruleswithimageextractorsmixin","title":"fn spec.rules.withImageExtractorsMixin","text":"<pre><code>withImageExtractorsMixin(imageExtractors)\n</code></pre> <p>\"ImageExtractors defines a mapping from kinds to ImageExtractorConfigs. This config is only valid for verifyImages rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specruleswithname","title":"fn spec.rules.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a label to identify the rule, It must be unique within the policy.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specruleswithpreconditions","title":"fn spec.rules.withPreconditions","text":"<pre><code>withPreconditions(preconditions)\n</code></pre> <p>\"Preconditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. A direct list of conditions (without <code>any</code> or <code>all</code> statements is supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specruleswithverifyimages","title":"fn spec.rules.withVerifyImages","text":"<pre><code>withVerifyImages(verifyImages)\n</code></pre> <p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specruleswithverifyimagesmixin","title":"fn spec.rules.withVerifyImagesMixin","text":"<pre><code>withVerifyImagesMixin(verifyImages)\n</code></pre> <p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulescelpreconditions","title":"obj spec.rules.celPreconditions","text":"<p>\"CELPreconditions are used to determine if a policy rule should be applied by evaluating a set of CEL conditions. It can only be used with the validate.cel subrule\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescelpreconditionswithexpression","title":"fn spec.rules.celPreconditions.withExpression","text":"<pre><code>withExpression(expression)\n</code></pre> <p>\"Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables: \\n 'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request. See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the request resource. Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/ \\n Required.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescelpreconditionswithname","title":"fn spec.rules.celPreconditions.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName') \\n Required.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulescontext","title":"obj spec.rules.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextwithname","title":"fn spec.rules.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulescontextapicall","title":"obj spec.rules.context.apiCall","text":"<p>\"APICall is an HTTP request to the Kubernetes API server, or other JSON web service. The data returned is stored in the context with the name for the context entry.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextapicallwithdata","title":"fn spec.rules.context.apiCall.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextapicallwithdatamixin","title":"fn spec.rules.context.apiCall.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextapicallwithjmespath","title":"fn spec.rules.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response for the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextapicallwithmethod","title":"fn spec.rules.context.apiCall.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is the HTTP request type (GET or POST).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextapicallwithurlpath","title":"fn spec.rules.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulescontextapicalldata","title":"obj spec.rules.context.apiCall.data","text":"<p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextapicalldatawithkey","title":"fn spec.rules.context.apiCall.data.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is a unique identifier for the data value\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextapicalldatawithvalue","title":"fn spec.rules.context.apiCall.data.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the data value\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulescontextapicallservice","title":"obj spec.rules.context.apiCall.service","text":"<p>\"Service is an API call to a JSON web service\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextapicallservicewithcabundle","title":"fn spec.rules.context.apiCall.service.withCaBundle","text":"<pre><code>withCaBundle(caBundle)\n</code></pre> <p>\"CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextapicallservicewithurl","title":"fn spec.rules.context.apiCall.service.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the JSON web service URL. A typical form is <code>https://{service}.{namespace}:{port}/{path}</code>.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulescontextconfigmap","title":"obj spec.rules.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextconfigmapwithname","title":"fn spec.rules.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextconfigmapwithnamespace","title":"fn spec.rules.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulescontextimageregistry","title":"obj spec.rules.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextimageregistrywithjmespath","title":"fn spec.rules.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextimageregistrywithreference","title":"fn spec.rules.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulescontextimageregistryimageregistrycredentials","title":"obj spec.rules.context.imageRegistry.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextimageregistryimageregistrycredentialswithallowinsecureregistry","title":"fn spec.rules.context.imageRegistry.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextimageregistryimageregistrycredentialswithproviders","title":"fn spec.rules.context.imageRegistry.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextimageregistryimageregistrycredentialswithprovidersmixin","title":"fn spec.rules.context.imageRegistry.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextimageregistryimageregistrycredentialswithsecrets","title":"fn spec.rules.context.imageRegistry.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextimageregistryimageregistrycredentialswithsecretsmixin","title":"fn spec.rules.context.imageRegistry.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulescontextvariable","title":"obj spec.rules.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextvariablewithdefault","title":"fn spec.rules.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextvariablewithjmespath","title":"fn spec.rules.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulescontextvariablewithvalue","title":"fn spec.rules.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexclude","title":"obj spec.rules.exclude","text":"<p>\"ExcludeResources defines when this policy rule should not be applied. The exclude criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the name or role.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludewithall","title":"fn spec.rules.exclude.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludewithallmixin","title":"fn spec.rules.exclude.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludewithany","title":"fn spec.rules.exclude.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludewithanymixin","title":"fn spec.rules.exclude.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludewithclusterroles","title":"fn spec.rules.exclude.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludewithclusterrolesmixin","title":"fn spec.rules.exclude.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludewithroles","title":"fn spec.rules.exclude.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludewithrolesmixin","title":"fn spec.rules.exclude.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludewithsubjects","title":"fn spec.rules.exclude.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludewithsubjectsmixin","title":"fn spec.rules.exclude.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexcludeall","title":"obj spec.rules.exclude.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallwithclusterroles","title":"fn spec.rules.exclude.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallwithclusterrolesmixin","title":"fn spec.rules.exclude.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallwithroles","title":"fn spec.rules.exclude.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallwithrolesmixin","title":"fn spec.rules.exclude.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallwithsubjects","title":"fn spec.rules.exclude.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallwithsubjectsmixin","title":"fn spec.rules.exclude.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexcludeallresources","title":"obj spec.rules.exclude.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithannotations","title":"fn spec.rules.exclude.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithannotationsmixin","title":"fn spec.rules.exclude.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithkinds","title":"fn spec.rules.exclude.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithkindsmixin","title":"fn spec.rules.exclude.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithname","title":"fn spec.rules.exclude.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithnames","title":"fn spec.rules.exclude.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithnamesmixin","title":"fn spec.rules.exclude.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithnamespaces","title":"fn spec.rules.exclude.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithnamespacesmixin","title":"fn spec.rules.exclude.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithoperations","title":"fn spec.rules.exclude.all.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithoperationsmixin","title":"fn spec.rules.exclude.all.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexcludeallresourcesnamespaceselector","title":"obj spec.rules.exclude.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexcludeallresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexcludeallresourcesselector","title":"obj spec.rules.exclude.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexcludeallresourcesselectormatchexpressions","title":"obj spec.rules.exclude.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexcludeallsubjects","title":"obj spec.rules.exclude.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallsubjectswithapigroup","title":"fn spec.rules.exclude.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallsubjectswithkind","title":"fn spec.rules.exclude.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallsubjectswithname","title":"fn spec.rules.exclude.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeallsubjectswithnamespace","title":"fn spec.rules.exclude.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexcludeany","title":"obj spec.rules.exclude.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanywithclusterroles","title":"fn spec.rules.exclude.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanywithclusterrolesmixin","title":"fn spec.rules.exclude.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanywithroles","title":"fn spec.rules.exclude.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanywithrolesmixin","title":"fn spec.rules.exclude.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanywithsubjects","title":"fn spec.rules.exclude.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanywithsubjectsmixin","title":"fn spec.rules.exclude.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexcludeanyresources","title":"obj spec.rules.exclude.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithannotations","title":"fn spec.rules.exclude.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithannotationsmixin","title":"fn spec.rules.exclude.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithkinds","title":"fn spec.rules.exclude.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithkindsmixin","title":"fn spec.rules.exclude.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithname","title":"fn spec.rules.exclude.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithnames","title":"fn spec.rules.exclude.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithnamesmixin","title":"fn spec.rules.exclude.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithnamespaces","title":"fn spec.rules.exclude.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithnamespacesmixin","title":"fn spec.rules.exclude.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithoperations","title":"fn spec.rules.exclude.any.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithoperationsmixin","title":"fn spec.rules.exclude.any.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexcludeanyresourcesnamespaceselector","title":"obj spec.rules.exclude.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexcludeanyresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexcludeanyresourcesselector","title":"obj spec.rules.exclude.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexcludeanyresourcesselectormatchexpressions","title":"obj spec.rules.exclude.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexcludeanysubjects","title":"obj spec.rules.exclude.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanysubjectswithapigroup","title":"fn spec.rules.exclude.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanysubjectswithkind","title":"fn spec.rules.exclude.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanysubjectswithname","title":"fn spec.rules.exclude.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludeanysubjectswithnamespace","title":"fn spec.rules.exclude.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexcluderesources","title":"obj spec.rules.exclude.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified. Requires at least one tag to be specified when under MatchResources. Specifying ResourceDescription directly under match is being deprecated. Please specify under \\\"any\\\" or \\\"all\\\" instead.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourceswithannotations","title":"fn spec.rules.exclude.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourceswithannotationsmixin","title":"fn spec.rules.exclude.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourceswithkinds","title":"fn spec.rules.exclude.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourceswithkindsmixin","title":"fn spec.rules.exclude.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourceswithname","title":"fn spec.rules.exclude.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourceswithnames","title":"fn spec.rules.exclude.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourceswithnamesmixin","title":"fn spec.rules.exclude.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourceswithnamespaces","title":"fn spec.rules.exclude.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourceswithnamespacesmixin","title":"fn spec.rules.exclude.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourceswithoperations","title":"fn spec.rules.exclude.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourceswithoperationsmixin","title":"fn spec.rules.exclude.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexcluderesourcesnamespaceselector","title":"obj spec.rules.exclude.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexcluderesourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexcluderesourcesselector","title":"obj spec.rules.exclude.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexcluderesourcesselectormatchexpressions","title":"obj spec.rules.exclude.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesexcludesubjects","title":"obj spec.rules.exclude.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludesubjectswithapigroup","title":"fn spec.rules.exclude.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludesubjectswithkind","title":"fn spec.rules.exclude.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludesubjectswithname","title":"fn spec.rules.exclude.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesexcludesubjectswithnamespace","title":"fn spec.rules.exclude.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesgenerate","title":"obj spec.rules.generate","text":"<p>\"Generation is used to create new resources.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesgeneratewithapiversion","title":"fn spec.rules.generate.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesgeneratewithdata","title":"fn spec.rules.generate.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data provides the resource declaration used to populate each generated resource. At most one of Data or Clone must be specified. If neither are provided, the generated resource will be created with default data only.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesgeneratewithkind","title":"fn spec.rules.generate.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesgeneratewithname","title":"fn spec.rules.generate.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesgeneratewithnamespace","title":"fn spec.rules.generate.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesgeneratewithsynchronize","title":"fn spec.rules.generate.withSynchronize","text":"<pre><code>withSynchronize(synchronize)\n</code></pre> <p>\"Synchronize controls if generated resources should be kept in-sync with their source resource. If Synchronize is set to \\\"true\\\" changes to generated resources will be overwritten with resource data from Data or the resource specified in the Clone declaration. Optional. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesgeneratewithuid","title":"fn spec.rules.generate.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID specifies the resource uid.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesgenerateclone","title":"obj spec.rules.generate.clone","text":"<p>\"Clone specifies the source resource used to populate each generated resource. At most one of Data or Clone can be specified. If neither are provided, the generated resource will be created with default data only.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesgenerateclonewithname","title":"fn spec.rules.generate.clone.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies name of the resource.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesgenerateclonewithnamespace","title":"fn spec.rules.generate.clone.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies source resource namespace.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesgenerateclonelist","title":"obj spec.rules.generate.cloneList","text":"<p>\"CloneList specifies the list of source resource used to populate each generated resource.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesgenerateclonelistwithkinds","title":"fn spec.rules.generate.cloneList.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesgenerateclonelistwithkindsmixin","title":"fn spec.rules.generate.cloneList.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesgenerateclonelistwithnamespace","title":"fn spec.rules.generate.cloneList.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies source resource namespace.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesgenerateclonelistselector","title":"obj spec.rules.generate.cloneList.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code>. wildcard characters are not supported.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesgenerateclonelistselectorwithmatchexpressions","title":"fn spec.rules.generate.cloneList.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesgenerateclonelistselectorwithmatchexpressionsmixin","title":"fn spec.rules.generate.cloneList.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesgenerateclonelistselectorwithmatchlabels","title":"fn spec.rules.generate.cloneList.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesgenerateclonelistselectorwithmatchlabelsmixin","title":"fn spec.rules.generate.cloneList.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesgenerateclonelistselectormatchexpressions","title":"obj spec.rules.generate.cloneList.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesgenerateclonelistselectormatchexpressionswithkey","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesgenerateclonelistselectormatchexpressionswithoperator","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesgenerateclonelistselectormatchexpressionswithvalues","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesgenerateclonelistselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatch","title":"obj spec.rules.match","text":"<p>\"MatchResources defines when this policy rule should be applied. The match criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the user name or role. At least one kind is required.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchwithall","title":"fn spec.rules.match.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchwithallmixin","title":"fn spec.rules.match.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchwithany","title":"fn spec.rules.match.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchwithanymixin","title":"fn spec.rules.match.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchwithclusterroles","title":"fn spec.rules.match.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchwithclusterrolesmixin","title":"fn spec.rules.match.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchwithroles","title":"fn spec.rules.match.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchwithrolesmixin","title":"fn spec.rules.match.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchwithsubjects","title":"fn spec.rules.match.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchwithsubjectsmixin","title":"fn spec.rules.match.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatchall","title":"obj spec.rules.match.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallwithclusterroles","title":"fn spec.rules.match.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallwithclusterrolesmixin","title":"fn spec.rules.match.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallwithroles","title":"fn spec.rules.match.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallwithrolesmixin","title":"fn spec.rules.match.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallwithsubjects","title":"fn spec.rules.match.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallwithsubjectsmixin","title":"fn spec.rules.match.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatchallresources","title":"obj spec.rules.match.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourceswithannotations","title":"fn spec.rules.match.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourceswithannotationsmixin","title":"fn spec.rules.match.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourceswithkinds","title":"fn spec.rules.match.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourceswithkindsmixin","title":"fn spec.rules.match.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourceswithname","title":"fn spec.rules.match.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourceswithnames","title":"fn spec.rules.match.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourceswithnamesmixin","title":"fn spec.rules.match.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourceswithnamespaces","title":"fn spec.rules.match.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourceswithnamespacesmixin","title":"fn spec.rules.match.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourceswithoperations","title":"fn spec.rules.match.all.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourceswithoperationsmixin","title":"fn spec.rules.match.all.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatchallresourcesnamespaceselector","title":"obj spec.rules.match.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatchallresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatchallresourcesselector","title":"obj spec.rules.match.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectorwithmatchlabels","title":"fn spec.rules.match.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatchallresourcesselectormatchexpressions","title":"obj spec.rules.match.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatchallsubjects","title":"obj spec.rules.match.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallsubjectswithapigroup","title":"fn spec.rules.match.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallsubjectswithkind","title":"fn spec.rules.match.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallsubjectswithname","title":"fn spec.rules.match.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchallsubjectswithnamespace","title":"fn spec.rules.match.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatchany","title":"obj spec.rules.match.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanywithclusterroles","title":"fn spec.rules.match.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanywithclusterrolesmixin","title":"fn spec.rules.match.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanywithroles","title":"fn spec.rules.match.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanywithrolesmixin","title":"fn spec.rules.match.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanywithsubjects","title":"fn spec.rules.match.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanywithsubjectsmixin","title":"fn spec.rules.match.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatchanyresources","title":"obj spec.rules.match.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithannotations","title":"fn spec.rules.match.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithannotationsmixin","title":"fn spec.rules.match.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithkinds","title":"fn spec.rules.match.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithkindsmixin","title":"fn spec.rules.match.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithname","title":"fn spec.rules.match.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithnames","title":"fn spec.rules.match.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithnamesmixin","title":"fn spec.rules.match.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithnamespaces","title":"fn spec.rules.match.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithnamespacesmixin","title":"fn spec.rules.match.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithoperations","title":"fn spec.rules.match.any.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithoperationsmixin","title":"fn spec.rules.match.any.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatchanyresourcesnamespaceselector","title":"obj spec.rules.match.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatchanyresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatchanyresourcesselector","title":"obj spec.rules.match.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectorwithmatchlabels","title":"fn spec.rules.match.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatchanyresourcesselectormatchexpressions","title":"obj spec.rules.match.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatchanysubjects","title":"obj spec.rules.match.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanysubjectswithapigroup","title":"fn spec.rules.match.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanysubjectswithkind","title":"fn spec.rules.match.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanysubjectswithname","title":"fn spec.rules.match.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchanysubjectswithnamespace","title":"fn spec.rules.match.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatchresources","title":"obj spec.rules.match.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified. Requires at least one tag to be specified when under MatchResources. Specifying ResourceDescription directly under match is being deprecated. Please specify under \\\"any\\\" or \\\"all\\\" instead.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourceswithannotations","title":"fn spec.rules.match.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourceswithannotationsmixin","title":"fn spec.rules.match.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourceswithkinds","title":"fn spec.rules.match.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourceswithkindsmixin","title":"fn spec.rules.match.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourceswithname","title":"fn spec.rules.match.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourceswithnames","title":"fn spec.rules.match.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourceswithnamesmixin","title":"fn spec.rules.match.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourceswithnamespaces","title":"fn spec.rules.match.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourceswithnamespacesmixin","title":"fn spec.rules.match.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourceswithoperations","title":"fn spec.rules.match.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourceswithoperationsmixin","title":"fn spec.rules.match.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatchresourcesnamespaceselector","title":"obj spec.rules.match.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatchresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatchresourcesselector","title":"obj spec.rules.match.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourcesselectorwithmatchlabels","title":"fn spec.rules.match.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatchresourcesselectormatchexpressions","title":"obj spec.rules.match.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmatchsubjects","title":"obj spec.rules.match.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchsubjectswithapigroup","title":"fn spec.rules.match.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchsubjectswithkind","title":"fn spec.rules.match.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchsubjectswithname","title":"fn spec.rules.match.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmatchsubjectswithnamespace","title":"fn spec.rules.match.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutate","title":"obj spec.rules.mutate","text":"<p>\"Mutation is used to modify matching resources.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatewithforeach","title":"fn spec.rules.mutate.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatewithforeachmixin","title":"fn spec.rules.mutate.withForeachMixin","text":"<pre><code>withForeachMixin(foreach)\n</code></pre> <p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatewithpatchstrategicmerge","title":"fn spec.rules.mutate.withPatchStrategicMerge","text":"<pre><code>withPatchStrategicMerge(patchStrategicMerge)\n</code></pre> <p>\"PatchStrategicMerge is a strategic merge patch used to modify resources. See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatewithpatchesjson6902","title":"fn spec.rules.mutate.withPatchesJson6902","text":"<pre><code>withPatchesJson6902(patchesJson6902)\n</code></pre> <p>\"PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources. See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatewithtargets","title":"fn spec.rules.mutate.withTargets","text":"<pre><code>withTargets(targets)\n</code></pre> <p>\"Targets defines the target resources to be mutated.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatewithtargetsmixin","title":"fn spec.rules.mutate.withTargetsMixin","text":"<pre><code>withTargetsMixin(targets)\n</code></pre> <p>\"Targets defines the target resources to be mutated.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutateforeach","title":"obj spec.rules.mutate.foreach","text":"<p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachwithcontext","title":"fn spec.rules.mutate.foreach.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachwithcontextmixin","title":"fn spec.rules.mutate.foreach.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachwithforeach","title":"fn spec.rules.mutate.foreach.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"Foreach declares a nested foreach iterator\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachwithlist","title":"fn spec.rules.mutate.foreach.withList","text":"<pre><code>withList(list)\n</code></pre> <p>\"List specifies a JMESPath expression that results in one or more elements to which the validation logic is applied.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachwithorder","title":"fn spec.rules.mutate.foreach.withOrder","text":"<pre><code>withOrder(order)\n</code></pre> <p>\"Order defines the iteration order on the list. Can be Ascending to iterate from first to last element or Descending to iterate in from last to first element.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachwithpatchstrategicmerge","title":"fn spec.rules.mutate.foreach.withPatchStrategicMerge","text":"<pre><code>withPatchStrategicMerge(patchStrategicMerge)\n</code></pre> <p>\"PatchStrategicMerge is a strategic merge patch used to modify resources. See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachwithpatchesjson6902","title":"fn spec.rules.mutate.foreach.withPatchesJson6902","text":"<pre><code>withPatchesJson6902(patchesJson6902)\n</code></pre> <p>\"PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources. See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutateforeachcontext","title":"obj spec.rules.mutate.foreach.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextwithname","title":"fn spec.rules.mutate.foreach.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutateforeachcontextapicall","title":"obj spec.rules.mutate.foreach.context.apiCall","text":"<p>\"APICall is an HTTP request to the Kubernetes API server, or other JSON web service. The data returned is stored in the context with the name for the context entry.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextapicallwithdata","title":"fn spec.rules.mutate.foreach.context.apiCall.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextapicallwithdatamixin","title":"fn spec.rules.mutate.foreach.context.apiCall.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextapicallwithjmespath","title":"fn spec.rules.mutate.foreach.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response for the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextapicallwithmethod","title":"fn spec.rules.mutate.foreach.context.apiCall.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is the HTTP request type (GET or POST).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextapicallwithurlpath","title":"fn spec.rules.mutate.foreach.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutateforeachcontextapicalldata","title":"obj spec.rules.mutate.foreach.context.apiCall.data","text":"<p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextapicalldatawithkey","title":"fn spec.rules.mutate.foreach.context.apiCall.data.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is a unique identifier for the data value\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextapicalldatawithvalue","title":"fn spec.rules.mutate.foreach.context.apiCall.data.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the data value\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutateforeachcontextapicallservice","title":"obj spec.rules.mutate.foreach.context.apiCall.service","text":"<p>\"Service is an API call to a JSON web service\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextapicallservicewithcabundle","title":"fn spec.rules.mutate.foreach.context.apiCall.service.withCaBundle","text":"<pre><code>withCaBundle(caBundle)\n</code></pre> <p>\"CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextapicallservicewithurl","title":"fn spec.rules.mutate.foreach.context.apiCall.service.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the JSON web service URL. A typical form is <code>https://{service}.{namespace}:{port}/{path}</code>.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutateforeachcontextconfigmap","title":"obj spec.rules.mutate.foreach.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextconfigmapwithname","title":"fn spec.rules.mutate.foreach.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextconfigmapwithnamespace","title":"fn spec.rules.mutate.foreach.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutateforeachcontextimageregistry","title":"obj spec.rules.mutate.foreach.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextimageregistrywithjmespath","title":"fn spec.rules.mutate.foreach.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextimageregistrywithreference","title":"fn spec.rules.mutate.foreach.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutateforeachcontextimageregistryimageregistrycredentials","title":"obj spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextimageregistryimageregistrycredentialswithallowinsecureregistry","title":"fn spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextimageregistryimageregistrycredentialswithproviders","title":"fn spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextimageregistryimageregistrycredentialswithprovidersmixin","title":"fn spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextimageregistryimageregistrycredentialswithsecrets","title":"fn spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextimageregistryimageregistrycredentialswithsecretsmixin","title":"fn spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutateforeachcontextvariable","title":"obj spec.rules.mutate.foreach.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextvariablewithdefault","title":"fn spec.rules.mutate.foreach.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextvariablewithjmespath","title":"fn spec.rules.mutate.foreach.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachcontextvariablewithvalue","title":"fn spec.rules.mutate.foreach.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutateforeachpreconditions","title":"obj spec.rules.mutate.foreach.preconditions","text":"<p>\"AnyAllConditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionswithall","title":"fn spec.rules.mutate.foreach.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionswithallmixin","title":"fn spec.rules.mutate.foreach.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionswithany","title":"fn spec.rules.mutate.foreach.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionswithanymixin","title":"fn spec.rules.mutate.foreach.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutateforeachpreconditionsall","title":"obj spec.rules.mutate.foreach.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionsallwithkey","title":"fn spec.rules.mutate.foreach.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionsallwithmessage","title":"fn spec.rules.mutate.foreach.preconditions.all.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionsallwithoperator","title":"fn spec.rules.mutate.foreach.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionsallwithvalue","title":"fn spec.rules.mutate.foreach.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutateforeachpreconditionsany","title":"obj spec.rules.mutate.foreach.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionsanywithkey","title":"fn spec.rules.mutate.foreach.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionsanywithmessage","title":"fn spec.rules.mutate.foreach.preconditions.any.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionsanywithoperator","title":"fn spec.rules.mutate.foreach.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionsanywithvalue","title":"fn spec.rules.mutate.foreach.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutatetargets","title":"obj spec.rules.mutate.targets","text":"<p>\"Targets defines the target resources to be mutated.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetswithapiversion","title":"fn spec.rules.mutate.targets.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetswithcontext","title":"fn spec.rules.mutate.targets.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetswithcontextmixin","title":"fn spec.rules.mutate.targets.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetswithkind","title":"fn spec.rules.mutate.targets.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetswithname","title":"fn spec.rules.mutate.targets.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetswithnamespace","title":"fn spec.rules.mutate.targets.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetswithpreconditions","title":"fn spec.rules.mutate.targets.withPreconditions","text":"<pre><code>withPreconditions(preconditions)\n</code></pre> <p>\"Preconditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. A direct list of conditions (without <code>any</code> or <code>all</code> statements is supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetswithuid","title":"fn spec.rules.mutate.targets.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID specifies the resource uid.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutatetargetscontext","title":"obj spec.rules.mutate.targets.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextwithname","title":"fn spec.rules.mutate.targets.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutatetargetscontextapicall","title":"obj spec.rules.mutate.targets.context.apiCall","text":"<p>\"APICall is an HTTP request to the Kubernetes API server, or other JSON web service. The data returned is stored in the context with the name for the context entry.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextapicallwithdata","title":"fn spec.rules.mutate.targets.context.apiCall.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextapicallwithdatamixin","title":"fn spec.rules.mutate.targets.context.apiCall.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextapicallwithjmespath","title":"fn spec.rules.mutate.targets.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response for the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextapicallwithmethod","title":"fn spec.rules.mutate.targets.context.apiCall.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is the HTTP request type (GET or POST).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextapicallwithurlpath","title":"fn spec.rules.mutate.targets.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutatetargetscontextapicalldata","title":"obj spec.rules.mutate.targets.context.apiCall.data","text":"<p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextapicalldatawithkey","title":"fn spec.rules.mutate.targets.context.apiCall.data.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is a unique identifier for the data value\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextapicalldatawithvalue","title":"fn spec.rules.mutate.targets.context.apiCall.data.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the data value\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutatetargetscontextapicallservice","title":"obj spec.rules.mutate.targets.context.apiCall.service","text":"<p>\"Service is an API call to a JSON web service\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextapicallservicewithcabundle","title":"fn spec.rules.mutate.targets.context.apiCall.service.withCaBundle","text":"<pre><code>withCaBundle(caBundle)\n</code></pre> <p>\"CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextapicallservicewithurl","title":"fn spec.rules.mutate.targets.context.apiCall.service.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the JSON web service URL. A typical form is <code>https://{service}.{namespace}:{port}/{path}</code>.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutatetargetscontextconfigmap","title":"obj spec.rules.mutate.targets.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextconfigmapwithname","title":"fn spec.rules.mutate.targets.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextconfigmapwithnamespace","title":"fn spec.rules.mutate.targets.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutatetargetscontextimageregistry","title":"obj spec.rules.mutate.targets.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextimageregistrywithjmespath","title":"fn spec.rules.mutate.targets.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextimageregistrywithreference","title":"fn spec.rules.mutate.targets.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutatetargetscontextimageregistryimageregistrycredentials","title":"obj spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextimageregistryimageregistrycredentialswithallowinsecureregistry","title":"fn spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextimageregistryimageregistrycredentialswithproviders","title":"fn spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextimageregistryimageregistrycredentialswithprovidersmixin","title":"fn spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextimageregistryimageregistrycredentialswithsecrets","title":"fn spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextimageregistryimageregistrycredentialswithsecretsmixin","title":"fn spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesmutatetargetscontextvariable","title":"obj spec.rules.mutate.targets.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextvariablewithdefault","title":"fn spec.rules.mutate.targets.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextvariablewithjmespath","title":"fn spec.rules.mutate.targets.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesmutatetargetscontextvariablewithvalue","title":"fn spec.rules.mutate.targets.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidate","title":"obj spec.rules.validate","text":"<p>\"Validation is used to validate matching resources.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatewithanypattern","title":"fn spec.rules.validate.withAnyPattern","text":"<pre><code>withAnyPattern(anyPattern)\n</code></pre> <p>\"AnyPattern specifies list of validation patterns. At least one of the patterns must be satisfied for the validation rule to succeed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatewithforeach","title":"fn spec.rules.validate.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatewithforeachmixin","title":"fn spec.rules.validate.withForeachMixin","text":"<pre><code>withForeachMixin(foreach)\n</code></pre> <p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatewithmessage","title":"fn spec.rules.validate.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message specifies a custom message to be displayed on failure.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatewithpattern","title":"fn spec.rules.validate.withPattern","text":"<pre><code>withPattern(pattern)\n</code></pre> <p>\"Pattern specifies an overlay-style pattern used to check resources.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatecel","title":"obj spec.rules.validate.cel","text":"<p>\"CEL allows validation checks using the Common Expression Language (https://kubernetes.io/docs/reference/using-api/cel/).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelwithauditannotations","title":"fn spec.rules.validate.cel.withAuditAnnotations","text":"<pre><code>withAuditAnnotations(auditAnnotations)\n</code></pre> <p>\"AuditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelwithauditannotationsmixin","title":"fn spec.rules.validate.cel.withAuditAnnotationsMixin","text":"<pre><code>withAuditAnnotationsMixin(auditAnnotations)\n</code></pre> <p>\"AuditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelwithexpressions","title":"fn spec.rules.validate.cel.withExpressions","text":"<pre><code>withExpressions(expressions)\n</code></pre> <p>\"Expressions is a list of CELExpression types.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelwithexpressionsmixin","title":"fn spec.rules.validate.cel.withExpressionsMixin","text":"<pre><code>withExpressionsMixin(expressions)\n</code></pre> <p>\"Expressions is a list of CELExpression types.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelwithvariables","title":"fn spec.rules.validate.cel.withVariables","text":"<pre><code>withVariables(variables)\n</code></pre> <p>\"Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under <code>variables</code> in other expressions of the policy.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelwithvariablesmixin","title":"fn spec.rules.validate.cel.withVariablesMixin","text":"<pre><code>withVariablesMixin(variables)\n</code></pre> <p>\"Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under <code>variables</code> in other expressions of the policy.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatecelauditannotations","title":"obj spec.rules.validate.cel.auditAnnotations","text":"<p>\"AuditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelauditannotationswithkey","title":"fn spec.rules.validate.cel.auditAnnotations.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key specifies the audit annotation key. The audit annotation keys of a ValidatingAdmissionPolicy must be unique. The key must be a qualified name ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length. \\n The key is combined with the resource name of the ValidatingAdmissionPolicy to construct an audit annotation key: \\\"{ValidatingAdmissionPolicy name}/{key}\\\". \\n If an admission webhook uses the same resource name as this ValidatingAdmissionPolicy and the same audit annotation key, the annotation key will be identical. In this case, the first annotation written with the key will be included in the audit event and all subsequent annotations with the same key will be discarded. \\n Required.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelauditannotationswithvalueexpression","title":"fn spec.rules.validate.cel.auditAnnotations.withValueExpression","text":"<pre><code>withValueExpression(valueExpression)\n</code></pre> <p>\"valueExpression represents the expression which is evaluated by CEL to produce an audit annotation value. The expression must evaluate to either a string or null value. If the expression evaluates to a string, the audit annotation is included with the string value. If the expression evaluates to null or empty string the audit annotation will be omitted. The valueExpression may be no longer than 5kb in length. If the result of the valueExpression is more than 10kb in length, it will be truncated to 10kb. \\n If multiple ValidatingAdmissionPolicyBinding resources match an API request, then the valueExpression will be evaluated for each binding. All unique values produced by the valueExpressions will be joined together in a comma-separated list. \\n Required.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatecelexpressions","title":"obj spec.rules.validate.cel.expressions","text":"<p>\"Expressions is a list of CELExpression types.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelexpressionswithexpression","title":"fn spec.rules.validate.cel.expressions.withExpression","text":"<pre><code>withExpression(expression)\n</code></pre> <p>\"Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables: \\n - 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request(ref). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value. For example, a variable named 'foo' can be accessed as 'variables.foo'. - 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request. See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the request resource. \\n The <code>apiVersion</code>, <code>kind</code>, <code>metadata.name</code> and <code>metadata.generateName</code> are always accessible from the root of the object. No other metadata properties are accessible. \\n Only property names of the form <code>[a-zA-Z_.-/][a-zA-Z0-9_.-/]*</code> are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '' escapes to '__underscores' - '.' escapes to 'dot' - '-' escapes to 'dash' - '/' escapes to 'slash' - Property names that exactly match a CEL RESERVED keyword escape to '{keyword}'. The keywords are: \\\"true\\\", \\\"false\\\", \\\"null\\\", \\\"in\\\", \\\"as\\\", \\\"break\\\", \\\"const\\\", \\\"continue\\\", \\\"else\\\", \\\"for\\\", \\\"function\\\", \\\"if\\\", \\\"import\\\", \\\"let\\\", \\\"loop\\\", \\\"package\\\", \\\"namespace\\\", \\\"return\\\". Examples: - Expression accessing a property named \\\"namespace\\\": {\\\"Expression\\\": \\\"object.namespace &gt; 0\\\"} - Expression accessing a property named \\\"x-prop\\\": {\\\"Expression\\\": \\\"object.x__dash__prop &gt; 0\\\"} - Expression accessing a property named \\\"redact__d\\\": {\\\"Expression\\\": \\\"object.redact__underscores__d &gt; 0\\\"} \\n Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type: - 'set': <code>X + Y</code> performs a union where the array positions of all elements in <code>X</code> are preserved and non-intersecting elements in <code>Y</code> are appended, retaining their partial order. - 'map': <code>X + Y</code> performs a merge where the array positions of all keys in <code>X</code> are preserved but the values are overwritten by values in <code>Y</code> when the key sets of <code>X</code> and <code>Y</code> intersect. Elements in <code>Y</code> with non-intersecting keys are appended, retaining their partial order. Required.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelexpressionswithmessage","title":"fn spec.rules.validate.cel.expressions.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is \\\"failed rule: {Rule}\\\". e.g. \\\"must be a URL with the host matching spec.host\\\" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is \\\"failed Expression: {Expression}\\\".\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelexpressionswithmessageexpression","title":"fn spec.rules.validate.cel.expressions.withMessageExpression","text":"<pre><code>withMessageExpression(messageExpression)\n</code></pre> <p>\"messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a validation, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the <code>expression</code> except for 'authorizer' and 'authorizer.requestResource'. Example: \\\"object.x must be less than max (\\\"+string(params.max)+\\\")\\</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelexpressionswithreason","title":"fn spec.rules.validate.cel.expressions.withReason","text":"<pre><code>withReason(reason)\n</code></pre> <p>\"Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: \\\"Unauthorized\\\", \\\"Forbidden\\\", \\\"Invalid\\\", \\\"RequestEntityTooLarge\\\". If not set, StatusReasonInvalid is used in the response to the client.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatecelparamkind","title":"obj spec.rules.validate.cel.paramKind","text":"<p>\"ParamKind is a tuple of Group Kind and Version.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelparamkindwithapiversion","title":"fn spec.rules.validate.cel.paramKind.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the API group version the resources belong to. In format of \\\"group/version\\\". Required.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelparamkindwithkind","title":"fn spec.rules.validate.cel.paramKind.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the API kind the resources belong to. Required.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatecelparamref","title":"obj spec.rules.validate.cel.paramRef","text":"<p>\"ParamRef references a parameter resource.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelparamrefwithname","title":"fn spec.rules.validate.cel.paramRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"<code>name</code> is the name of the resource being referenced. \\n <code>name</code> and <code>selector</code> are mutually exclusive properties. If one is set, the other must be unset.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelparamrefwithnamespace","title":"fn spec.rules.validate.cel.paramRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"namespace is the namespace of the referenced resource. Allows limiting the search for params to a specific namespace. Applies to both <code>name</code> and <code>selector</code> fields. \\n A per-namespace parameter may be used by specifying a namespace-scoped <code>paramKind</code> in the policy and leaving this field empty. \\n - If <code>paramKind</code> is cluster-scoped, this field MUST be unset. Setting this field results in a configuration error. \\n - If <code>paramKind</code> is namespace-scoped, the namespace of the object being evaluated for admission will be used when this field is left unset. Take care that if this is left empty the binding must not match any cluster-scoped resources, which will result in an error.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelparamrefwithparameternotfoundaction","title":"fn spec.rules.validate.cel.paramRef.withParameterNotFoundAction","text":"<pre><code>withParameterNotFoundAction(parameterNotFoundAction)\n</code></pre> <p>\"<code>parameterNotFoundAction</code> controls the behavior of the binding when the resource exists, and name or selector is valid, but there are no parameters matched by the binding. If the value is set to <code>Allow</code>, then no matched parameters will be treated as successful validation by the binding. If set to <code>Deny</code>, then no matched parameters will be subject to the <code>failurePolicy</code> of the policy. \\n Allowed values are <code>Allow</code> or <code>Deny</code> Default to <code>Deny</code>\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatecelparamrefselector","title":"obj spec.rules.validate.cel.paramRef.selector","text":"<p>\"selector can be used to match multiple param objects based on their labels. Supply selector: {} to match all resources of the ParamKind. \\n If multiple params are found, they are all evaluated with the policy expressions and the results are ANDed together. \\n One of <code>name</code> or <code>selector</code> must be set, but <code>name</code> and <code>selector</code> are mutually exclusive properties. If one is set, the other must be unset.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelparamrefselectorwithmatchexpressions","title":"fn spec.rules.validate.cel.paramRef.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelparamrefselectorwithmatchexpressionsmixin","title":"fn spec.rules.validate.cel.paramRef.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelparamrefselectorwithmatchlabels","title":"fn spec.rules.validate.cel.paramRef.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelparamrefselectorwithmatchlabelsmixin","title":"fn spec.rules.validate.cel.paramRef.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatecelparamrefselectormatchexpressions","title":"obj spec.rules.validate.cel.paramRef.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelparamrefselectormatchexpressionswithkey","title":"fn spec.rules.validate.cel.paramRef.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelparamrefselectormatchexpressionswithoperator","title":"fn spec.rules.validate.cel.paramRef.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelparamrefselectormatchexpressionswithvalues","title":"fn spec.rules.validate.cel.paramRef.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelparamrefselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.validate.cel.paramRef.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatecelvariables","title":"obj spec.rules.validate.cel.variables","text":"<p>\"Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under <code>variables</code> in other expressions of the policy.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelvariableswithexpression","title":"fn spec.rules.validate.cel.variables.withExpression","text":"<pre><code>withExpression(expression)\n</code></pre> <p>\"Expression is the expression that will be evaluated as the value of the variable. The CEL expression has access to the same identifiers as the CEL expressions in Validation.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatecelvariableswithname","title":"fn spec.rules.validate.cel.variables.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables. The variable can be accessed in other expressions through <code>variables</code> For example, if name is \\\"foo\\\", the variable will be available as <code>variables.foo</code>\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatedeny","title":"obj spec.rules.validate.deny","text":"<p>\"Deny defines conditions used to pass or fail a validation rule.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatedenywithconditions","title":"fn spec.rules.validate.deny.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Multiple conditions can be declared under an <code>any</code> or <code>all</code> statement. A direct list of conditions (without <code>any</code> or <code>all</code> statements) is also supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/validate/#deny-rules\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidateforeach","title":"obj spec.rules.validate.foreach","text":"<p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachwithanypattern","title":"fn spec.rules.validate.foreach.withAnyPattern","text":"<pre><code>withAnyPattern(anyPattern)\n</code></pre> <p>\"AnyPattern specifies list of validation patterns. At least one of the patterns must be satisfied for the validation rule to succeed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachwithcontext","title":"fn spec.rules.validate.foreach.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachwithcontextmixin","title":"fn spec.rules.validate.foreach.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachwithelementscope","title":"fn spec.rules.validate.foreach.withElementScope","text":"<pre><code>withElementScope(elementScope)\n</code></pre> <p>\"ElementScope specifies whether to use the current list element as the scope for validation. Defaults to \\\"true\\\" if not specified. When set to \\\"false\\\", \\\"request.object\\\" is used as the validation scope within the foreach block to allow referencing other elements in the subtree.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachwithforeach","title":"fn spec.rules.validate.foreach.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"Foreach declares a nested foreach iterator\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachwithlist","title":"fn spec.rules.validate.foreach.withList","text":"<pre><code>withList(list)\n</code></pre> <p>\"List specifies a JMESPath expression that results in one or more elements to which the validation logic is applied.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachwithpattern","title":"fn spec.rules.validate.foreach.withPattern","text":"<pre><code>withPattern(pattern)\n</code></pre> <p>\"Pattern specifies an overlay-style pattern used to check resources.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidateforeachcontext","title":"obj spec.rules.validate.foreach.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextwithname","title":"fn spec.rules.validate.foreach.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidateforeachcontextapicall","title":"obj spec.rules.validate.foreach.context.apiCall","text":"<p>\"APICall is an HTTP request to the Kubernetes API server, or other JSON web service. The data returned is stored in the context with the name for the context entry.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextapicallwithdata","title":"fn spec.rules.validate.foreach.context.apiCall.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextapicallwithdatamixin","title":"fn spec.rules.validate.foreach.context.apiCall.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextapicallwithjmespath","title":"fn spec.rules.validate.foreach.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response for the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextapicallwithmethod","title":"fn spec.rules.validate.foreach.context.apiCall.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is the HTTP request type (GET or POST).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextapicallwithurlpath","title":"fn spec.rules.validate.foreach.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidateforeachcontextapicalldata","title":"obj spec.rules.validate.foreach.context.apiCall.data","text":"<p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextapicalldatawithkey","title":"fn spec.rules.validate.foreach.context.apiCall.data.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is a unique identifier for the data value\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextapicalldatawithvalue","title":"fn spec.rules.validate.foreach.context.apiCall.data.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the data value\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidateforeachcontextapicallservice","title":"obj spec.rules.validate.foreach.context.apiCall.service","text":"<p>\"Service is an API call to a JSON web service\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextapicallservicewithcabundle","title":"fn spec.rules.validate.foreach.context.apiCall.service.withCaBundle","text":"<pre><code>withCaBundle(caBundle)\n</code></pre> <p>\"CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextapicallservicewithurl","title":"fn spec.rules.validate.foreach.context.apiCall.service.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the JSON web service URL. A typical form is <code>https://{service}.{namespace}:{port}/{path}</code>.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidateforeachcontextconfigmap","title":"obj spec.rules.validate.foreach.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextconfigmapwithname","title":"fn spec.rules.validate.foreach.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextconfigmapwithnamespace","title":"fn spec.rules.validate.foreach.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidateforeachcontextimageregistry","title":"obj spec.rules.validate.foreach.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextimageregistrywithjmespath","title":"fn spec.rules.validate.foreach.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextimageregistrywithreference","title":"fn spec.rules.validate.foreach.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidateforeachcontextimageregistryimageregistrycredentials","title":"obj spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextimageregistryimageregistrycredentialswithallowinsecureregistry","title":"fn spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextimageregistryimageregistrycredentialswithproviders","title":"fn spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextimageregistryimageregistrycredentialswithprovidersmixin","title":"fn spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextimageregistryimageregistrycredentialswithsecrets","title":"fn spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextimageregistryimageregistrycredentialswithsecretsmixin","title":"fn spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidateforeachcontextvariable","title":"obj spec.rules.validate.foreach.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextvariablewithdefault","title":"fn spec.rules.validate.foreach.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextvariablewithjmespath","title":"fn spec.rules.validate.foreach.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextvariablewithvalue","title":"fn spec.rules.validate.foreach.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidateforeachdeny","title":"obj spec.rules.validate.foreach.deny","text":"<p>\"Deny defines conditions used to pass or fail a validation rule.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachdenywithconditions","title":"fn spec.rules.validate.foreach.deny.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Multiple conditions can be declared under an <code>any</code> or <code>all</code> statement. A direct list of conditions (without <code>any</code> or <code>all</code> statements) is also supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/validate/#deny-rules\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidateforeachpreconditions","title":"obj spec.rules.validate.foreach.preconditions","text":"<p>\"AnyAllConditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionswithall","title":"fn spec.rules.validate.foreach.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionswithallmixin","title":"fn spec.rules.validate.foreach.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionswithany","title":"fn spec.rules.validate.foreach.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionswithanymixin","title":"fn spec.rules.validate.foreach.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidateforeachpreconditionsall","title":"obj spec.rules.validate.foreach.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionsallwithkey","title":"fn spec.rules.validate.foreach.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionsallwithmessage","title":"fn spec.rules.validate.foreach.preconditions.all.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionsallwithoperator","title":"fn spec.rules.validate.foreach.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionsallwithvalue","title":"fn spec.rules.validate.foreach.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidateforeachpreconditionsany","title":"obj spec.rules.validate.foreach.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionsanywithkey","title":"fn spec.rules.validate.foreach.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionsanywithmessage","title":"fn spec.rules.validate.foreach.preconditions.any.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionsanywithoperator","title":"fn spec.rules.validate.foreach.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionsanywithvalue","title":"fn spec.rules.validate.foreach.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatemanifests","title":"obj spec.rules.validate.manifests","text":"<p>\"Manifest specifies conditions for manifest verification\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestswithannotationdomain","title":"fn spec.rules.validate.manifests.withAnnotationDomain","text":"<pre><code>withAnnotationDomain(annotationDomain)\n</code></pre> <p>\"AnnotationDomain is custom domain of annotation for message and signature. Default is \\\"cosign.sigstore.dev\\\".\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestswithattestors","title":"fn spec.rules.validate.manifests.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestswithattestorsmixin","title":"fn spec.rules.validate.manifests.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestswithignorefields","title":"fn spec.rules.validate.manifests.withIgnoreFields","text":"<pre><code>withIgnoreFields(ignoreFields)\n</code></pre> <p>\"Fields which will be ignored while comparing manifests.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestswithignorefieldsmixin","title":"fn spec.rules.validate.manifests.withIgnoreFieldsMixin","text":"<pre><code>withIgnoreFieldsMixin(ignoreFields)\n</code></pre> <p>\"Fields which will be ignored while comparing manifests.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestswithrepository","title":"fn spec.rules.validate.manifests.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for resource bundle reference. The repository can be overridden per Attestor or Attestation.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestors","title":"obj spec.rules.validate.manifests.attestors","text":"<p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorswithcount","title":"fn spec.rules.validate.manifests.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorswithentries","title":"fn spec.rules.validate.manifests.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorswithentriesmixin","title":"fn spec.rules.validate.manifests.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestorsentries","title":"obj spec.rules.validate.manifests.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieswithannotations","title":"fn spec.rules.validate.manifests.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieswithannotationsmixin","title":"fn spec.rules.validate.manifests.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieswithattestor","title":"fn spec.rules.validate.manifests.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested set of Attestor used to specify a more complex set of match authorities.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieswithrepository","title":"fn spec.rules.validate.manifests.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestorsentriescertificates","title":"obj spec.rules.validate.manifests.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentriescertificateswithcert","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Cert is an optional PEM-encoded public certificate.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentriescertificateswithcertchain","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertChain is an optional PEM encoded set of certificates used to verify.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestorsentriescertificatesctlog","title":"obj spec.rules.validate.manifests.attestors.entries.certificates.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesctlogwithignoresct","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesctlogwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestorsentriescertificatesrekor","title":"obj spec.rules.validate.manifests.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesrekorwithignoretlog","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesrekorwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeyless","title":"obj spec.rules.validate.manifests.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithissuer","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithroots","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithsubject","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeylessctlog","title":"obj spec.rules.validate.manifests.attestors.entries.keyless.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessctlogwithignoresct","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessctlogwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeylessrekor","title":"obj spec.rules.validate.manifests.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessrekorwithignoretlog","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessrekorwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeys","title":"obj spec.rules.validate.manifests.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithkms","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithpublickeys","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeysctlog","title":"obj spec.rules.validate.manifests.attestors.entries.keys.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeysctlogwithignoresct","title":"fn spec.rules.validate.manifests.attestors.entries.keys.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeysctlogwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.keys.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeysrekor","title":"obj spec.rules.validate.manifests.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeysrekorwithignoretlog","title":"fn spec.rules.validate.manifests.attestors.entries.keys.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeysrekorwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.keys.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeysrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeyssecret","title":"obj spec.rules.validate.manifests.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeyssecretwithname","title":"fn spec.rules.validate.manifests.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.validate.manifests.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatemanifestsdryrun","title":"obj spec.rules.validate.manifests.dryRun","text":"<p>\"DryRun configuration\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsdryrunwithenable","title":"fn spec.rules.validate.manifests.dryRun.withEnable","text":"<pre><code>withEnable(enable)\n</code></pre>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsdryrunwithnamespace","title":"fn spec.rules.validate.manifests.dryRun.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatemanifestsignorefields","title":"obj spec.rules.validate.manifests.ignoreFields","text":"<p>\"Fields which will be ignored while comparing manifests.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsignorefieldswithfields","title":"fn spec.rules.validate.manifests.ignoreFields.withFields","text":"<pre><code>withFields(fields)\n</code></pre>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsignorefieldswithfieldsmixin","title":"fn spec.rules.validate.manifests.ignoreFields.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsignorefieldswithobjects","title":"fn spec.rules.validate.manifests.ignoreFields.withObjects","text":"<pre><code>withObjects(objects)\n</code></pre>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsignorefieldswithobjectsmixin","title":"fn spec.rules.validate.manifests.ignoreFields.withObjectsMixin","text":"<pre><code>withObjectsMixin(objects)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatemanifestsignorefieldsobjects","title":"obj spec.rules.validate.manifests.ignoreFields.objects","text":""},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithgroup","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withGroup","text":"<pre><code>withGroup(group)\n</code></pre>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithkind","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithname","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithnamespace","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithversion","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withVersion","text":"<pre><code>withVersion(version)\n</code></pre>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatepodsecurity","title":"obj spec.rules.validate.podSecurity","text":"<p>\"PodSecurity applies exemptions for Kubernetes Pod Security admission by specifying exclusions for Pod Security Standards controls.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatepodsecuritywithexclude","title":"fn spec.rules.validate.podSecurity.withExclude","text":"<pre><code>withExclude(exclude)\n</code></pre> <p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatepodsecuritywithexcludemixin","title":"fn spec.rules.validate.podSecurity.withExcludeMixin","text":"<pre><code>withExcludeMixin(exclude)\n</code></pre> <p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatepodsecuritywithlevel","title":"fn spec.rules.validate.podSecurity.withLevel","text":"<pre><code>withLevel(level)\n</code></pre> <p>\"Level defines the Pod Security Standard level to be applied to workloads. Allowed values are privileged, baseline, and restricted.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatepodsecuritywithversion","title":"fn spec.rules.validate.podSecurity.withVersion","text":"<pre><code>withVersion(version)\n</code></pre> <p>\"Version defines the Pod Security Standard versions that Kubernetes supports. Allowed values are v1.19, v1.20, v1.21, v1.22, v1.23, v1.24, v1.25, v1.26, latest. Defaults to latest.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesvalidatepodsecurityexclude","title":"obj spec.rules.validate.podSecurity.exclude","text":"<p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatepodsecurityexcludewithcontrolname","title":"fn spec.rules.validate.podSecurity.exclude.withControlName","text":"<pre><code>withControlName(controlName)\n</code></pre> <p>\"ControlName specifies the name of the Pod Security Standard control. See: https://kubernetes.io/docs/concepts/security/pod-security-standards/\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatepodsecurityexcludewithimages","title":"fn spec.rules.validate.podSecurity.exclude.withImages","text":"<pre><code>withImages(images)\n</code></pre> <p>\"Images selects matching containers and applies the container level PSS. Each image is the image name consisting of the registry address, repository, image, and tag. Empty list matches no containers, PSS checks are applied at the pod level only. Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesvalidatepodsecurityexcludewithimagesmixin","title":"fn spec.rules.validate.podSecurity.exclude.withImagesMixin","text":"<pre><code>withImagesMixin(images)\n</code></pre> <p>\"Images selects matching containers and applies the container level PSS. Each image is the image name consisting of the registry address, repository, image, and tag. Empty list matches no containers, PSS checks are applied at the pod level only. Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimages","title":"obj spec.rules.verifyImages","text":"<p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithadditionalextensions","title":"fn spec.rules.verifyImages.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"Deprecated.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithadditionalextensionsmixin","title":"fn spec.rules.verifyImages.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"Deprecated.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithannotations","title":"fn spec.rules.verifyImages.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Deprecated. Use annotations per Attestor instead.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithannotationsmixin","title":"fn spec.rules.verifyImages.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Deprecated. Use annotations per Attestor instead.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithattestations","title":"fn spec.rules.verifyImages.withAttestations","text":"<pre><code>withAttestations(attestations)\n</code></pre> <p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithattestationsmixin","title":"fn spec.rules.verifyImages.withAttestationsMixin","text":"<pre><code>withAttestationsMixin(attestations)\n</code></pre> <p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithattestors","title":"fn spec.rules.verifyImages.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithattestorsmixin","title":"fn spec.rules.verifyImages.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithimage","title":"fn spec.rules.verifyImages.withImage","text":"<pre><code>withImage(image)\n</code></pre> <p>\"Deprecated. Use ImageReferences instead.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithimagereferences","title":"fn spec.rules.verifyImages.withImageReferences","text":"<pre><code>withImageReferences(imageReferences)\n</code></pre> <p>\"ImageReferences is a list of matching image reference patterns. At least one pattern in the list must match the image for the rule to apply. Each image reference consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest). Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithimagereferencesmixin","title":"fn spec.rules.verifyImages.withImageReferencesMixin","text":"<pre><code>withImageReferencesMixin(imageReferences)\n</code></pre> <p>\"ImageReferences is a list of matching image reference patterns. At least one pattern in the list must match the image for the rule to apply. Each image reference consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest). Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithissuer","title":"fn spec.rules.verifyImages.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Deprecated. Use KeylessAttestor instead.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithkey","title":"fn spec.rules.verifyImages.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Deprecated. Use StaticKeyAttestor instead.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithmutatedigest","title":"fn spec.rules.verifyImages.withMutateDigest","text":"<pre><code>withMutateDigest(mutateDigest)\n</code></pre> <p>\"MutateDigest enables replacement of image tags with digests. Defaults to true.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithrepository","title":"fn spec.rules.verifyImages.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule. If specified Repository will override the default OCI image repository configured for the installation. The repository can also be overridden per Attestor or Attestation.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithrequired","title":"fn spec.rules.verifyImages.withRequired","text":"<pre><code>withRequired(required)\n</code></pre> <p>\"Required validates that images are verified i.e. have matched passed a signature or attestation check.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithroots","title":"fn spec.rules.verifyImages.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Deprecated. Use KeylessAttestor instead.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithsubject","title":"fn spec.rules.verifyImages.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Deprecated. Use KeylessAttestor instead.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithtype","title":"fn spec.rules.verifyImages.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies the method of signature validation. The allowed options are Cosign and Notary. By default Cosign is used if a type is not specified.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithusecache","title":"fn spec.rules.verifyImages.withUseCache","text":"<pre><code>withUseCache(useCache)\n</code></pre> <p>\"UseCache enables caching of image verify responses for this rule.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimageswithverifydigest","title":"fn spec.rules.verifyImages.withVerifyDigest","text":"<pre><code>withVerifyDigest(verifyDigest)\n</code></pre> <p>\"VerifyDigest validates that images have a digest.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestations","title":"obj spec.rules.verifyImages.attestations","text":"<p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationswithattestors","title":"fn spec.rules.verifyImages.attestations.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specify the required attestors (i.e. authorities).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationswithattestorsmixin","title":"fn spec.rules.verifyImages.attestations.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specify the required attestors (i.e. authorities).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationswithconditions","title":"fn spec.rules.verifyImages.attestations.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationswithconditionsmixin","title":"fn spec.rules.verifyImages.attestations.withConditionsMixin","text":"<pre><code>withConditionsMixin(conditions)\n</code></pre> <p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationswithpredicatetype","title":"fn spec.rules.verifyImages.attestations.withPredicateType","text":"<pre><code>withPredicateType(predicateType)\n</code></pre> <p>\"Deprecated in favour of 'Type', to be removed soon\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationswithtype","title":"fn spec.rules.verifyImages.attestations.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of attestation contained within the Statement.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestors","title":"obj spec.rules.verifyImages.attestations.attestors","text":"<p>\"Attestors specify the required attestors (i.e. authorities).\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorswithcount","title":"fn spec.rules.verifyImages.attestations.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorswithentries","title":"fn spec.rules.verifyImages.attestations.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorswithentriesmixin","title":"fn spec.rules.verifyImages.attestations.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestorsentries","title":"obj spec.rules.verifyImages.attestations.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieswithannotations","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieswithannotationsmixin","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieswithattestor","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested set of Attestor used to specify a more complex set of match authorities.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieswithrepository","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestorsentriescertificates","title":"obj spec.rules.verifyImages.attestations.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentriescertificateswithcert","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Cert is an optional PEM-encoded public certificate.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentriescertificateswithcertchain","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertChain is an optional PEM encoded set of certificates used to verify.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestorsentriescertificatesctlog","title":"obj spec.rules.verifyImages.attestations.attestors.entries.certificates.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesctlogwithignoresct","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesctlogwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestorsentriescertificatesrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesrekorwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeyless","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithissuer","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithroots","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithsubject","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeylessctlog","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keyless.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessctlogwithignoresct","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessctlogwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeylessrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessrekorwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeys","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithkms","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithpublickeys","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeysctlog","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysctlogwithignoresct","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysctlogwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeysrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysrekorwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeyssecret","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyssecretwithname","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsconditions","title":"obj spec.rules.verifyImages.attestations.conditions","text":"<p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionswithall","title":"fn spec.rules.verifyImages.attestations.conditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionswithallmixin","title":"fn spec.rules.verifyImages.attestations.conditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionswithany","title":"fn spec.rules.verifyImages.attestations.conditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionswithanymixin","title":"fn spec.rules.verifyImages.attestations.conditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsconditionsall","title":"obj spec.rules.verifyImages.attestations.conditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionsallwithkey","title":"fn spec.rules.verifyImages.attestations.conditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionsallwithmessage","title":"fn spec.rules.verifyImages.attestations.conditions.all.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionsallwithoperator","title":"fn spec.rules.verifyImages.attestations.conditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionsallwithvalue","title":"fn spec.rules.verifyImages.attestations.conditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsconditionsany","title":"obj spec.rules.verifyImages.attestations.conditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionsanywithkey","title":"fn spec.rules.verifyImages.attestations.conditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionsanywithmessage","title":"fn spec.rules.verifyImages.attestations.conditions.any.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionsanywithoperator","title":"fn spec.rules.verifyImages.attestations.conditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionsanywithvalue","title":"fn spec.rules.verifyImages.attestations.conditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestors","title":"obj spec.rules.verifyImages.attestors","text":"<p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorswithcount","title":"fn spec.rules.verifyImages.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorswithentries","title":"fn spec.rules.verifyImages.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorswithentriesmixin","title":"fn spec.rules.verifyImages.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestorsentries","title":"obj spec.rules.verifyImages.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieswithannotations","title":"fn spec.rules.verifyImages.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieswithannotationsmixin","title":"fn spec.rules.verifyImages.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieswithattestor","title":"fn spec.rules.verifyImages.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested set of Attestor used to specify a more complex set of match authorities.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieswithrepository","title":"fn spec.rules.verifyImages.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestorsentriescertificates","title":"obj spec.rules.verifyImages.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentriescertificateswithcert","title":"fn spec.rules.verifyImages.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Cert is an optional PEM-encoded public certificate.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentriescertificateswithcertchain","title":"fn spec.rules.verifyImages.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertChain is an optional PEM encoded set of certificates used to verify.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestorsentriescertificatesctlog","title":"obj spec.rules.verifyImages.attestors.entries.certificates.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentriescertificatesctlogwithignoresct","title":"fn spec.rules.verifyImages.attestors.entries.certificates.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentriescertificatesctlogwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.certificates.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestorsentriescertificatesrekor","title":"obj spec.rules.verifyImages.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentriescertificatesrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestors.entries.certificates.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentriescertificatesrekorwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.certificates.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestorsentrieskeyless","title":"obj spec.rules.verifyImages.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeylesswithissuer","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeylesswithroots","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeylesswithsubject","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestorsentrieskeylessctlog","title":"obj spec.rules.verifyImages.attestors.entries.keyless.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeylessctlogwithignoresct","title":"fn spec.rules.verifyImages.attestors.entries.keyless.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeylessctlogwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.keyless.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestorsentrieskeylessrekor","title":"obj spec.rules.verifyImages.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeylessrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestors.entries.keyless.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeylessrekorwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.keyless.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestorsentrieskeys","title":"obj spec.rules.verifyImages.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeyswithkms","title":"fn spec.rules.verifyImages.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeyswithpublickeys","title":"fn spec.rules.verifyImages.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.verifyImages.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestorsentrieskeysctlog","title":"obj spec.rules.verifyImages.attestors.entries.keys.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeysctlogwithignoresct","title":"fn spec.rules.verifyImages.attestors.entries.keys.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeysctlogwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.keys.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestorsentrieskeysrekor","title":"obj spec.rules.verifyImages.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeysrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestors.entries.keys.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeysrekorwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.keys.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeysrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesattestorsentrieskeyssecret","title":"obj spec.rules.verifyImages.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeyssecretwithname","title":"fn spec.rules.verifyImages.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.verifyImages.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specrulesverifyimagesimageregistrycredentials","title":"obj spec.rules.verifyImages.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesimageregistrycredentialswithallowinsecureregistry","title":"fn spec.rules.verifyImages.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesimageregistrycredentialswithproviders","title":"fn spec.rules.verifyImages.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesimageregistrycredentialswithprovidersmixin","title":"fn spec.rules.verifyImages.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesimageregistrycredentialswithsecrets","title":"fn spec.rules.verifyImages.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specrulesverifyimagesimageregistrycredentialswithsecretsmixin","title":"fn spec.rules.verifyImages.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specvalidationfailureactionoverrides","title":"obj spec.validationFailureActionOverrides","text":"<p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specvalidationfailureactionoverrideswithaction","title":"fn spec.validationFailureActionOverrides.withAction","text":"<pre><code>withAction(action)\n</code></pre> <p>\"ValidationFailureAction defines the policy validation failure action\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specvalidationfailureactionoverrideswithnamespaces","title":"fn spec.validationFailureActionOverrides.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"1.11/kyverno/v1/policy/#fn-specvalidationfailureactionoverrideswithnamespacesmixin","title":"fn spec.validationFailureActionOverrides.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specvalidationfailureactionoverridesnamespaceselector","title":"obj spec.validationFailureActionOverrides.namespaceSelector","text":"<p>\"A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specvalidationfailureactionoverridesnamespaceselectorwithmatchexpressions","title":"fn spec.validationFailureActionOverrides.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specvalidationfailureactionoverridesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.validationFailureActionOverrides.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specvalidationfailureactionoverridesnamespaceselectorwithmatchlabels","title":"fn spec.validationFailureActionOverrides.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specvalidationfailureactionoverridesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.validationFailureActionOverrides.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1/policy/#obj-specvalidationfailureactionoverridesnamespaceselectormatchexpressions","title":"obj spec.validationFailureActionOverrides.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specvalidationfailureactionoverridesnamespaceselectormatchexpressionswithkey","title":"fn spec.validationFailureActionOverrides.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specvalidationfailureactionoverridesnamespaceselectormatchexpressionswithoperator","title":"fn spec.validationFailureActionOverrides.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specvalidationfailureactionoverridesnamespaceselectormatchexpressionswithvalues","title":"fn spec.validationFailureActionOverrides.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1/policy/#fn-specvalidationfailureactionoverridesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.validationFailureActionOverrides.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/","title":"kyverno.v1alpha2","text":"<ul> <li>admissionReport</li> <li>backgroundScanReport</li> <li>clusterAdmissionReport</li> <li>clusterBackgroundScanReport</li> </ul>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/","title":"kyverno.v1alpha2.admissionReport","text":"<p>\"AdmissionReport is the Schema for the AdmissionReports API\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withResults(results)</code></li> <li><code>fn withResultsMixin(results)</code></li> <li><code>obj spec.owner</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withBlockOwnerDeletion(blockOwnerDeletion)</code></li> <li><code>fn withController(controller)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec.results</code><ul> <li><code>fn withCategory(category)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPolicy(policy)</code></li> <li><code>fn withProperties(properties)</code></li> <li><code>fn withPropertiesMixin(properties)</code></li> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> <li><code>fn withResult(result)</code></li> <li><code>fn withRule(rule)</code></li> <li><code>fn withScored(scored)</code></li> <li><code>fn withSeverity(severity)</code></li> <li><code>fn withSource(source)</code></li> <li><code>obj spec.results.resourceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.results.resourceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.results.resources</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec.results.timestamp</code><ul> <li><code>fn withNanos(nanos)</code></li> <li><code>fn withSeconds(seconds)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.summary</code><ul> <li><code>fn withError(err)</code></li> <li><code>fn withFail(fail)</code></li> <li><code>fn withPass(pass)</code></li> <li><code>fn withSkip(skip)</code></li> <li><code>fn withWarn(warn)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fields","title":"Fields","text":""},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of AdmissionReport</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#obj-spec","title":"obj spec","text":""},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specwithresults","title":"fn spec.withResults","text":"<pre><code>withResults(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specwithresultsmixin","title":"fn spec.withResultsMixin","text":"<pre><code>withResultsMixin(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#obj-specowner","title":"obj spec.owner","text":"<p>\"Owner is a reference to the report owner (e.g. a Deployment, Namespace, or Node)\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specownerwithapiversion","title":"fn spec.owner.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specownerwithblockownerdeletion","title":"fn spec.owner.withBlockOwnerDeletion","text":"<pre><code>withBlockOwnerDeletion(blockOwnerDeletion)\n</code></pre> <p>\"If true, AND if the owner has the \\\"foregroundDeletion\\\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \\\"delete\\\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specownerwithcontroller","title":"fn spec.owner.withController","text":"<pre><code>withController(controller)\n</code></pre> <p>\"If true, this reference points to the managing controller.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specownerwithkind","title":"fn spec.owner.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specownerwithname","title":"fn spec.owner.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specownerwithuid","title":"fn spec.owner.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#obj-specresults","title":"obj spec.results","text":"<p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultswithcategory","title":"fn spec.results.withCategory","text":"<pre><code>withCategory(category)\n</code></pre> <p>\"Category indicates policy category\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultswithmessage","title":"fn spec.results.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Description is a short user friendly message for the policy rule\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultswithpolicy","title":"fn spec.results.withPolicy","text":"<pre><code>withPolicy(policy)\n</code></pre> <p>\"Policy is the name or identifier of the policy\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultswithproperties","title":"fn spec.results.withProperties","text":"<pre><code>withProperties(properties)\n</code></pre> <p>\"Properties provides additional information for the policy rule\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultswithpropertiesmixin","title":"fn spec.results.withPropertiesMixin","text":"<pre><code>withPropertiesMixin(properties)\n</code></pre> <p>\"Properties provides additional information for the policy rule\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultswithresources","title":"fn spec.results.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultswithresourcesmixin","title":"fn spec.results.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultswithresult","title":"fn spec.results.withResult","text":"<pre><code>withResult(result)\n</code></pre> <p>\"Result indicates the outcome of the policy rule execution\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultswithrule","title":"fn spec.results.withRule","text":"<pre><code>withRule(rule)\n</code></pre> <p>\"Rule is the name or identifier of the rule within the policy\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultswithscored","title":"fn spec.results.withScored","text":"<pre><code>withScored(scored)\n</code></pre> <p>\"Scored indicates if this result is scored\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultswithseverity","title":"fn spec.results.withSeverity","text":"<pre><code>withSeverity(severity)\n</code></pre> <p>\"Severity indicates policy check result criticality\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultswithsource","title":"fn spec.results.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source is an identifier for the policy engine that manages this report\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#obj-specresultsresourceselector","title":"obj spec.results.resourceSelector","text":"<p>\"SubjectSelector is an optional label selector for checked Kubernetes resources. For example, a policy result may apply to all pods that match a label. Either a Subject or a SubjectSelector can be specified. If neither are provided, the result is assumed to be for the policy report scope.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceselectorwithmatchexpressions","title":"fn spec.results.resourceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceselectorwithmatchexpressionsmixin","title":"fn spec.results.resourceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceselectorwithmatchlabels","title":"fn spec.results.resourceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceselectorwithmatchlabelsmixin","title":"fn spec.results.resourceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#obj-specresultsresourceselectormatchexpressions","title":"obj spec.results.resourceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceselectormatchexpressionswithkey","title":"fn spec.results.resourceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceselectormatchexpressionswithoperator","title":"fn spec.results.resourceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceselectormatchexpressionswithvalues","title":"fn spec.results.resourceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceselectormatchexpressionswithvaluesmixin","title":"fn spec.results.resourceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#obj-specresultsresources","title":"obj spec.results.resources","text":"<p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceswithapiversion","title":"fn spec.results.resources.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceswithfieldpath","title":"fn spec.results.resources.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre> <p>\"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceswithkind","title":"fn spec.results.resources.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceswithname","title":"fn spec.results.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceswithnamespace","title":"fn spec.results.resources.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceswithresourceversion","title":"fn spec.results.resources.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceswithuid","title":"fn spec.results.resources.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#obj-specresultstimestamp","title":"obj spec.results.timestamp","text":"<p>\"Timestamp indicates the time the result was found\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultstimestampwithnanos","title":"fn spec.results.timestamp.withNanos","text":"<pre><code>withNanos(nanos)\n</code></pre> <p>\"Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specresultstimestampwithseconds","title":"fn spec.results.timestamp.withSeconds","text":"<pre><code>withSeconds(seconds)\n</code></pre> <p>\"Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#obj-specsummary","title":"obj spec.summary","text":"<p>\"PolicyReportSummary provides a summary of results\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specsummarywitherror","title":"fn spec.summary.withError","text":"<pre><code>withError(err)\n</code></pre> <p>\"Error provides the count of policies that could not be evaluated\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specsummarywithfail","title":"fn spec.summary.withFail","text":"<pre><code>withFail(fail)\n</code></pre> <p>\"Fail provides the count of policies whose requirements were not met\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specsummarywithpass","title":"fn spec.summary.withPass","text":"<pre><code>withPass(pass)\n</code></pre> <p>\"Pass provides the count of policies whose requirements were met\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specsummarywithskip","title":"fn spec.summary.withSkip","text":"<pre><code>withSkip(skip)\n</code></pre> <p>\"Skip indicates the count of policies that were not selected for evaluation\"</p>"},{"location":"1.11/kyverno/v1alpha2/admissionReport/#fn-specsummarywithwarn","title":"fn spec.summary.withWarn","text":"<pre><code>withWarn(warn)\n</code></pre> <p>\"Warn provides the count of non-scored policies whose requirements were not met\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/","title":"kyverno.v1alpha2.backgroundScanReport","text":"<p>\"BackgroundScanReport is the Schema for the BackgroundScanReports API\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withResults(results)</code></li> <li><code>fn withResultsMixin(results)</code></li> <li><code>obj spec.results</code><ul> <li><code>fn withCategory(category)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPolicy(policy)</code></li> <li><code>fn withProperties(properties)</code></li> <li><code>fn withPropertiesMixin(properties)</code></li> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> <li><code>fn withResult(result)</code></li> <li><code>fn withRule(rule)</code></li> <li><code>fn withScored(scored)</code></li> <li><code>fn withSeverity(severity)</code></li> <li><code>fn withSource(source)</code></li> <li><code>obj spec.results.resourceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.results.resourceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.results.resources</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec.results.timestamp</code><ul> <li><code>fn withNanos(nanos)</code></li> <li><code>fn withSeconds(seconds)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.summary</code><ul> <li><code>fn withError(err)</code></li> <li><code>fn withFail(fail)</code></li> <li><code>fn withPass(pass)</code></li> <li><code>fn withSkip(skip)</code></li> <li><code>fn withWarn(warn)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fields","title":"Fields","text":""},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of BackgroundScanReport</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#obj-spec","title":"obj spec","text":""},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specwithresults","title":"fn spec.withResults","text":"<pre><code>withResults(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specwithresultsmixin","title":"fn spec.withResultsMixin","text":"<pre><code>withResultsMixin(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#obj-specresults","title":"obj spec.results","text":"<p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithcategory","title":"fn spec.results.withCategory","text":"<pre><code>withCategory(category)\n</code></pre> <p>\"Category indicates policy category\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithmessage","title":"fn spec.results.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Description is a short user friendly message for the policy rule\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithpolicy","title":"fn spec.results.withPolicy","text":"<pre><code>withPolicy(policy)\n</code></pre> <p>\"Policy is the name or identifier of the policy\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithproperties","title":"fn spec.results.withProperties","text":"<pre><code>withProperties(properties)\n</code></pre> <p>\"Properties provides additional information for the policy rule\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithpropertiesmixin","title":"fn spec.results.withPropertiesMixin","text":"<pre><code>withPropertiesMixin(properties)\n</code></pre> <p>\"Properties provides additional information for the policy rule\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithresources","title":"fn spec.results.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithresourcesmixin","title":"fn spec.results.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithresult","title":"fn spec.results.withResult","text":"<pre><code>withResult(result)\n</code></pre> <p>\"Result indicates the outcome of the policy rule execution\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithrule","title":"fn spec.results.withRule","text":"<pre><code>withRule(rule)\n</code></pre> <p>\"Rule is the name or identifier of the rule within the policy\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithscored","title":"fn spec.results.withScored","text":"<pre><code>withScored(scored)\n</code></pre> <p>\"Scored indicates if this result is scored\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithseverity","title":"fn spec.results.withSeverity","text":"<pre><code>withSeverity(severity)\n</code></pre> <p>\"Severity indicates policy check result criticality\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithsource","title":"fn spec.results.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source is an identifier for the policy engine that manages this report\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#obj-specresultsresourceselector","title":"obj spec.results.resourceSelector","text":"<p>\"SubjectSelector is an optional label selector for checked Kubernetes resources. For example, a policy result may apply to all pods that match a label. Either a Subject or a SubjectSelector can be specified. If neither are provided, the result is assumed to be for the policy report scope.\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceselectorwithmatchexpressions","title":"fn spec.results.resourceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceselectorwithmatchexpressionsmixin","title":"fn spec.results.resourceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceselectorwithmatchlabels","title":"fn spec.results.resourceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceselectorwithmatchlabelsmixin","title":"fn spec.results.resourceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#obj-specresultsresourceselectormatchexpressions","title":"obj spec.results.resourceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceselectormatchexpressionswithkey","title":"fn spec.results.resourceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceselectormatchexpressionswithoperator","title":"fn spec.results.resourceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceselectormatchexpressionswithvalues","title":"fn spec.results.resourceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceselectormatchexpressionswithvaluesmixin","title":"fn spec.results.resourceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#obj-specresultsresources","title":"obj spec.results.resources","text":"<p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceswithapiversion","title":"fn spec.results.resources.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent.\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceswithfieldpath","title":"fn spec.results.resources.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre> <p>\"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceswithkind","title":"fn spec.results.resources.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceswithname","title":"fn spec.results.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceswithnamespace","title":"fn spec.results.resources.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceswithresourceversion","title":"fn spec.results.resources.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceswithuid","title":"fn spec.results.resources.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#obj-specresultstimestamp","title":"obj spec.results.timestamp","text":"<p>\"Timestamp indicates the time the result was found\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultstimestampwithnanos","title":"fn spec.results.timestamp.withNanos","text":"<pre><code>withNanos(nanos)\n</code></pre> <p>\"Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specresultstimestampwithseconds","title":"fn spec.results.timestamp.withSeconds","text":"<pre><code>withSeconds(seconds)\n</code></pre> <p>\"Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#obj-specsummary","title":"obj spec.summary","text":"<p>\"PolicyReportSummary provides a summary of results\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specsummarywitherror","title":"fn spec.summary.withError","text":"<pre><code>withError(err)\n</code></pre> <p>\"Error provides the count of policies that could not be evaluated\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specsummarywithfail","title":"fn spec.summary.withFail","text":"<pre><code>withFail(fail)\n</code></pre> <p>\"Fail provides the count of policies whose requirements were not met\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specsummarywithpass","title":"fn spec.summary.withPass","text":"<pre><code>withPass(pass)\n</code></pre> <p>\"Pass provides the count of policies whose requirements were met\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specsummarywithskip","title":"fn spec.summary.withSkip","text":"<pre><code>withSkip(skip)\n</code></pre> <p>\"Skip indicates the count of policies that were not selected for evaluation\"</p>"},{"location":"1.11/kyverno/v1alpha2/backgroundScanReport/#fn-specsummarywithwarn","title":"fn spec.summary.withWarn","text":"<pre><code>withWarn(warn)\n</code></pre> <p>\"Warn provides the count of non-scored policies whose requirements were not met\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/","title":"kyverno.v1alpha2.clusterAdmissionReport","text":"<p>\"ClusterAdmissionReport is the Schema for the ClusterAdmissionReports API\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withResults(results)</code></li> <li><code>fn withResultsMixin(results)</code></li> <li><code>obj spec.owner</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withBlockOwnerDeletion(blockOwnerDeletion)</code></li> <li><code>fn withController(controller)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec.results</code><ul> <li><code>fn withCategory(category)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPolicy(policy)</code></li> <li><code>fn withProperties(properties)</code></li> <li><code>fn withPropertiesMixin(properties)</code></li> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> <li><code>fn withResult(result)</code></li> <li><code>fn withRule(rule)</code></li> <li><code>fn withScored(scored)</code></li> <li><code>fn withSeverity(severity)</code></li> <li><code>fn withSource(source)</code></li> <li><code>obj spec.results.resourceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.results.resourceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.results.resources</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec.results.timestamp</code><ul> <li><code>fn withNanos(nanos)</code></li> <li><code>fn withSeconds(seconds)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.summary</code><ul> <li><code>fn withError(err)</code></li> <li><code>fn withFail(fail)</code></li> <li><code>fn withPass(pass)</code></li> <li><code>fn withSkip(skip)</code></li> <li><code>fn withWarn(warn)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fields","title":"Fields","text":""},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ClusterAdmissionReport</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#obj-spec","title":"obj spec","text":""},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specwithresults","title":"fn spec.withResults","text":"<pre><code>withResults(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specwithresultsmixin","title":"fn spec.withResultsMixin","text":"<pre><code>withResultsMixin(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#obj-specowner","title":"obj spec.owner","text":"<p>\"Owner is a reference to the report owner (e.g. a Deployment, Namespace, or Node)\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specownerwithapiversion","title":"fn spec.owner.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specownerwithblockownerdeletion","title":"fn spec.owner.withBlockOwnerDeletion","text":"<pre><code>withBlockOwnerDeletion(blockOwnerDeletion)\n</code></pre> <p>\"If true, AND if the owner has the \\\"foregroundDeletion\\\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \\\"delete\\\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specownerwithcontroller","title":"fn spec.owner.withController","text":"<pre><code>withController(controller)\n</code></pre> <p>\"If true, this reference points to the managing controller.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specownerwithkind","title":"fn spec.owner.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specownerwithname","title":"fn spec.owner.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specownerwithuid","title":"fn spec.owner.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#obj-specresults","title":"obj spec.results","text":"<p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithcategory","title":"fn spec.results.withCategory","text":"<pre><code>withCategory(category)\n</code></pre> <p>\"Category indicates policy category\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithmessage","title":"fn spec.results.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Description is a short user friendly message for the policy rule\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithpolicy","title":"fn spec.results.withPolicy","text":"<pre><code>withPolicy(policy)\n</code></pre> <p>\"Policy is the name or identifier of the policy\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithproperties","title":"fn spec.results.withProperties","text":"<pre><code>withProperties(properties)\n</code></pre> <p>\"Properties provides additional information for the policy rule\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithpropertiesmixin","title":"fn spec.results.withPropertiesMixin","text":"<pre><code>withPropertiesMixin(properties)\n</code></pre> <p>\"Properties provides additional information for the policy rule\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithresources","title":"fn spec.results.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithresourcesmixin","title":"fn spec.results.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithresult","title":"fn spec.results.withResult","text":"<pre><code>withResult(result)\n</code></pre> <p>\"Result indicates the outcome of the policy rule execution\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithrule","title":"fn spec.results.withRule","text":"<pre><code>withRule(rule)\n</code></pre> <p>\"Rule is the name or identifier of the rule within the policy\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithscored","title":"fn spec.results.withScored","text":"<pre><code>withScored(scored)\n</code></pre> <p>\"Scored indicates if this result is scored\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithseverity","title":"fn spec.results.withSeverity","text":"<pre><code>withSeverity(severity)\n</code></pre> <p>\"Severity indicates policy check result criticality\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithsource","title":"fn spec.results.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source is an identifier for the policy engine that manages this report\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#obj-specresultsresourceselector","title":"obj spec.results.resourceSelector","text":"<p>\"SubjectSelector is an optional label selector for checked Kubernetes resources. For example, a policy result may apply to all pods that match a label. Either a Subject or a SubjectSelector can be specified. If neither are provided, the result is assumed to be for the policy report scope.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceselectorwithmatchexpressions","title":"fn spec.results.resourceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceselectorwithmatchexpressionsmixin","title":"fn spec.results.resourceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceselectorwithmatchlabels","title":"fn spec.results.resourceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceselectorwithmatchlabelsmixin","title":"fn spec.results.resourceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#obj-specresultsresourceselectormatchexpressions","title":"obj spec.results.resourceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceselectormatchexpressionswithkey","title":"fn spec.results.resourceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceselectormatchexpressionswithoperator","title":"fn spec.results.resourceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceselectormatchexpressionswithvalues","title":"fn spec.results.resourceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceselectormatchexpressionswithvaluesmixin","title":"fn spec.results.resourceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#obj-specresultsresources","title":"obj spec.results.resources","text":"<p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceswithapiversion","title":"fn spec.results.resources.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceswithfieldpath","title":"fn spec.results.resources.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre> <p>\"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceswithkind","title":"fn spec.results.resources.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceswithname","title":"fn spec.results.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceswithnamespace","title":"fn spec.results.resources.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceswithresourceversion","title":"fn spec.results.resources.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceswithuid","title":"fn spec.results.resources.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#obj-specresultstimestamp","title":"obj spec.results.timestamp","text":"<p>\"Timestamp indicates the time the result was found\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultstimestampwithnanos","title":"fn spec.results.timestamp.withNanos","text":"<pre><code>withNanos(nanos)\n</code></pre> <p>\"Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultstimestampwithseconds","title":"fn spec.results.timestamp.withSeconds","text":"<pre><code>withSeconds(seconds)\n</code></pre> <p>\"Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#obj-specsummary","title":"obj spec.summary","text":"<p>\"PolicyReportSummary provides a summary of results\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specsummarywitherror","title":"fn spec.summary.withError","text":"<pre><code>withError(err)\n</code></pre> <p>\"Error provides the count of policies that could not be evaluated\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specsummarywithfail","title":"fn spec.summary.withFail","text":"<pre><code>withFail(fail)\n</code></pre> <p>\"Fail provides the count of policies whose requirements were not met\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specsummarywithpass","title":"fn spec.summary.withPass","text":"<pre><code>withPass(pass)\n</code></pre> <p>\"Pass provides the count of policies whose requirements were met\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specsummarywithskip","title":"fn spec.summary.withSkip","text":"<pre><code>withSkip(skip)\n</code></pre> <p>\"Skip indicates the count of policies that were not selected for evaluation\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterAdmissionReport/#fn-specsummarywithwarn","title":"fn spec.summary.withWarn","text":"<pre><code>withWarn(warn)\n</code></pre> <p>\"Warn provides the count of non-scored policies whose requirements were not met\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/","title":"kyverno.v1alpha2.clusterBackgroundScanReport","text":"<p>\"ClusterBackgroundScanReport is the Schema for the ClusterBackgroundScanReports API\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withResults(results)</code></li> <li><code>fn withResultsMixin(results)</code></li> <li><code>obj spec.results</code><ul> <li><code>fn withCategory(category)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPolicy(policy)</code></li> <li><code>fn withProperties(properties)</code></li> <li><code>fn withPropertiesMixin(properties)</code></li> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> <li><code>fn withResult(result)</code></li> <li><code>fn withRule(rule)</code></li> <li><code>fn withScored(scored)</code></li> <li><code>fn withSeverity(severity)</code></li> <li><code>fn withSource(source)</code></li> <li><code>obj spec.results.resourceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.results.resourceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.results.resources</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec.results.timestamp</code><ul> <li><code>fn withNanos(nanos)</code></li> <li><code>fn withSeconds(seconds)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.summary</code><ul> <li><code>fn withError(err)</code></li> <li><code>fn withFail(fail)</code></li> <li><code>fn withPass(pass)</code></li> <li><code>fn withSkip(skip)</code></li> <li><code>fn withWarn(warn)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fields","title":"Fields","text":""},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ClusterBackgroundScanReport</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#obj-spec","title":"obj spec","text":""},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specwithresults","title":"fn spec.withResults","text":"<pre><code>withResults(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specwithresultsmixin","title":"fn spec.withResultsMixin","text":"<pre><code>withResultsMixin(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#obj-specresults","title":"obj spec.results","text":"<p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithcategory","title":"fn spec.results.withCategory","text":"<pre><code>withCategory(category)\n</code></pre> <p>\"Category indicates policy category\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithmessage","title":"fn spec.results.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Description is a short user friendly message for the policy rule\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithpolicy","title":"fn spec.results.withPolicy","text":"<pre><code>withPolicy(policy)\n</code></pre> <p>\"Policy is the name or identifier of the policy\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithproperties","title":"fn spec.results.withProperties","text":"<pre><code>withProperties(properties)\n</code></pre> <p>\"Properties provides additional information for the policy rule\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithpropertiesmixin","title":"fn spec.results.withPropertiesMixin","text":"<pre><code>withPropertiesMixin(properties)\n</code></pre> <p>\"Properties provides additional information for the policy rule\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithresources","title":"fn spec.results.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithresourcesmixin","title":"fn spec.results.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithresult","title":"fn spec.results.withResult","text":"<pre><code>withResult(result)\n</code></pre> <p>\"Result indicates the outcome of the policy rule execution\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithrule","title":"fn spec.results.withRule","text":"<pre><code>withRule(rule)\n</code></pre> <p>\"Rule is the name or identifier of the rule within the policy\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithscored","title":"fn spec.results.withScored","text":"<pre><code>withScored(scored)\n</code></pre> <p>\"Scored indicates if this result is scored\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithseverity","title":"fn spec.results.withSeverity","text":"<pre><code>withSeverity(severity)\n</code></pre> <p>\"Severity indicates policy check result criticality\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithsource","title":"fn spec.results.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source is an identifier for the policy engine that manages this report\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#obj-specresultsresourceselector","title":"obj spec.results.resourceSelector","text":"<p>\"SubjectSelector is an optional label selector for checked Kubernetes resources. For example, a policy result may apply to all pods that match a label. Either a Subject or a SubjectSelector can be specified. If neither are provided, the result is assumed to be for the policy report scope.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceselectorwithmatchexpressions","title":"fn spec.results.resourceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceselectorwithmatchexpressionsmixin","title":"fn spec.results.resourceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceselectorwithmatchlabels","title":"fn spec.results.resourceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceselectorwithmatchlabelsmixin","title":"fn spec.results.resourceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#obj-specresultsresourceselectormatchexpressions","title":"obj spec.results.resourceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceselectormatchexpressionswithkey","title":"fn spec.results.resourceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceselectormatchexpressionswithoperator","title":"fn spec.results.resourceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceselectormatchexpressionswithvalues","title":"fn spec.results.resourceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceselectormatchexpressionswithvaluesmixin","title":"fn spec.results.resourceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#obj-specresultsresources","title":"obj spec.results.resources","text":"<p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceswithapiversion","title":"fn spec.results.resources.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceswithfieldpath","title":"fn spec.results.resources.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre> <p>\"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceswithkind","title":"fn spec.results.resources.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceswithname","title":"fn spec.results.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceswithnamespace","title":"fn spec.results.resources.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceswithresourceversion","title":"fn spec.results.resources.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceswithuid","title":"fn spec.results.resources.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#obj-specresultstimestamp","title":"obj spec.results.timestamp","text":"<p>\"Timestamp indicates the time the result was found\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultstimestampwithnanos","title":"fn spec.results.timestamp.withNanos","text":"<pre><code>withNanos(nanos)\n</code></pre> <p>\"Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultstimestampwithseconds","title":"fn spec.results.timestamp.withSeconds","text":"<pre><code>withSeconds(seconds)\n</code></pre> <p>\"Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#obj-specsummary","title":"obj spec.summary","text":"<p>\"PolicyReportSummary provides a summary of results\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specsummarywitherror","title":"fn spec.summary.withError","text":"<pre><code>withError(err)\n</code></pre> <p>\"Error provides the count of policies that could not be evaluated\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specsummarywithfail","title":"fn spec.summary.withFail","text":"<pre><code>withFail(fail)\n</code></pre> <p>\"Fail provides the count of policies whose requirements were not met\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specsummarywithpass","title":"fn spec.summary.withPass","text":"<pre><code>withPass(pass)\n</code></pre> <p>\"Pass provides the count of policies whose requirements were met\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specsummarywithskip","title":"fn spec.summary.withSkip","text":"<pre><code>withSkip(skip)\n</code></pre> <p>\"Skip indicates the count of policies that were not selected for evaluation\"</p>"},{"location":"1.11/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specsummarywithwarn","title":"fn spec.summary.withWarn","text":"<pre><code>withWarn(warn)\n</code></pre> <p>\"Warn provides the count of non-scored policies whose requirements were not met\"</p>"},{"location":"1.11/kyverno/v1beta1/","title":"kyverno.v1beta1","text":"<ul> <li>updateRequest</li> </ul>"},{"location":"1.11/kyverno/v1beta1/updateRequest/","title":"kyverno.v1beta1.updateRequest","text":"<p>\"UpdateRequest is a request to process mutate and generate rules in background.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withDeleteDownstream(deleteDownstream)</code></li> <li><code>fn withPolicy(policy)</code></li> <li><code>fn withRequestType(requestType)</code></li> <li><code>fn withRule(rule)</code></li> <li><code>fn withSynchronize(synchronize)</code></li> <li><code>obj spec.context</code><ul> <li><code>obj spec.context.admissionRequestInfo</code><ul> <li><code>fn withOperation(operation)</code></li> <li><code>obj spec.context.admissionRequestInfo.admissionRequest</code><ul> <li><code>fn withDryRun(dryRun)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withObject(object)</code></li> <li><code>fn withObjectMixin(object)</code></li> <li><code>fn withOldObject(oldObject)</code></li> <li><code>fn withOldObjectMixin(oldObject)</code></li> <li><code>fn withOperation(operation)</code></li> <li><code>fn withOptions(options)</code></li> <li><code>fn withOptionsMixin(options)</code></li> <li><code>fn withRequestSubResource(requestSubResource)</code></li> <li><code>fn withSubResource(subResource)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec.context.admissionRequestInfo.admissionRequest.kind</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withVersion(version)</code></li> </ul> </li> <li><code>obj spec.context.admissionRequestInfo.admissionRequest.requestKind</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withVersion(version)</code></li> </ul> </li> <li><code>obj spec.context.admissionRequestInfo.admissionRequest.requestResource</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withResource(resource)</code></li> <li><code>fn withVersion(version)</code></li> </ul> </li> <li><code>obj spec.context.admissionRequestInfo.admissionRequest.resource</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withResource(resource)</code></li> <li><code>fn withVersion(version)</code></li> </ul> </li> <li><code>obj spec.context.admissionRequestInfo.admissionRequest.userInfo</code><ul> <li><code>fn withExtra(extra)</code></li> <li><code>fn withExtraMixin(extra)</code></li> <li><code>fn withGroups(groups)</code></li> <li><code>fn withGroupsMixin(groups)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>fn withUsername(username)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.context.userInfo</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>obj spec.context.userInfo.userInfo</code><ul> <li><code>fn withExtra(extra)</code></li> <li><code>fn withExtraMixin(extra)</code></li> <li><code>fn withGroups(groups)</code></li> <li><code>fn withGroupsMixin(groups)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>fn withUsername(username)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.resource</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fields","title":"Fields","text":""},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of UpdateRequest</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#obj-spec","title":"obj spec","text":"<p>\"ResourceSpec is the information to identify the trigger resource.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-specwithdeletedownstream","title":"fn spec.withDeleteDownstream","text":"<pre><code>withDeleteDownstream(deleteDownstream)\n</code></pre> <p>\"DeleteDownstream represents whether the downstream needs to be deleted.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-specwithpolicy","title":"fn spec.withPolicy","text":"<pre><code>withPolicy(policy)\n</code></pre> <p>\"Specifies the name of the policy.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-specwithrequesttype","title":"fn spec.withRequestType","text":"<pre><code>withRequestType(requestType)\n</code></pre> <p>\"Type represents request type for background processing\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-specwithrule","title":"fn spec.withRule","text":"<pre><code>withRule(rule)\n</code></pre> <p>\"Rule is the associate rule name of the current UR.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-specwithsynchronize","title":"fn spec.withSynchronize","text":"<pre><code>withSynchronize(synchronize)\n</code></pre> <p>\"Synchronize represents the sync behavior of the corresponding rule Optional. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#obj-speccontext","title":"obj spec.context","text":"<p>\"Context ...\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#obj-speccontextadmissionrequestinfo","title":"obj spec.context.admissionRequestInfo","text":"<p>\"AdmissionRequestInfoObject stores the admission request and operation details\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfowithoperation","title":"fn spec.context.admissionRequestInfo.withOperation","text":"<pre><code>withOperation(operation)\n</code></pre> <p>\"Operation is the type of resource operation being checked for admission control\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#obj-speccontextadmissionrequestinfoadmissionrequest","title":"obj spec.context.admissionRequestInfo.admissionRequest","text":"<p>\"AdmissionRequest describes the admission.Attributes for the admission request.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithdryrun","title":"fn spec.context.admissionRequestInfo.admissionRequest.withDryRun","text":"<pre><code>withDryRun(dryRun)\n</code></pre> <p>\"DryRun indicates that modifications will definitely not be persisted for this request. Defaults to false.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithname","title":"fn spec.context.admissionRequestInfo.admissionRequest.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the object as presented in the request.  On a CREATE operation, the client may omit name and rely on the server to generate the name.  If that is the case, this field will contain an empty string.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithnamespace","title":"fn spec.context.admissionRequestInfo.admissionRequest.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace associated with the request (if any).\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithobject","title":"fn spec.context.admissionRequestInfo.admissionRequest.withObject","text":"<pre><code>withObject(object)\n</code></pre> <p>\"Object is the object from the incoming request.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithobjectmixin","title":"fn spec.context.admissionRequestInfo.admissionRequest.withObjectMixin","text":"<pre><code>withObjectMixin(object)\n</code></pre> <p>\"Object is the object from the incoming request.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwitholdobject","title":"fn spec.context.admissionRequestInfo.admissionRequest.withOldObject","text":"<pre><code>withOldObject(oldObject)\n</code></pre> <p>\"OldObject is the existing object. Only populated for DELETE and UPDATE requests.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwitholdobjectmixin","title":"fn spec.context.admissionRequestInfo.admissionRequest.withOldObjectMixin","text":"<pre><code>withOldObjectMixin(oldObject)\n</code></pre> <p>\"OldObject is the existing object. Only populated for DELETE and UPDATE requests.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithoperation","title":"fn spec.context.admissionRequestInfo.admissionRequest.withOperation","text":"<pre><code>withOperation(operation)\n</code></pre> <p>\"Operation is the operation being performed. This may be different than the operation requested. e.g. a patch can result in either a CREATE or UPDATE Operation.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithoptions","title":"fn spec.context.admissionRequestInfo.admissionRequest.withOptions","text":"<pre><code>withOptions(options)\n</code></pre> <p>\"Options is the operation option structure of the operation being performed. e.g. <code>meta.k8s.io/v1.DeleteOptions</code> or <code>meta.k8s.io/v1.CreateOptions</code>. This may be different than the options the caller provided. e.g. for a patch request the performed Operation might be a CREATE, in which case the Options will a <code>meta.k8s.io/v1.CreateOptions</code> even though the caller provided <code>meta.k8s.io/v1.PatchOptions</code>.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithoptionsmixin","title":"fn spec.context.admissionRequestInfo.admissionRequest.withOptionsMixin","text":"<pre><code>withOptionsMixin(options)\n</code></pre> <p>\"Options is the operation option structure of the operation being performed. e.g. <code>meta.k8s.io/v1.DeleteOptions</code> or <code>meta.k8s.io/v1.CreateOptions</code>. This may be different than the options the caller provided. e.g. for a patch request the performed Operation might be a CREATE, in which case the Options will a <code>meta.k8s.io/v1.CreateOptions</code> even though the caller provided <code>meta.k8s.io/v1.PatchOptions</code>.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithrequestsubresource","title":"fn spec.context.admissionRequestInfo.admissionRequest.withRequestSubResource","text":"<pre><code>withRequestSubResource(requestSubResource)\n</code></pre> <p>\"RequestSubResource is the name of the subresource of the original API request, if any (for example, \\\"status\\\" or \\\"scale\\\") If this is specified and differs from the value in \\\"subResource\\\", an equivalent match and conversion was performed. See documentation for the \\\"matchPolicy\\\" field in the webhook configuration type.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithsubresource","title":"fn spec.context.admissionRequestInfo.admissionRequest.withSubResource","text":"<pre><code>withSubResource(subResource)\n</code></pre> <p>\"SubResource is the subresource being requested, if any (for example, \\\"status\\\" or \\\"scale\\\")\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithuid","title":"fn spec.context.admissionRequestInfo.admissionRequest.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is an identifier for the individual request/response. It allows us to distinguish instances of requests which are otherwise identical (parallel requests, requests when earlier requests did not modify etc) The UID is meant to track the round trip (request/response) between the KAS and the WebHook, not the user request. It is suitable for correlating log entries between the webhook and apiserver, for either auditing or debugging.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#obj-speccontextadmissionrequestinfoadmissionrequestkind","title":"obj spec.context.admissionRequestInfo.admissionRequest.kind","text":"<p>\"Kind is the fully-qualified type of object being submitted (for example, v1.Pod or autoscaling.v1.Scale)\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestkindwithgroup","title":"fn spec.context.admissionRequestInfo.admissionRequest.kind.withGroup","text":"<pre><code>withGroup(group)\n</code></pre>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestkindwithkind","title":"fn spec.context.admissionRequestInfo.admissionRequest.kind.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestkindwithversion","title":"fn spec.context.admissionRequestInfo.admissionRequest.kind.withVersion","text":"<pre><code>withVersion(version)\n</code></pre>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#obj-speccontextadmissionrequestinfoadmissionrequestrequestkind","title":"obj spec.context.admissionRequestInfo.admissionRequest.requestKind","text":"<p>\"RequestKind is the fully-qualified type of the original API request (for example, v1.Pod or autoscaling.v1.Scale). If this is specified and differs from the value in \\\"kind\\\", an equivalent match and conversion was performed. \\n For example, if deployments can be modified via apps/v1 and apps/v1beta1, and a webhook registered a rule of <code>apiGroups:[\\\"apps\\\"], apiVersions:[\\\"v1\\\"], resources: [\\\"deployments\\\"]</code> and <code>matchPolicy: Equivalent</code>, an API request to apps/v1beta1 deployments would be converted and sent to the webhook with <code>kind: {group:\\\"apps\\\", version:\\\"v1\\\", kind:\\\"Deployment\\\"}</code> (matching the rule the webhook registered for), and <code>requestKind: {group:\\\"apps\\\", version:\\\"v1beta1\\\", kind:\\\"Deployment\\\"}</code> (indicating the kind of the original API request). \\n See documentation for the \\\"matchPolicy\\\" field in the webhook configuration type for more details.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestrequestkindwithgroup","title":"fn spec.context.admissionRequestInfo.admissionRequest.requestKind.withGroup","text":"<pre><code>withGroup(group)\n</code></pre>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestrequestkindwithkind","title":"fn spec.context.admissionRequestInfo.admissionRequest.requestKind.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestrequestkindwithversion","title":"fn spec.context.admissionRequestInfo.admissionRequest.requestKind.withVersion","text":"<pre><code>withVersion(version)\n</code></pre>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#obj-speccontextadmissionrequestinfoadmissionrequestrequestresource","title":"obj spec.context.admissionRequestInfo.admissionRequest.requestResource","text":"<p>\"RequestResource is the fully-qualified resource of the original API request (for example, v1.pods). If this is specified and differs from the value in \\\"resource\\\", an equivalent match and conversion was performed. \\n For example, if deployments can be modified via apps/v1 and apps/v1beta1, and a webhook registered a rule of <code>apiGroups:[\\\"apps\\\"], apiVersions:[\\\"v1\\\"], resources: [\\\"deployments\\\"]</code> and <code>matchPolicy: Equivalent</code>, an API request to apps/v1beta1 deployments would be converted and sent to the webhook with <code>resource: {group:\\\"apps\\\", version:\\\"v1\\\", resource:\\\"deployments\\\"}</code> (matching the resource the webhook registered for), and <code>requestResource: {group:\\\"apps\\\", version:\\\"v1beta1\\\", resource:\\\"deployments\\\"}</code> (indicating the resource of the original API request). \\n See documentation for the \\\"matchPolicy\\\" field in the webhook configuration type.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestrequestresourcewithgroup","title":"fn spec.context.admissionRequestInfo.admissionRequest.requestResource.withGroup","text":"<pre><code>withGroup(group)\n</code></pre>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestrequestresourcewithresource","title":"fn spec.context.admissionRequestInfo.admissionRequest.requestResource.withResource","text":"<pre><code>withResource(resource)\n</code></pre>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestrequestresourcewithversion","title":"fn spec.context.admissionRequestInfo.admissionRequest.requestResource.withVersion","text":"<pre><code>withVersion(version)\n</code></pre>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#obj-speccontextadmissionrequestinfoadmissionrequestresource","title":"obj spec.context.admissionRequestInfo.admissionRequest.resource","text":"<p>\"Resource is the fully-qualified resource being requested (for example, v1.pods)\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestresourcewithgroup","title":"fn spec.context.admissionRequestInfo.admissionRequest.resource.withGroup","text":"<pre><code>withGroup(group)\n</code></pre>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestresourcewithresource","title":"fn spec.context.admissionRequestInfo.admissionRequest.resource.withResource","text":"<pre><code>withResource(resource)\n</code></pre>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestresourcewithversion","title":"fn spec.context.admissionRequestInfo.admissionRequest.resource.withVersion","text":"<pre><code>withVersion(version)\n</code></pre>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#obj-speccontextadmissionrequestinfoadmissionrequestuserinfo","title":"obj spec.context.admissionRequestInfo.admissionRequest.userInfo","text":"<p>\"UserInfo is information about the requesting user\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestuserinfowithextra","title":"fn spec.context.admissionRequestInfo.admissionRequest.userInfo.withExtra","text":"<pre><code>withExtra(extra)\n</code></pre> <p>\"Any additional information provided by the authenticator.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestuserinfowithextramixin","title":"fn spec.context.admissionRequestInfo.admissionRequest.userInfo.withExtraMixin","text":"<pre><code>withExtraMixin(extra)\n</code></pre> <p>\"Any additional information provided by the authenticator.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestuserinfowithgroups","title":"fn spec.context.admissionRequestInfo.admissionRequest.userInfo.withGroups","text":"<pre><code>withGroups(groups)\n</code></pre> <p>\"The names of groups this user is a part of.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestuserinfowithgroupsmixin","title":"fn spec.context.admissionRequestInfo.admissionRequest.userInfo.withGroupsMixin","text":"<pre><code>withGroupsMixin(groups)\n</code></pre> <p>\"The names of groups this user is a part of.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestuserinfowithuid","title":"fn spec.context.admissionRequestInfo.admissionRequest.userInfo.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestuserinfowithusername","title":"fn spec.context.admissionRequestInfo.admissionRequest.userInfo.withUsername","text":"<pre><code>withUsername(username)\n</code></pre> <p>\"The name that uniquely identifies this user among all active users.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#obj-speccontextuserinfo","title":"obj spec.context.userInfo","text":"<p>\"RequestInfo contains permission info carried in an admission request.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextuserinfowithclusterroles","title":"fn spec.context.userInfo.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is a list of possible clusterRoles send the request.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextuserinfowithclusterrolesmixin","title":"fn spec.context.userInfo.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is a list of possible clusterRoles send the request.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextuserinfowithroles","title":"fn spec.context.userInfo.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is a list of possible role send the request.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextuserinfowithrolesmixin","title":"fn spec.context.userInfo.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is a list of possible role send the request.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#obj-speccontextuserinfouserinfo","title":"obj spec.context.userInfo.userInfo","text":"<p>\"UserInfo is the userInfo carried in the admission request.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextuserinfouserinfowithextra","title":"fn spec.context.userInfo.userInfo.withExtra","text":"<pre><code>withExtra(extra)\n</code></pre> <p>\"Any additional information provided by the authenticator.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextuserinfouserinfowithextramixin","title":"fn spec.context.userInfo.userInfo.withExtraMixin","text":"<pre><code>withExtraMixin(extra)\n</code></pre> <p>\"Any additional information provided by the authenticator.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextuserinfouserinfowithgroups","title":"fn spec.context.userInfo.userInfo.withGroups","text":"<pre><code>withGroups(groups)\n</code></pre> <p>\"The names of groups this user is a part of.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextuserinfouserinfowithgroupsmixin","title":"fn spec.context.userInfo.userInfo.withGroupsMixin","text":"<pre><code>withGroupsMixin(groups)\n</code></pre> <p>\"The names of groups this user is a part of.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextuserinfouserinfowithuid","title":"fn spec.context.userInfo.userInfo.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-speccontextuserinfouserinfowithusername","title":"fn spec.context.userInfo.userInfo.withUsername","text":"<pre><code>withUsername(username)\n</code></pre> <p>\"The name that uniquely identifies this user among all active users.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#obj-specresource","title":"obj spec.resource","text":"<p>\"ResourceSpec is the information to identify the trigger resource.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-specresourcewithapiversion","title":"fn spec.resource.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-specresourcewithkind","title":"fn spec.resource.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-specresourcewithname","title":"fn spec.resource.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-specresourcewithnamespace","title":"fn spec.resource.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.11/kyverno/v1beta1/updateRequest/#fn-specresourcewithuid","title":"fn spec.resource.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID specifies the resource uid.\"</p>"},{"location":"1.11/kyverno/v2alpha1/","title":"kyverno.v2alpha1","text":"<ul> <li>cleanupPolicy</li> <li>clusterCleanupPolicy</li> <li>policyException</li> </ul>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/","title":"kyverno.v2alpha1.cleanupPolicy","text":"<p>\"CleanupPolicy defines a rule for resource cleanup.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withSchedule(schedule)</code></li> <li><code>obj spec.conditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.conditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.conditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.context.apiCall</code><ul> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> <li><code>obj spec.context.apiCall.data</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.context.apiCall.service</code><ul> <li><code>fn withCaBundle(caBundle)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> <li><code>obj spec.context.imageRegistry.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.exclude.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.exclude.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.exclude.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.exclude.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.exclude.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.match.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.match.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.match.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.match.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.match.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fields","title":"Fields","text":""},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CleanupPolicy</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec declares policy behaviors.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specwithcontext","title":"fn spec.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specwithcontextmixin","title":"fn spec.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specwithschedule","title":"fn spec.withSchedule","text":"<pre><code>withSchedule(schedule)\n</code></pre> <p>\"The schedule in Cron format\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specconditions","title":"obj spec.conditions","text":"<p>\"Conditions defines the conditions used to select the resources which will be cleaned up.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionswithall","title":"fn spec.conditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionswithallmixin","title":"fn spec.conditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionswithany","title":"fn spec.conditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionswithanymixin","title":"fn spec.conditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specconditionsall","title":"obj spec.conditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionsallwithkey","title":"fn spec.conditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionsallwithmessage","title":"fn spec.conditions.all.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionsallwithoperator","title":"fn spec.conditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionsallwithvalue","title":"fn spec.conditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specconditionsany","title":"obj spec.conditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionsanywithkey","title":"fn spec.conditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionsanywithmessage","title":"fn spec.conditions.any.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionsanywithoperator","title":"fn spec.conditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionsanywithvalue","title":"fn spec.conditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-speccontext","title":"obj spec.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextwithname","title":"fn spec.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-speccontextapicall","title":"obj spec.context.apiCall","text":"<p>\"APICall is an HTTP request to the Kubernetes API server, or other JSON web service. The data returned is stored in the context with the name for the context entry.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextapicallwithdata","title":"fn spec.context.apiCall.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextapicallwithdatamixin","title":"fn spec.context.apiCall.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextapicallwithjmespath","title":"fn spec.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response for the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextapicallwithmethod","title":"fn spec.context.apiCall.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is the HTTP request type (GET or POST).\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextapicallwithurlpath","title":"fn spec.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-speccontextapicalldata","title":"obj spec.context.apiCall.data","text":"<p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextapicalldatawithkey","title":"fn spec.context.apiCall.data.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is a unique identifier for the data value\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextapicalldatawithvalue","title":"fn spec.context.apiCall.data.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the data value\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-speccontextapicallservice","title":"obj spec.context.apiCall.service","text":"<p>\"Service is an API call to a JSON web service\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextapicallservicewithcabundle","title":"fn spec.context.apiCall.service.withCaBundle","text":"<pre><code>withCaBundle(caBundle)\n</code></pre> <p>\"CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextapicallservicewithurl","title":"fn spec.context.apiCall.service.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the JSON web service URL. A typical form is <code>https://{service}.{namespace}:{port}/{path}</code>.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-speccontextconfigmap","title":"obj spec.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextconfigmapwithname","title":"fn spec.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextconfigmapwithnamespace","title":"fn spec.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-speccontextimageregistry","title":"obj spec.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextimageregistrywithjmespath","title":"fn spec.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextimageregistrywithreference","title":"fn spec.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-speccontextimageregistryimageregistrycredentials","title":"obj spec.context.imageRegistry.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextimageregistryimageregistrycredentialswithallowinsecureregistry","title":"fn spec.context.imageRegistry.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextimageregistryimageregistrycredentialswithproviders","title":"fn spec.context.imageRegistry.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextimageregistryimageregistrycredentialswithprovidersmixin","title":"fn spec.context.imageRegistry.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextimageregistryimageregistrycredentialswithsecrets","title":"fn spec.context.imageRegistry.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextimageregistryimageregistrycredentialswithsecretsmixin","title":"fn spec.context.imageRegistry.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-speccontextvariable","title":"obj spec.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextvariablewithdefault","title":"fn spec.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextvariablewithjmespath","title":"fn spec.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-speccontextvariablewithvalue","title":"fn spec.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specexclude","title":"obj spec.exclude","text":"<p>\"ExcludeResources defines when cleanuppolicy should not be applied. The exclude criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the name or role.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludewithall","title":"fn spec.exclude.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludewithallmixin","title":"fn spec.exclude.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludewithany","title":"fn spec.exclude.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludewithanymixin","title":"fn spec.exclude.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeall","title":"obj spec.exclude.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallwithclusterroles","title":"fn spec.exclude.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallwithclusterrolesmixin","title":"fn spec.exclude.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallwithroles","title":"fn spec.exclude.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallwithrolesmixin","title":"fn spec.exclude.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallwithsubjects","title":"fn spec.exclude.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallwithsubjectsmixin","title":"fn spec.exclude.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeallresources","title":"obj spec.exclude.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourceswithannotations","title":"fn spec.exclude.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourceswithannotationsmixin","title":"fn spec.exclude.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourceswithkinds","title":"fn spec.exclude.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourceswithkindsmixin","title":"fn spec.exclude.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourceswithname","title":"fn spec.exclude.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourceswithnames","title":"fn spec.exclude.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourceswithnamesmixin","title":"fn spec.exclude.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourceswithnamespaces","title":"fn spec.exclude.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourceswithnamespacesmixin","title":"fn spec.exclude.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourceswithoperations","title":"fn spec.exclude.all.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourceswithoperationsmixin","title":"fn spec.exclude.all.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeallresourcesnamespaceselector","title":"obj spec.exclude.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeallresourcesnamespaceselectormatchexpressions","title":"obj spec.exclude.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeallresourcesselector","title":"obj spec.exclude.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchexpressions","title":"fn spec.exclude.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.exclude.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchlabels","title":"fn spec.exclude.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchlabelsmixin","title":"fn spec.exclude.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeallresourcesselectormatchexpressions","title":"obj spec.exclude.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithkey","title":"fn spec.exclude.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithoperator","title":"fn spec.exclude.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithvalues","title":"fn spec.exclude.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeallsubjects","title":"obj spec.exclude.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallsubjectswithapigroup","title":"fn spec.exclude.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallsubjectswithkind","title":"fn spec.exclude.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallsubjectswithname","title":"fn spec.exclude.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallsubjectswithnamespace","title":"fn spec.exclude.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeany","title":"obj spec.exclude.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanywithclusterroles","title":"fn spec.exclude.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanywithclusterrolesmixin","title":"fn spec.exclude.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanywithroles","title":"fn spec.exclude.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanywithrolesmixin","title":"fn spec.exclude.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanywithsubjects","title":"fn spec.exclude.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanywithsubjectsmixin","title":"fn spec.exclude.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeanyresources","title":"obj spec.exclude.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourceswithannotations","title":"fn spec.exclude.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourceswithannotationsmixin","title":"fn spec.exclude.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourceswithkinds","title":"fn spec.exclude.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourceswithkindsmixin","title":"fn spec.exclude.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourceswithname","title":"fn spec.exclude.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourceswithnames","title":"fn spec.exclude.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourceswithnamesmixin","title":"fn spec.exclude.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourceswithnamespaces","title":"fn spec.exclude.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourceswithnamespacesmixin","title":"fn spec.exclude.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourceswithoperations","title":"fn spec.exclude.any.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourceswithoperationsmixin","title":"fn spec.exclude.any.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeanyresourcesnamespaceselector","title":"obj spec.exclude.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeanyresourcesnamespaceselectormatchexpressions","title":"obj spec.exclude.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeanyresourcesselector","title":"obj spec.exclude.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchexpressions","title":"fn spec.exclude.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.exclude.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchlabels","title":"fn spec.exclude.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.exclude.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeanyresourcesselectormatchexpressions","title":"obj spec.exclude.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithkey","title":"fn spec.exclude.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithoperator","title":"fn spec.exclude.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithvalues","title":"fn spec.exclude.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeanysubjects","title":"obj spec.exclude.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanysubjectswithapigroup","title":"fn spec.exclude.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanysubjectswithkind","title":"fn spec.exclude.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanysubjectswithname","title":"fn spec.exclude.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanysubjectswithnamespace","title":"fn spec.exclude.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specmatch","title":"obj spec.match","text":"<p>\"MatchResources defines when cleanuppolicy should be applied. The match criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the user name or role. At least one kind is required.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchwithall","title":"fn spec.match.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchwithallmixin","title":"fn spec.match.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchwithany","title":"fn spec.match.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchwithanymixin","title":"fn spec.match.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchall","title":"obj spec.match.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallwithclusterroles","title":"fn spec.match.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallwithclusterrolesmixin","title":"fn spec.match.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallwithroles","title":"fn spec.match.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallwithrolesmixin","title":"fn spec.match.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallwithsubjects","title":"fn spec.match.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallwithsubjectsmixin","title":"fn spec.match.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchallresources","title":"obj spec.match.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourceswithannotations","title":"fn spec.match.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourceswithannotationsmixin","title":"fn spec.match.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourceswithkinds","title":"fn spec.match.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourceswithkindsmixin","title":"fn spec.match.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourceswithname","title":"fn spec.match.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourceswithnames","title":"fn spec.match.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourceswithnamesmixin","title":"fn spec.match.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourceswithnamespaces","title":"fn spec.match.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourceswithnamespacesmixin","title":"fn spec.match.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourceswithoperations","title":"fn spec.match.all.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourceswithoperationsmixin","title":"fn spec.match.all.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchallresourcesnamespaceselector","title":"obj spec.match.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.match.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.match.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.match.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.match.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchallresourcesnamespaceselectormatchexpressions","title":"obj spec.match.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchallresourcesselector","title":"obj spec.match.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesselectorwithmatchexpressions","title":"fn spec.match.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.match.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesselectorwithmatchlabels","title":"fn spec.match.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesselectorwithmatchlabelsmixin","title":"fn spec.match.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchallresourcesselectormatchexpressions","title":"obj spec.match.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithkey","title":"fn spec.match.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithoperator","title":"fn spec.match.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithvalues","title":"fn spec.match.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.match.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchallsubjects","title":"obj spec.match.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallsubjectswithapigroup","title":"fn spec.match.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallsubjectswithkind","title":"fn spec.match.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallsubjectswithname","title":"fn spec.match.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallsubjectswithnamespace","title":"fn spec.match.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchany","title":"obj spec.match.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanywithclusterroles","title":"fn spec.match.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanywithclusterrolesmixin","title":"fn spec.match.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanywithroles","title":"fn spec.match.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanywithrolesmixin","title":"fn spec.match.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanywithsubjects","title":"fn spec.match.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanywithsubjectsmixin","title":"fn spec.match.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchanyresources","title":"obj spec.match.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourceswithannotations","title":"fn spec.match.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourceswithannotationsmixin","title":"fn spec.match.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourceswithkinds","title":"fn spec.match.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourceswithkindsmixin","title":"fn spec.match.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourceswithname","title":"fn spec.match.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourceswithnames","title":"fn spec.match.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourceswithnamesmixin","title":"fn spec.match.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourceswithnamespaces","title":"fn spec.match.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourceswithnamespacesmixin","title":"fn spec.match.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourceswithoperations","title":"fn spec.match.any.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourceswithoperationsmixin","title":"fn spec.match.any.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchanyresourcesnamespaceselector","title":"obj spec.match.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.match.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.match.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.match.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.match.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchanyresourcesnamespaceselectormatchexpressions","title":"obj spec.match.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchanyresourcesselector","title":"obj spec.match.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchexpressions","title":"fn spec.match.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.match.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchlabels","title":"fn spec.match.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.match.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchanyresourcesselectormatchexpressions","title":"obj spec.match.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithkey","title":"fn spec.match.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithoperator","title":"fn spec.match.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithvalues","title":"fn spec.match.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.match.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchanysubjects","title":"obj spec.match.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanysubjectswithapigroup","title":"fn spec.match.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanysubjectswithkind","title":"fn spec.match.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanysubjectswithname","title":"fn spec.match.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanysubjectswithnamespace","title":"fn spec.match.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/","title":"kyverno.v2alpha1.clusterCleanupPolicy","text":"<p>\"ClusterCleanupPolicy defines rule for resource cleanup.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withSchedule(schedule)</code></li> <li><code>obj spec.conditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.conditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.conditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.context.apiCall</code><ul> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> <li><code>obj spec.context.apiCall.data</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.context.apiCall.service</code><ul> <li><code>fn withCaBundle(caBundle)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> <li><code>obj spec.context.imageRegistry.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.exclude.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.exclude.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.exclude.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.exclude.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.exclude.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.match.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.match.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.match.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.match.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.match.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fields","title":"Fields","text":""},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ClusterCleanupPolicy</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec declares policy behaviors.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specwithcontext","title":"fn spec.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specwithcontextmixin","title":"fn spec.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specwithschedule","title":"fn spec.withSchedule","text":"<pre><code>withSchedule(schedule)\n</code></pre> <p>\"The schedule in Cron format\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specconditions","title":"obj spec.conditions","text":"<p>\"Conditions defines the conditions used to select the resources which will be cleaned up.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionswithall","title":"fn spec.conditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionswithallmixin","title":"fn spec.conditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionswithany","title":"fn spec.conditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionswithanymixin","title":"fn spec.conditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specconditionsall","title":"obj spec.conditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionsallwithkey","title":"fn spec.conditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionsallwithmessage","title":"fn spec.conditions.all.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionsallwithoperator","title":"fn spec.conditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionsallwithvalue","title":"fn spec.conditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specconditionsany","title":"obj spec.conditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionsanywithkey","title":"fn spec.conditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionsanywithmessage","title":"fn spec.conditions.any.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionsanywithoperator","title":"fn spec.conditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionsanywithvalue","title":"fn spec.conditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-speccontext","title":"obj spec.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextwithname","title":"fn spec.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-speccontextapicall","title":"obj spec.context.apiCall","text":"<p>\"APICall is an HTTP request to the Kubernetes API server, or other JSON web service. The data returned is stored in the context with the name for the context entry.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextapicallwithdata","title":"fn spec.context.apiCall.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextapicallwithdatamixin","title":"fn spec.context.apiCall.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextapicallwithjmespath","title":"fn spec.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response for the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextapicallwithmethod","title":"fn spec.context.apiCall.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is the HTTP request type (GET or POST).\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextapicallwithurlpath","title":"fn spec.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-speccontextapicalldata","title":"obj spec.context.apiCall.data","text":"<p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextapicalldatawithkey","title":"fn spec.context.apiCall.data.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is a unique identifier for the data value\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextapicalldatawithvalue","title":"fn spec.context.apiCall.data.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the data value\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-speccontextapicallservice","title":"obj spec.context.apiCall.service","text":"<p>\"Service is an API call to a JSON web service\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextapicallservicewithcabundle","title":"fn spec.context.apiCall.service.withCaBundle","text":"<pre><code>withCaBundle(caBundle)\n</code></pre> <p>\"CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextapicallservicewithurl","title":"fn spec.context.apiCall.service.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the JSON web service URL. A typical form is <code>https://{service}.{namespace}:{port}/{path}</code>.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-speccontextconfigmap","title":"obj spec.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextconfigmapwithname","title":"fn spec.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextconfigmapwithnamespace","title":"fn spec.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-speccontextimageregistry","title":"obj spec.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextimageregistrywithjmespath","title":"fn spec.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextimageregistrywithreference","title":"fn spec.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-speccontextimageregistryimageregistrycredentials","title":"obj spec.context.imageRegistry.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextimageregistryimageregistrycredentialswithallowinsecureregistry","title":"fn spec.context.imageRegistry.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextimageregistryimageregistrycredentialswithproviders","title":"fn spec.context.imageRegistry.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextimageregistryimageregistrycredentialswithprovidersmixin","title":"fn spec.context.imageRegistry.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextimageregistryimageregistrycredentialswithsecrets","title":"fn spec.context.imageRegistry.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextimageregistryimageregistrycredentialswithsecretsmixin","title":"fn spec.context.imageRegistry.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-speccontextvariable","title":"obj spec.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextvariablewithdefault","title":"fn spec.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextvariablewithjmespath","title":"fn spec.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-speccontextvariablewithvalue","title":"fn spec.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexclude","title":"obj spec.exclude","text":"<p>\"ExcludeResources defines when cleanuppolicy should not be applied. The exclude criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the name or role.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludewithall","title":"fn spec.exclude.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludewithallmixin","title":"fn spec.exclude.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludewithany","title":"fn spec.exclude.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludewithanymixin","title":"fn spec.exclude.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeall","title":"obj spec.exclude.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallwithclusterroles","title":"fn spec.exclude.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallwithclusterrolesmixin","title":"fn spec.exclude.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallwithroles","title":"fn spec.exclude.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallwithrolesmixin","title":"fn spec.exclude.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallwithsubjects","title":"fn spec.exclude.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallwithsubjectsmixin","title":"fn spec.exclude.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeallresources","title":"obj spec.exclude.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourceswithannotations","title":"fn spec.exclude.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourceswithannotationsmixin","title":"fn spec.exclude.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourceswithkinds","title":"fn spec.exclude.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourceswithkindsmixin","title":"fn spec.exclude.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourceswithname","title":"fn spec.exclude.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourceswithnames","title":"fn spec.exclude.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourceswithnamesmixin","title":"fn spec.exclude.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourceswithnamespaces","title":"fn spec.exclude.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourceswithnamespacesmixin","title":"fn spec.exclude.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourceswithoperations","title":"fn spec.exclude.all.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourceswithoperationsmixin","title":"fn spec.exclude.all.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeallresourcesnamespaceselector","title":"obj spec.exclude.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeallresourcesnamespaceselectormatchexpressions","title":"obj spec.exclude.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeallresourcesselector","title":"obj spec.exclude.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchexpressions","title":"fn spec.exclude.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.exclude.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchlabels","title":"fn spec.exclude.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchlabelsmixin","title":"fn spec.exclude.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeallresourcesselectormatchexpressions","title":"obj spec.exclude.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithkey","title":"fn spec.exclude.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithoperator","title":"fn spec.exclude.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithvalues","title":"fn spec.exclude.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeallsubjects","title":"obj spec.exclude.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallsubjectswithapigroup","title":"fn spec.exclude.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallsubjectswithkind","title":"fn spec.exclude.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallsubjectswithname","title":"fn spec.exclude.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallsubjectswithnamespace","title":"fn spec.exclude.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeany","title":"obj spec.exclude.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanywithclusterroles","title":"fn spec.exclude.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanywithclusterrolesmixin","title":"fn spec.exclude.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanywithroles","title":"fn spec.exclude.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanywithrolesmixin","title":"fn spec.exclude.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanywithsubjects","title":"fn spec.exclude.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanywithsubjectsmixin","title":"fn spec.exclude.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeanyresources","title":"obj spec.exclude.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithannotations","title":"fn spec.exclude.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithannotationsmixin","title":"fn spec.exclude.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithkinds","title":"fn spec.exclude.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithkindsmixin","title":"fn spec.exclude.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithname","title":"fn spec.exclude.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithnames","title":"fn spec.exclude.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithnamesmixin","title":"fn spec.exclude.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithnamespaces","title":"fn spec.exclude.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithnamespacesmixin","title":"fn spec.exclude.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithoperations","title":"fn spec.exclude.any.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithoperationsmixin","title":"fn spec.exclude.any.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeanyresourcesnamespaceselector","title":"obj spec.exclude.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeanyresourcesnamespaceselectormatchexpressions","title":"obj spec.exclude.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeanyresourcesselector","title":"obj spec.exclude.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchexpressions","title":"fn spec.exclude.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.exclude.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchlabels","title":"fn spec.exclude.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.exclude.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeanyresourcesselectormatchexpressions","title":"obj spec.exclude.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithkey","title":"fn spec.exclude.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithoperator","title":"fn spec.exclude.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithvalues","title":"fn spec.exclude.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeanysubjects","title":"obj spec.exclude.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanysubjectswithapigroup","title":"fn spec.exclude.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanysubjectswithkind","title":"fn spec.exclude.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanysubjectswithname","title":"fn spec.exclude.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanysubjectswithnamespace","title":"fn spec.exclude.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatch","title":"obj spec.match","text":"<p>\"MatchResources defines when cleanuppolicy should be applied. The match criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the user name or role. At least one kind is required.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchwithall","title":"fn spec.match.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchwithallmixin","title":"fn spec.match.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchwithany","title":"fn spec.match.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchwithanymixin","title":"fn spec.match.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchall","title":"obj spec.match.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallwithclusterroles","title":"fn spec.match.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallwithclusterrolesmixin","title":"fn spec.match.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallwithroles","title":"fn spec.match.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallwithrolesmixin","title":"fn spec.match.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallwithsubjects","title":"fn spec.match.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallwithsubjectsmixin","title":"fn spec.match.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchallresources","title":"obj spec.match.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourceswithannotations","title":"fn spec.match.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourceswithannotationsmixin","title":"fn spec.match.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourceswithkinds","title":"fn spec.match.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourceswithkindsmixin","title":"fn spec.match.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourceswithname","title":"fn spec.match.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourceswithnames","title":"fn spec.match.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourceswithnamesmixin","title":"fn spec.match.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourceswithnamespaces","title":"fn spec.match.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourceswithnamespacesmixin","title":"fn spec.match.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourceswithoperations","title":"fn spec.match.all.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourceswithoperationsmixin","title":"fn spec.match.all.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchallresourcesnamespaceselector","title":"obj spec.match.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.match.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.match.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.match.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.match.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchallresourcesnamespaceselectormatchexpressions","title":"obj spec.match.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchallresourcesselector","title":"obj spec.match.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesselectorwithmatchexpressions","title":"fn spec.match.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.match.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesselectorwithmatchlabels","title":"fn spec.match.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesselectorwithmatchlabelsmixin","title":"fn spec.match.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchallresourcesselectormatchexpressions","title":"obj spec.match.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithkey","title":"fn spec.match.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithoperator","title":"fn spec.match.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithvalues","title":"fn spec.match.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.match.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchallsubjects","title":"obj spec.match.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallsubjectswithapigroup","title":"fn spec.match.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallsubjectswithkind","title":"fn spec.match.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallsubjectswithname","title":"fn spec.match.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallsubjectswithnamespace","title":"fn spec.match.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchany","title":"obj spec.match.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanywithclusterroles","title":"fn spec.match.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanywithclusterrolesmixin","title":"fn spec.match.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanywithroles","title":"fn spec.match.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanywithrolesmixin","title":"fn spec.match.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanywithsubjects","title":"fn spec.match.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanywithsubjectsmixin","title":"fn spec.match.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchanyresources","title":"obj spec.match.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourceswithannotations","title":"fn spec.match.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourceswithannotationsmixin","title":"fn spec.match.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourceswithkinds","title":"fn spec.match.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourceswithkindsmixin","title":"fn spec.match.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourceswithname","title":"fn spec.match.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourceswithnames","title":"fn spec.match.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourceswithnamesmixin","title":"fn spec.match.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourceswithnamespaces","title":"fn spec.match.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourceswithnamespacesmixin","title":"fn spec.match.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourceswithoperations","title":"fn spec.match.any.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourceswithoperationsmixin","title":"fn spec.match.any.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchanyresourcesnamespaceselector","title":"obj spec.match.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.match.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.match.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.match.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.match.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchanyresourcesnamespaceselectormatchexpressions","title":"obj spec.match.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchanyresourcesselector","title":"obj spec.match.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchexpressions","title":"fn spec.match.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.match.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchlabels","title":"fn spec.match.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.match.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchanyresourcesselectormatchexpressions","title":"obj spec.match.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithkey","title":"fn spec.match.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithoperator","title":"fn spec.match.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithvalues","title":"fn spec.match.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.match.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchanysubjects","title":"obj spec.match.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanysubjectswithapigroup","title":"fn spec.match.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanysubjectswithkind","title":"fn spec.match.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanysubjectswithname","title":"fn spec.match.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanysubjectswithnamespace","title":"fn spec.match.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/","title":"kyverno.v2alpha1.policyException","text":"<p>\"PolicyException declares resources to be excluded from specified policies.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withBackground(background)</code></li> <li><code>fn withExceptions(exceptions)</code></li> <li><code>fn withExceptionsMixin(exceptions)</code></li> <li><code>obj spec.exceptions</code><ul> <li><code>fn withPolicyName(policyName)</code></li> <li><code>fn withRuleNames(ruleNames)</code></li> <li><code>fn withRuleNamesMixin(ruleNames)</code></li> </ul> </li> <li><code>obj spec.match</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.match.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.match.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.match.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.match.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.match.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fields","title":"Fields","text":""},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of PolicyException</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#obj-spec","title":"obj spec","text":"<p>\"Spec declares policy exception behaviors.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specwithbackground","title":"fn spec.withBackground","text":"<pre><code>withBackground(background)\n</code></pre> <p>\"Background controls if exceptions are applied to existing policies during a background scan. Optional. Default value is \\\"true\\\". The value must be set to \\\"false\\\" if the policy rule uses variables that are only available in the admission review request (e.g. user name).\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specwithexceptions","title":"fn spec.withExceptions","text":"<pre><code>withExceptions(exceptions)\n</code></pre> <p>\"Exceptions is a list policy/rules to be excluded\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specwithexceptionsmixin","title":"fn spec.withExceptionsMixin","text":"<pre><code>withExceptionsMixin(exceptions)\n</code></pre> <p>\"Exceptions is a list policy/rules to be excluded\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#obj-specexceptions","title":"obj spec.exceptions","text":"<p>\"Exceptions is a list policy/rules to be excluded\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specexceptionswithpolicyname","title":"fn spec.exceptions.withPolicyName","text":"<pre><code>withPolicyName(policyName)\n</code></pre> <p>\"PolicyName identifies the policy to which the exception is applied. The policy name uses the format / unless it references a ClusterPolicy.\""},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specexceptionswithrulenames","title":"fn spec.exceptions.withRuleNames","text":"<pre><code>withRuleNames(ruleNames)\n</code></pre> <p>\"RuleNames identifies the rules to which the exception is applied.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specexceptionswithrulenamesmixin","title":"fn spec.exceptions.withRuleNamesMixin","text":"<pre><code>withRuleNamesMixin(ruleNames)\n</code></pre> <p>\"RuleNames identifies the rules to which the exception is applied.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#obj-specmatch","title":"obj spec.match","text":"<p>\"Match defines match clause used to check if a resource applies to the exception\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchwithall","title":"fn spec.match.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchwithallmixin","title":"fn spec.match.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchwithany","title":"fn spec.match.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchwithanymixin","title":"fn spec.match.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#obj-specmatchall","title":"obj spec.match.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallwithclusterroles","title":"fn spec.match.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallwithclusterrolesmixin","title":"fn spec.match.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallwithroles","title":"fn spec.match.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallwithrolesmixin","title":"fn spec.match.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallwithsubjects","title":"fn spec.match.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallwithsubjectsmixin","title":"fn spec.match.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#obj-specmatchallresources","title":"obj spec.match.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourceswithannotations","title":"fn spec.match.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourceswithannotationsmixin","title":"fn spec.match.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourceswithkinds","title":"fn spec.match.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourceswithkindsmixin","title":"fn spec.match.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourceswithname","title":"fn spec.match.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourceswithnames","title":"fn spec.match.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourceswithnamesmixin","title":"fn spec.match.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourceswithnamespaces","title":"fn spec.match.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourceswithnamespacesmixin","title":"fn spec.match.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourceswithoperations","title":"fn spec.match.all.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourceswithoperationsmixin","title":"fn spec.match.all.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#obj-specmatchallresourcesnamespaceselector","title":"obj spec.match.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.match.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.match.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.match.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.match.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#obj-specmatchallresourcesnamespaceselectormatchexpressions","title":"obj spec.match.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#obj-specmatchallresourcesselector","title":"obj spec.match.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesselectorwithmatchexpressions","title":"fn spec.match.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.match.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesselectorwithmatchlabels","title":"fn spec.match.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesselectorwithmatchlabelsmixin","title":"fn spec.match.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#obj-specmatchallresourcesselectormatchexpressions","title":"obj spec.match.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesselectormatchexpressionswithkey","title":"fn spec.match.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesselectormatchexpressionswithoperator","title":"fn spec.match.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesselectormatchexpressionswithvalues","title":"fn spec.match.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.match.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#obj-specmatchallsubjects","title":"obj spec.match.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallsubjectswithapigroup","title":"fn spec.match.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallsubjectswithkind","title":"fn spec.match.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallsubjectswithname","title":"fn spec.match.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchallsubjectswithnamespace","title":"fn spec.match.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#obj-specmatchany","title":"obj spec.match.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanywithclusterroles","title":"fn spec.match.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanywithclusterrolesmixin","title":"fn spec.match.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanywithroles","title":"fn spec.match.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanywithrolesmixin","title":"fn spec.match.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanywithsubjects","title":"fn spec.match.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanywithsubjectsmixin","title":"fn spec.match.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#obj-specmatchanyresources","title":"obj spec.match.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourceswithannotations","title":"fn spec.match.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourceswithannotationsmixin","title":"fn spec.match.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourceswithkinds","title":"fn spec.match.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourceswithkindsmixin","title":"fn spec.match.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourceswithname","title":"fn spec.match.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourceswithnames","title":"fn spec.match.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourceswithnamesmixin","title":"fn spec.match.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourceswithnamespaces","title":"fn spec.match.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourceswithnamespacesmixin","title":"fn spec.match.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourceswithoperations","title":"fn spec.match.any.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourceswithoperationsmixin","title":"fn spec.match.any.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#obj-specmatchanyresourcesnamespaceselector","title":"obj spec.match.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.match.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.match.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.match.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.match.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#obj-specmatchanyresourcesnamespaceselectormatchexpressions","title":"obj spec.match.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#obj-specmatchanyresourcesselector","title":"obj spec.match.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesselectorwithmatchexpressions","title":"fn spec.match.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.match.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesselectorwithmatchlabels","title":"fn spec.match.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.match.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#obj-specmatchanyresourcesselectormatchexpressions","title":"obj spec.match.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesselectormatchexpressionswithkey","title":"fn spec.match.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesselectormatchexpressionswithoperator","title":"fn spec.match.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesselectormatchexpressionswithvalues","title":"fn spec.match.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.match.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#obj-specmatchanysubjects","title":"obj spec.match.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanysubjectswithapigroup","title":"fn spec.match.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanysubjectswithkind","title":"fn spec.match.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanysubjectswithname","title":"fn spec.match.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2alpha1/policyException/#fn-specmatchanysubjectswithnamespace","title":"fn spec.match.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/","title":"kyverno.v2beta1","text":"<ul> <li>cleanupPolicy</li> <li>clusterCleanupPolicy</li> <li>clusterPolicy</li> <li>policy</li> <li>policyException</li> </ul>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/","title":"kyverno.v2beta1.cleanupPolicy","text":"<p>\"CleanupPolicy defines a rule for resource cleanup.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withSchedule(schedule)</code></li> <li><code>obj spec.conditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.conditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.conditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.context.apiCall</code><ul> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> <li><code>obj spec.context.apiCall.data</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.context.apiCall.service</code><ul> <li><code>fn withCaBundle(caBundle)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> <li><code>obj spec.context.imageRegistry.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.exclude.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.exclude.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.exclude.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.exclude.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.exclude.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.match.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.match.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.match.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.match.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.match.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fields","title":"Fields","text":""},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CleanupPolicy</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec declares policy behaviors.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specwithcontext","title":"fn spec.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specwithcontextmixin","title":"fn spec.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specwithschedule","title":"fn spec.withSchedule","text":"<pre><code>withSchedule(schedule)\n</code></pre> <p>\"The schedule in Cron format\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specconditions","title":"obj spec.conditions","text":"<p>\"Conditions defines the conditions used to select the resources which will be cleaned up.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specconditionswithall","title":"fn spec.conditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specconditionswithallmixin","title":"fn spec.conditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specconditionswithany","title":"fn spec.conditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specconditionswithanymixin","title":"fn spec.conditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specconditionsall","title":"obj spec.conditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specconditionsallwithkey","title":"fn spec.conditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specconditionsallwithmessage","title":"fn spec.conditions.all.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specconditionsallwithoperator","title":"fn spec.conditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specconditionsallwithvalue","title":"fn spec.conditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specconditionsany","title":"obj spec.conditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specconditionsanywithkey","title":"fn spec.conditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specconditionsanywithmessage","title":"fn spec.conditions.any.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specconditionsanywithoperator","title":"fn spec.conditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specconditionsanywithvalue","title":"fn spec.conditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-speccontext","title":"obj spec.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextwithname","title":"fn spec.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-speccontextapicall","title":"obj spec.context.apiCall","text":"<p>\"APICall is an HTTP request to the Kubernetes API server, or other JSON web service. The data returned is stored in the context with the name for the context entry.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextapicallwithdata","title":"fn spec.context.apiCall.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextapicallwithdatamixin","title":"fn spec.context.apiCall.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextapicallwithjmespath","title":"fn spec.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response for the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextapicallwithmethod","title":"fn spec.context.apiCall.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is the HTTP request type (GET or POST).\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextapicallwithurlpath","title":"fn spec.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-speccontextapicalldata","title":"obj spec.context.apiCall.data","text":"<p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextapicalldatawithkey","title":"fn spec.context.apiCall.data.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is a unique identifier for the data value\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextapicalldatawithvalue","title":"fn spec.context.apiCall.data.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the data value\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-speccontextapicallservice","title":"obj spec.context.apiCall.service","text":"<p>\"Service is an API call to a JSON web service\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextapicallservicewithcabundle","title":"fn spec.context.apiCall.service.withCaBundle","text":"<pre><code>withCaBundle(caBundle)\n</code></pre> <p>\"CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextapicallservicewithurl","title":"fn spec.context.apiCall.service.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the JSON web service URL. A typical form is <code>https://{service}.{namespace}:{port}/{path}</code>.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-speccontextconfigmap","title":"obj spec.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextconfigmapwithname","title":"fn spec.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextconfigmapwithnamespace","title":"fn spec.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-speccontextimageregistry","title":"obj spec.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextimageregistrywithjmespath","title":"fn spec.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextimageregistrywithreference","title":"fn spec.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-speccontextimageregistryimageregistrycredentials","title":"obj spec.context.imageRegistry.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextimageregistryimageregistrycredentialswithallowinsecureregistry","title":"fn spec.context.imageRegistry.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextimageregistryimageregistrycredentialswithproviders","title":"fn spec.context.imageRegistry.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextimageregistryimageregistrycredentialswithprovidersmixin","title":"fn spec.context.imageRegistry.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextimageregistryimageregistrycredentialswithsecrets","title":"fn spec.context.imageRegistry.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextimageregistryimageregistrycredentialswithsecretsmixin","title":"fn spec.context.imageRegistry.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-speccontextvariable","title":"obj spec.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextvariablewithdefault","title":"fn spec.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextvariablewithjmespath","title":"fn spec.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-speccontextvariablewithvalue","title":"fn spec.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specexclude","title":"obj spec.exclude","text":"<p>\"ExcludeResources defines when cleanuppolicy should not be applied. The exclude criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the name or role.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludewithall","title":"fn spec.exclude.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludewithallmixin","title":"fn spec.exclude.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludewithany","title":"fn spec.exclude.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludewithanymixin","title":"fn spec.exclude.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specexcludeall","title":"obj spec.exclude.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallwithclusterroles","title":"fn spec.exclude.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallwithclusterrolesmixin","title":"fn spec.exclude.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallwithroles","title":"fn spec.exclude.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallwithrolesmixin","title":"fn spec.exclude.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallwithsubjects","title":"fn spec.exclude.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallwithsubjectsmixin","title":"fn spec.exclude.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specexcludeallresources","title":"obj spec.exclude.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourceswithannotations","title":"fn spec.exclude.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourceswithannotationsmixin","title":"fn spec.exclude.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourceswithkinds","title":"fn spec.exclude.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourceswithkindsmixin","title":"fn spec.exclude.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourceswithname","title":"fn spec.exclude.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourceswithnames","title":"fn spec.exclude.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourceswithnamesmixin","title":"fn spec.exclude.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourceswithnamespaces","title":"fn spec.exclude.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourceswithnamespacesmixin","title":"fn spec.exclude.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourceswithoperations","title":"fn spec.exclude.all.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourceswithoperationsmixin","title":"fn spec.exclude.all.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specexcludeallresourcesnamespaceselector","title":"obj spec.exclude.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specexcludeallresourcesnamespaceselectormatchexpressions","title":"obj spec.exclude.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specexcludeallresourcesselector","title":"obj spec.exclude.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchexpressions","title":"fn spec.exclude.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.exclude.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchlabels","title":"fn spec.exclude.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchlabelsmixin","title":"fn spec.exclude.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specexcludeallresourcesselectormatchexpressions","title":"obj spec.exclude.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithkey","title":"fn spec.exclude.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithoperator","title":"fn spec.exclude.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithvalues","title":"fn spec.exclude.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specexcludeallsubjects","title":"obj spec.exclude.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallsubjectswithapigroup","title":"fn spec.exclude.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallsubjectswithkind","title":"fn spec.exclude.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallsubjectswithname","title":"fn spec.exclude.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeallsubjectswithnamespace","title":"fn spec.exclude.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specexcludeany","title":"obj spec.exclude.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanywithclusterroles","title":"fn spec.exclude.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanywithclusterrolesmixin","title":"fn spec.exclude.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanywithroles","title":"fn spec.exclude.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanywithrolesmixin","title":"fn spec.exclude.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanywithsubjects","title":"fn spec.exclude.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanywithsubjectsmixin","title":"fn spec.exclude.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specexcludeanyresources","title":"obj spec.exclude.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourceswithannotations","title":"fn spec.exclude.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourceswithannotationsmixin","title":"fn spec.exclude.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourceswithkinds","title":"fn spec.exclude.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourceswithkindsmixin","title":"fn spec.exclude.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourceswithname","title":"fn spec.exclude.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourceswithnames","title":"fn spec.exclude.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourceswithnamesmixin","title":"fn spec.exclude.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourceswithnamespaces","title":"fn spec.exclude.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourceswithnamespacesmixin","title":"fn spec.exclude.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourceswithoperations","title":"fn spec.exclude.any.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourceswithoperationsmixin","title":"fn spec.exclude.any.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specexcludeanyresourcesnamespaceselector","title":"obj spec.exclude.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specexcludeanyresourcesnamespaceselectormatchexpressions","title":"obj spec.exclude.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specexcludeanyresourcesselector","title":"obj spec.exclude.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchexpressions","title":"fn spec.exclude.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.exclude.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchlabels","title":"fn spec.exclude.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.exclude.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specexcludeanyresourcesselectormatchexpressions","title":"obj spec.exclude.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithkey","title":"fn spec.exclude.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithoperator","title":"fn spec.exclude.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithvalues","title":"fn spec.exclude.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specexcludeanysubjects","title":"obj spec.exclude.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanysubjectswithapigroup","title":"fn spec.exclude.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanysubjectswithkind","title":"fn spec.exclude.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanysubjectswithname","title":"fn spec.exclude.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specexcludeanysubjectswithnamespace","title":"fn spec.exclude.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specmatch","title":"obj spec.match","text":"<p>\"MatchResources defines when cleanuppolicy should be applied. The match criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the user name or role. At least one kind is required.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchwithall","title":"fn spec.match.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchwithallmixin","title":"fn spec.match.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchwithany","title":"fn spec.match.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchwithanymixin","title":"fn spec.match.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specmatchall","title":"obj spec.match.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallwithclusterroles","title":"fn spec.match.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallwithclusterrolesmixin","title":"fn spec.match.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallwithroles","title":"fn spec.match.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallwithrolesmixin","title":"fn spec.match.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallwithsubjects","title":"fn spec.match.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallwithsubjectsmixin","title":"fn spec.match.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specmatchallresources","title":"obj spec.match.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourceswithannotations","title":"fn spec.match.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourceswithannotationsmixin","title":"fn spec.match.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourceswithkinds","title":"fn spec.match.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourceswithkindsmixin","title":"fn spec.match.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourceswithname","title":"fn spec.match.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourceswithnames","title":"fn spec.match.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourceswithnamesmixin","title":"fn spec.match.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourceswithnamespaces","title":"fn spec.match.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourceswithnamespacesmixin","title":"fn spec.match.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourceswithoperations","title":"fn spec.match.all.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourceswithoperationsmixin","title":"fn spec.match.all.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specmatchallresourcesnamespaceselector","title":"obj spec.match.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.match.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.match.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.match.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.match.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specmatchallresourcesnamespaceselectormatchexpressions","title":"obj spec.match.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specmatchallresourcesselector","title":"obj spec.match.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourcesselectorwithmatchexpressions","title":"fn spec.match.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.match.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourcesselectorwithmatchlabels","title":"fn spec.match.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourcesselectorwithmatchlabelsmixin","title":"fn spec.match.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specmatchallresourcesselectormatchexpressions","title":"obj spec.match.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithkey","title":"fn spec.match.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithoperator","title":"fn spec.match.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithvalues","title":"fn spec.match.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.match.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specmatchallsubjects","title":"obj spec.match.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallsubjectswithapigroup","title":"fn spec.match.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallsubjectswithkind","title":"fn spec.match.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallsubjectswithname","title":"fn spec.match.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchallsubjectswithnamespace","title":"fn spec.match.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specmatchany","title":"obj spec.match.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanywithclusterroles","title":"fn spec.match.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanywithclusterrolesmixin","title":"fn spec.match.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanywithroles","title":"fn spec.match.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanywithrolesmixin","title":"fn spec.match.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanywithsubjects","title":"fn spec.match.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanywithsubjectsmixin","title":"fn spec.match.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specmatchanyresources","title":"obj spec.match.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourceswithannotations","title":"fn spec.match.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourceswithannotationsmixin","title":"fn spec.match.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourceswithkinds","title":"fn spec.match.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourceswithkindsmixin","title":"fn spec.match.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourceswithname","title":"fn spec.match.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourceswithnames","title":"fn spec.match.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourceswithnamesmixin","title":"fn spec.match.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourceswithnamespaces","title":"fn spec.match.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourceswithnamespacesmixin","title":"fn spec.match.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourceswithoperations","title":"fn spec.match.any.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourceswithoperationsmixin","title":"fn spec.match.any.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specmatchanyresourcesnamespaceselector","title":"obj spec.match.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.match.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.match.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.match.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.match.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specmatchanyresourcesnamespaceselectormatchexpressions","title":"obj spec.match.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specmatchanyresourcesselector","title":"obj spec.match.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchexpressions","title":"fn spec.match.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.match.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchlabels","title":"fn spec.match.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.match.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specmatchanyresourcesselectormatchexpressions","title":"obj spec.match.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithkey","title":"fn spec.match.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithoperator","title":"fn spec.match.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithvalues","title":"fn spec.match.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.match.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#obj-specmatchanysubjects","title":"obj spec.match.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanysubjectswithapigroup","title":"fn spec.match.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanysubjectswithkind","title":"fn spec.match.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanysubjectswithname","title":"fn spec.match.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2beta1/cleanupPolicy/#fn-specmatchanysubjectswithnamespace","title":"fn spec.match.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/","title":"kyverno.v2beta1.clusterCleanupPolicy","text":"<p>\"ClusterCleanupPolicy defines rule for resource cleanup.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withSchedule(schedule)</code></li> <li><code>obj spec.conditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.conditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.conditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.context.apiCall</code><ul> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> <li><code>obj spec.context.apiCall.data</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.context.apiCall.service</code><ul> <li><code>fn withCaBundle(caBundle)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> <li><code>obj spec.context.imageRegistry.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.exclude.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.exclude.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.exclude.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.exclude.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.exclude.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.match.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.match.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.match.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.match.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.match.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fields","title":"Fields","text":""},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ClusterCleanupPolicy</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec declares policy behaviors.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specwithcontext","title":"fn spec.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specwithcontextmixin","title":"fn spec.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specwithschedule","title":"fn spec.withSchedule","text":"<pre><code>withSchedule(schedule)\n</code></pre> <p>\"The schedule in Cron format\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specconditions","title":"obj spec.conditions","text":"<p>\"Conditions defines the conditions used to select the resources which will be cleaned up.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specconditionswithall","title":"fn spec.conditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specconditionswithallmixin","title":"fn spec.conditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specconditionswithany","title":"fn spec.conditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specconditionswithanymixin","title":"fn spec.conditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specconditionsall","title":"obj spec.conditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specconditionsallwithkey","title":"fn spec.conditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specconditionsallwithmessage","title":"fn spec.conditions.all.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specconditionsallwithoperator","title":"fn spec.conditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specconditionsallwithvalue","title":"fn spec.conditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specconditionsany","title":"obj spec.conditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specconditionsanywithkey","title":"fn spec.conditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specconditionsanywithmessage","title":"fn spec.conditions.any.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specconditionsanywithoperator","title":"fn spec.conditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specconditionsanywithvalue","title":"fn spec.conditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-speccontext","title":"obj spec.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextwithname","title":"fn spec.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-speccontextapicall","title":"obj spec.context.apiCall","text":"<p>\"APICall is an HTTP request to the Kubernetes API server, or other JSON web service. The data returned is stored in the context with the name for the context entry.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextapicallwithdata","title":"fn spec.context.apiCall.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextapicallwithdatamixin","title":"fn spec.context.apiCall.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextapicallwithjmespath","title":"fn spec.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response for the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextapicallwithmethod","title":"fn spec.context.apiCall.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is the HTTP request type (GET or POST).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextapicallwithurlpath","title":"fn spec.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-speccontextapicalldata","title":"obj spec.context.apiCall.data","text":"<p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextapicalldatawithkey","title":"fn spec.context.apiCall.data.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is a unique identifier for the data value\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextapicalldatawithvalue","title":"fn spec.context.apiCall.data.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the data value\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-speccontextapicallservice","title":"obj spec.context.apiCall.service","text":"<p>\"Service is an API call to a JSON web service\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextapicallservicewithcabundle","title":"fn spec.context.apiCall.service.withCaBundle","text":"<pre><code>withCaBundle(caBundle)\n</code></pre> <p>\"CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextapicallservicewithurl","title":"fn spec.context.apiCall.service.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the JSON web service URL. A typical form is <code>https://{service}.{namespace}:{port}/{path}</code>.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-speccontextconfigmap","title":"obj spec.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextconfigmapwithname","title":"fn spec.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextconfigmapwithnamespace","title":"fn spec.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-speccontextimageregistry","title":"obj spec.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextimageregistrywithjmespath","title":"fn spec.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextimageregistrywithreference","title":"fn spec.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-speccontextimageregistryimageregistrycredentials","title":"obj spec.context.imageRegistry.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextimageregistryimageregistrycredentialswithallowinsecureregistry","title":"fn spec.context.imageRegistry.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextimageregistryimageregistrycredentialswithproviders","title":"fn spec.context.imageRegistry.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextimageregistryimageregistrycredentialswithprovidersmixin","title":"fn spec.context.imageRegistry.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextimageregistryimageregistrycredentialswithsecrets","title":"fn spec.context.imageRegistry.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextimageregistryimageregistrycredentialswithsecretsmixin","title":"fn spec.context.imageRegistry.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-speccontextvariable","title":"obj spec.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextvariablewithdefault","title":"fn spec.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextvariablewithjmespath","title":"fn spec.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-speccontextvariablewithvalue","title":"fn spec.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specexclude","title":"obj spec.exclude","text":"<p>\"ExcludeResources defines when cleanuppolicy should not be applied. The exclude criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the name or role.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludewithall","title":"fn spec.exclude.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludewithallmixin","title":"fn spec.exclude.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludewithany","title":"fn spec.exclude.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludewithanymixin","title":"fn spec.exclude.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specexcludeall","title":"obj spec.exclude.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallwithclusterroles","title":"fn spec.exclude.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallwithclusterrolesmixin","title":"fn spec.exclude.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallwithroles","title":"fn spec.exclude.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallwithrolesmixin","title":"fn spec.exclude.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallwithsubjects","title":"fn spec.exclude.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallwithsubjectsmixin","title":"fn spec.exclude.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specexcludeallresources","title":"obj spec.exclude.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourceswithannotations","title":"fn spec.exclude.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourceswithannotationsmixin","title":"fn spec.exclude.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourceswithkinds","title":"fn spec.exclude.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourceswithkindsmixin","title":"fn spec.exclude.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourceswithname","title":"fn spec.exclude.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourceswithnames","title":"fn spec.exclude.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourceswithnamesmixin","title":"fn spec.exclude.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourceswithnamespaces","title":"fn spec.exclude.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourceswithnamespacesmixin","title":"fn spec.exclude.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourceswithoperations","title":"fn spec.exclude.all.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourceswithoperationsmixin","title":"fn spec.exclude.all.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specexcludeallresourcesnamespaceselector","title":"obj spec.exclude.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specexcludeallresourcesnamespaceselectormatchexpressions","title":"obj spec.exclude.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specexcludeallresourcesselector","title":"obj spec.exclude.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchexpressions","title":"fn spec.exclude.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.exclude.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchlabels","title":"fn spec.exclude.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchlabelsmixin","title":"fn spec.exclude.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specexcludeallresourcesselectormatchexpressions","title":"obj spec.exclude.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithkey","title":"fn spec.exclude.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithoperator","title":"fn spec.exclude.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithvalues","title":"fn spec.exclude.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specexcludeallsubjects","title":"obj spec.exclude.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallsubjectswithapigroup","title":"fn spec.exclude.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallsubjectswithkind","title":"fn spec.exclude.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallsubjectswithname","title":"fn spec.exclude.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeallsubjectswithnamespace","title":"fn spec.exclude.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specexcludeany","title":"obj spec.exclude.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanywithclusterroles","title":"fn spec.exclude.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanywithclusterrolesmixin","title":"fn spec.exclude.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanywithroles","title":"fn spec.exclude.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanywithrolesmixin","title":"fn spec.exclude.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanywithsubjects","title":"fn spec.exclude.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanywithsubjectsmixin","title":"fn spec.exclude.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specexcludeanyresources","title":"obj spec.exclude.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithannotations","title":"fn spec.exclude.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithannotationsmixin","title":"fn spec.exclude.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithkinds","title":"fn spec.exclude.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithkindsmixin","title":"fn spec.exclude.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithname","title":"fn spec.exclude.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithnames","title":"fn spec.exclude.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithnamesmixin","title":"fn spec.exclude.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithnamespaces","title":"fn spec.exclude.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithnamespacesmixin","title":"fn spec.exclude.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithoperations","title":"fn spec.exclude.any.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithoperationsmixin","title":"fn spec.exclude.any.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specexcludeanyresourcesnamespaceselector","title":"obj spec.exclude.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specexcludeanyresourcesnamespaceselectormatchexpressions","title":"obj spec.exclude.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specexcludeanyresourcesselector","title":"obj spec.exclude.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchexpressions","title":"fn spec.exclude.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.exclude.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchlabels","title":"fn spec.exclude.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.exclude.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specexcludeanyresourcesselectormatchexpressions","title":"obj spec.exclude.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithkey","title":"fn spec.exclude.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithoperator","title":"fn spec.exclude.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithvalues","title":"fn spec.exclude.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specexcludeanysubjects","title":"obj spec.exclude.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanysubjectswithapigroup","title":"fn spec.exclude.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanysubjectswithkind","title":"fn spec.exclude.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanysubjectswithname","title":"fn spec.exclude.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specexcludeanysubjectswithnamespace","title":"fn spec.exclude.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specmatch","title":"obj spec.match","text":"<p>\"MatchResources defines when cleanuppolicy should be applied. The match criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the user name or role. At least one kind is required.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchwithall","title":"fn spec.match.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchwithallmixin","title":"fn spec.match.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchwithany","title":"fn spec.match.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchwithanymixin","title":"fn spec.match.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specmatchall","title":"obj spec.match.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallwithclusterroles","title":"fn spec.match.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallwithclusterrolesmixin","title":"fn spec.match.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallwithroles","title":"fn spec.match.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallwithrolesmixin","title":"fn spec.match.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallwithsubjects","title":"fn spec.match.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallwithsubjectsmixin","title":"fn spec.match.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specmatchallresources","title":"obj spec.match.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourceswithannotations","title":"fn spec.match.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourceswithannotationsmixin","title":"fn spec.match.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourceswithkinds","title":"fn spec.match.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourceswithkindsmixin","title":"fn spec.match.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourceswithname","title":"fn spec.match.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourceswithnames","title":"fn spec.match.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourceswithnamesmixin","title":"fn spec.match.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourceswithnamespaces","title":"fn spec.match.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourceswithnamespacesmixin","title":"fn spec.match.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourceswithoperations","title":"fn spec.match.all.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourceswithoperationsmixin","title":"fn spec.match.all.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specmatchallresourcesnamespaceselector","title":"obj spec.match.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.match.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.match.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.match.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.match.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specmatchallresourcesnamespaceselectormatchexpressions","title":"obj spec.match.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specmatchallresourcesselector","title":"obj spec.match.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourcesselectorwithmatchexpressions","title":"fn spec.match.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.match.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourcesselectorwithmatchlabels","title":"fn spec.match.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourcesselectorwithmatchlabelsmixin","title":"fn spec.match.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specmatchallresourcesselectormatchexpressions","title":"obj spec.match.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithkey","title":"fn spec.match.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithoperator","title":"fn spec.match.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithvalues","title":"fn spec.match.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.match.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specmatchallsubjects","title":"obj spec.match.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallsubjectswithapigroup","title":"fn spec.match.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallsubjectswithkind","title":"fn spec.match.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallsubjectswithname","title":"fn spec.match.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchallsubjectswithnamespace","title":"fn spec.match.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specmatchany","title":"obj spec.match.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanywithclusterroles","title":"fn spec.match.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanywithclusterrolesmixin","title":"fn spec.match.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanywithroles","title":"fn spec.match.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanywithrolesmixin","title":"fn spec.match.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanywithsubjects","title":"fn spec.match.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanywithsubjectsmixin","title":"fn spec.match.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specmatchanyresources","title":"obj spec.match.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourceswithannotations","title":"fn spec.match.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourceswithannotationsmixin","title":"fn spec.match.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourceswithkinds","title":"fn spec.match.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourceswithkindsmixin","title":"fn spec.match.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourceswithname","title":"fn spec.match.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourceswithnames","title":"fn spec.match.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourceswithnamesmixin","title":"fn spec.match.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourceswithnamespaces","title":"fn spec.match.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourceswithnamespacesmixin","title":"fn spec.match.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourceswithoperations","title":"fn spec.match.any.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourceswithoperationsmixin","title":"fn spec.match.any.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specmatchanyresourcesnamespaceselector","title":"obj spec.match.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.match.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.match.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.match.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.match.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specmatchanyresourcesnamespaceselectormatchexpressions","title":"obj spec.match.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specmatchanyresourcesselector","title":"obj spec.match.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchexpressions","title":"fn spec.match.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.match.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchlabels","title":"fn spec.match.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.match.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specmatchanyresourcesselectormatchexpressions","title":"obj spec.match.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithkey","title":"fn spec.match.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithoperator","title":"fn spec.match.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithvalues","title":"fn spec.match.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.match.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#obj-specmatchanysubjects","title":"obj spec.match.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanysubjectswithapigroup","title":"fn spec.match.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanysubjectswithkind","title":"fn spec.match.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanysubjectswithname","title":"fn spec.match.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterCleanupPolicy/#fn-specmatchanysubjectswithnamespace","title":"fn spec.match.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/","title":"kyverno.v2beta1.clusterPolicy","text":"<p>\"ClusterPolicy declares validation, mutation, and generation behaviors for matching resources.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAdmission(admission)</code></li> <li><code>fn withApplyRules(applyRules)</code></li> <li><code>fn withBackground(background)</code></li> <li><code>fn withFailurePolicy(failurePolicy)</code></li> <li><code>fn withGenerateExisting(generateExisting)</code></li> <li><code>fn withGenerateExistingOnPolicyUpdate(generateExistingOnPolicyUpdate)</code></li> <li><code>fn withMutateExistingOnPolicyUpdate(mutateExistingOnPolicyUpdate)</code></li> <li><code>fn withRules(rules)</code></li> <li><code>fn withRulesMixin(rules)</code></li> <li><code>fn withSchemaValidation(schemaValidation)</code></li> <li><code>fn withUseServerSideApply(useServerSideApply)</code></li> <li><code>fn withValidationFailureAction(validationFailureAction)</code></li> <li><code>fn withValidationFailureActionOverrides(validationFailureActionOverrides)</code></li> <li><code>fn withValidationFailureActionOverridesMixin(validationFailureActionOverrides)</code></li> <li><code>fn withWebhookTimeoutSeconds(webhookTimeoutSeconds)</code></li> <li><code>obj spec.rules</code><ul> <li><code>fn withCelPreconditions(celPreconditions)</code></li> <li><code>fn withCelPreconditionsMixin(celPreconditions)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withImageExtractors(imageExtractors)</code></li> <li><code>fn withImageExtractorsMixin(imageExtractors)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withVerifyImages(verifyImages)</code></li> <li><code>fn withVerifyImagesMixin(verifyImages)</code></li> <li><code>obj spec.rules.celPreconditions</code><ul> <li><code>fn withExpression(expression)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.rules.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.context.apiCall</code><ul> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> <li><code>obj spec.rules.context.apiCall.data</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.context.apiCall.service</code><ul> <li><code>fn withCaBundle(caBundle)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> <li><code>obj spec.rules.context.imageRegistry.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.exclude.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.rules.exclude.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.rules.exclude.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.generate</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withData(data)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withSynchronize(synchronize)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec.rules.generate.clone</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.generate.cloneList</code><ul> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.rules.generate.cloneList.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.generate.cloneList.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.match.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.rules.match.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.rules.match.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate</code><ul> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withForeachMixin(foreach)</code></li> <li><code>fn withPatchStrategicMerge(patchStrategicMerge)</code></li> <li><code>fn withPatchesJson6902(patchesJson6902)</code></li> <li><code>fn withTargets(targets)</code></li> <li><code>fn withTargetsMixin(targets)</code></li> <li><code>obj spec.rules.mutate.foreach</code><ul> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withList(list)</code></li> <li><code>fn withOrder(order)</code></li> <li><code>fn withPatchStrategicMerge(patchStrategicMerge)</code></li> <li><code>fn withPatchesJson6902(patchesJson6902)</code></li> <li><code>obj spec.rules.mutate.foreach.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.mutate.foreach.context.apiCall</code><ul> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> <li><code>obj spec.rules.mutate.foreach.context.apiCall.data</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.apiCall.service</code><ul> <li><code>fn withCaBundle(caBundle)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> <li><code>obj spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.mutate.foreach.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.targets</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPreconditions(preconditions)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec.rules.mutate.targets.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.mutate.targets.context.apiCall</code><ul> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> <li><code>obj spec.rules.mutate.targets.context.apiCall.data</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.targets.context.apiCall.service</code><ul> <li><code>fn withCaBundle(caBundle)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.targets.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.targets.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> <li><code>obj spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.targets.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate</code><ul> <li><code>fn withAnyPattern(anyPattern)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withForeachMixin(foreach)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPattern(pattern)</code></li> <li><code>obj spec.rules.validate.cel</code><ul> <li><code>fn withAuditAnnotations(auditAnnotations)</code></li> <li><code>fn withAuditAnnotationsMixin(auditAnnotations)</code></li> <li><code>fn withExpressions(expressions)</code></li> <li><code>fn withExpressionsMixin(expressions)</code></li> <li><code>fn withVariables(variables)</code></li> <li><code>fn withVariablesMixin(variables)</code></li> <li><code>obj spec.rules.validate.cel.auditAnnotations</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValueExpression(valueExpression)</code></li> </ul> </li> <li><code>obj spec.rules.validate.cel.expressions</code><ul> <li><code>fn withExpression(expression)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withMessageExpression(messageExpression)</code></li> <li><code>fn withReason(reason)</code></li> </ul> </li> <li><code>obj spec.rules.validate.cel.paramKind</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> </ul> </li> <li><code>obj spec.rules.validate.cel.paramRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withParameterNotFoundAction(parameterNotFoundAction)</code></li> <li><code>obj spec.rules.validate.cel.paramRef.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.validate.cel.paramRef.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.cel.variables</code><ul> <li><code>fn withExpression(expression)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.deny</code><ul> <li><code>obj spec.rules.validate.deny.conditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.validate.deny.conditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.validate.deny.conditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach</code><ul> <li><code>fn withAnyPattern(anyPattern)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withElementScope(elementScope)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withList(list)</code></li> <li><code>fn withPattern(pattern)</code></li> <li><code>obj spec.rules.validate.foreach.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.validate.foreach.context.apiCall</code><ul> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> <li><code>obj spec.rules.validate.foreach.context.apiCall.data</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.apiCall.service</code><ul> <li><code>fn withCaBundle(caBundle)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> <li><code>obj spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach.deny</code><ul> <li><code>fn withConditions(conditions)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.validate.foreach.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests</code><ul> <li><code>fn withAnnotationDomain(annotationDomain)</code></li> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withIgnoreFields(ignoreFields)</code></li> <li><code>fn withIgnoreFieldsMixin(ignoreFields)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.validate.manifests.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.certificates.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.certificates.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keyless.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keyless.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.dryRun</code><ul> <li><code>fn withEnable(enable)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.ignoreFields</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>fn withObjects(objects)</code></li> <li><code>fn withObjectsMixin(objects)</code></li> <li><code>obj spec.rules.validate.manifests.ignoreFields.objects</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withVersion(version)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.podSecurity</code><ul> <li><code>fn withExclude(exclude)</code></li> <li><code>fn withExcludeMixin(exclude)</code></li> <li><code>fn withLevel(level)</code></li> <li><code>fn withVersion(version)</code></li> <li><code>obj spec.rules.validate.podSecurity.exclude</code><ul> <li><code>fn withControlName(controlName)</code></li> <li><code>fn withImages(images)</code></li> <li><code>fn withImagesMixin(images)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages</code><ul> <li><code>fn withAttestations(attestations)</code></li> <li><code>fn withAttestationsMixin(attestations)</code></li> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withImageReferences(imageReferences)</code></li> <li><code>fn withImageReferencesMixin(imageReferences)</code></li> <li><code>fn withMutateDigest(mutateDigest)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>fn withRequired(required)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withUseCache(useCache)</code></li> <li><code>fn withVerifyDigest(verifyDigest)</code></li> <li><code>obj spec.rules.verifyImages.attestations</code><ul> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withConditions(conditions)</code></li> <li><code>fn withConditionsMixin(conditions)</code></li> <li><code>fn withPredicateType(predicateType)</code></li> <li><code>fn withType(type)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.certificates.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keyless.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.conditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.verifyImages.attestations.conditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.conditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.certificates.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.certificates.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.keyless.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keyless.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.validationFailureActionOverrides</code><ul> <li><code>fn withAction(action)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.validationFailureActionOverrides.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.validationFailureActionOverrides.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fields","title":"Fields","text":""},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ClusterPolicy</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec declares policy behaviors.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specwithadmission","title":"fn spec.withAdmission","text":"<pre><code>withAdmission(admission)\n</code></pre> <p>\"Admission controls if rules are applied during admission. Optional. Default value is \\\"true\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specwithapplyrules","title":"fn spec.withApplyRules","text":"<pre><code>withApplyRules(applyRules)\n</code></pre> <p>\"ApplyRules controls how rules in a policy are applied. Rule are processed in the order of declaration. When set to <code>One</code> processing stops after a rule has been applied i.e. the rule matches and results in a pass, fail, or error. When set to <code>All</code> all rules in the policy are processed. The default is <code>All</code>.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specwithbackground","title":"fn spec.withBackground","text":"<pre><code>withBackground(background)\n</code></pre> <p>\"Background controls if rules are applied to existing resources during a background scan. Optional. Default value is \\\"true\\\". The value must be set to \\\"false\\\" if the policy rule uses variables that are only available in the admission review request (e.g. user name).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specwithfailurepolicy","title":"fn spec.withFailurePolicy","text":"<pre><code>withFailurePolicy(failurePolicy)\n</code></pre> <p>\"FailurePolicy defines how unexpected policy errors and webhook response timeout errors are handled. Rules within the same policy share the same failure behavior. Allowed values are Ignore or Fail. Defaults to Fail.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specwithgenerateexisting","title":"fn spec.withGenerateExisting","text":"<pre><code>withGenerateExisting(generateExisting)\n</code></pre> <p>\"GenerateExisting controls whether to trigger generate rule in existing resources If is set to \\\"true\\\" generate rule will be triggered and applied to existing matched resources. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specwithgenerateexistingonpolicyupdate","title":"fn spec.withGenerateExistingOnPolicyUpdate","text":"<pre><code>withGenerateExistingOnPolicyUpdate(generateExistingOnPolicyUpdate)\n</code></pre> <p>\"Deprecated, use generateExisting instead\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specwithmutateexistingonpolicyupdate","title":"fn spec.withMutateExistingOnPolicyUpdate","text":"<pre><code>withMutateExistingOnPolicyUpdate(mutateExistingOnPolicyUpdate)\n</code></pre> <p>\"MutateExistingOnPolicyUpdate controls if a mutateExisting policy is applied on policy events. Default value is \\\"false\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specwithrules","title":"fn spec.withRules","text":"<pre><code>withRules(rules)\n</code></pre> <p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specwithrulesmixin","title":"fn spec.withRulesMixin","text":"<pre><code>withRulesMixin(rules)\n</code></pre> <p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specwithschemavalidation","title":"fn spec.withSchemaValidation","text":"<pre><code>withSchemaValidation(schemaValidation)\n</code></pre> <p>\"SchemaValidation skips validation checks for policies as well as patched resources. Optional. The default value is set to \\\"true\\\", it must be set to \\\"false\\\" to disable the validation checks.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specwithuseserversideapply","title":"fn spec.withUseServerSideApply","text":"<pre><code>withUseServerSideApply(useServerSideApply)\n</code></pre> <p>\"UseServerSideApply controls whether to use server-side apply for generate rules If is set to \\\"true\\\" create &amp; update for generate rules will use apply instead of create/update. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specwithvalidationfailureaction","title":"fn spec.withValidationFailureAction","text":"<pre><code>withValidationFailureAction(validationFailureAction)\n</code></pre> <p>\"ValidationFailureAction defines if a validation policy rule violation should block the admission review request (enforce), or allow (audit) the admission review request and report an error in a policy report. Optional. Allowed values are audit or enforce. The default value is \\\"Audit\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specwithvalidationfailureactionoverrides","title":"fn spec.withValidationFailureActionOverrides","text":"<pre><code>withValidationFailureActionOverrides(validationFailureActionOverrides)\n</code></pre> <p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specwithvalidationfailureactionoverridesmixin","title":"fn spec.withValidationFailureActionOverridesMixin","text":"<pre><code>withValidationFailureActionOverridesMixin(validationFailureActionOverrides)\n</code></pre> <p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specwithwebhooktimeoutseconds","title":"fn spec.withWebhookTimeoutSeconds","text":"<pre><code>withWebhookTimeoutSeconds(webhookTimeoutSeconds)\n</code></pre> <p>\"WebhookTimeoutSeconds specifies the maximum time in seconds allowed to apply this policy. After the configured time expires, the admission request may fail, or may simply ignore the policy results, based on the failure policy. The default timeout is 10s, the value must be between 1 and 30 seconds.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrules","title":"obj spec.rules","text":"<p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specruleswithcelpreconditions","title":"fn spec.rules.withCelPreconditions","text":"<pre><code>withCelPreconditions(celPreconditions)\n</code></pre> <p>\"CELPreconditions are used to determine if a policy rule should be applied by evaluating a set of CEL conditions. It can only be used with the validate.cel subrule\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specruleswithcelpreconditionsmixin","title":"fn spec.rules.withCelPreconditionsMixin","text":"<pre><code>withCelPreconditionsMixin(celPreconditions)\n</code></pre> <p>\"CELPreconditions are used to determine if a policy rule should be applied by evaluating a set of CEL conditions. It can only be used with the validate.cel subrule\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specruleswithcontext","title":"fn spec.rules.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specruleswithcontextmixin","title":"fn spec.rules.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specruleswithimageextractors","title":"fn spec.rules.withImageExtractors","text":"<pre><code>withImageExtractors(imageExtractors)\n</code></pre> <p>\"ImageExtractors defines a mapping from kinds to ImageExtractorConfigs. This config is only valid for verifyImages rules.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specruleswithimageextractorsmixin","title":"fn spec.rules.withImageExtractorsMixin","text":"<pre><code>withImageExtractorsMixin(imageExtractors)\n</code></pre> <p>\"ImageExtractors defines a mapping from kinds to ImageExtractorConfigs. This config is only valid for verifyImages rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specruleswithname","title":"fn spec.rules.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a label to identify the rule, It must be unique within the policy.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specruleswithverifyimages","title":"fn spec.rules.withVerifyImages","text":"<pre><code>withVerifyImages(verifyImages)\n</code></pre> <p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specruleswithverifyimagesmixin","title":"fn spec.rules.withVerifyImagesMixin","text":"<pre><code>withVerifyImagesMixin(verifyImages)\n</code></pre> <p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulescelpreconditions","title":"obj spec.rules.celPreconditions","text":"<p>\"CELPreconditions are used to determine if a policy rule should be applied by evaluating a set of CEL conditions. It can only be used with the validate.cel subrule\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescelpreconditionswithexpression","title":"fn spec.rules.celPreconditions.withExpression","text":"<pre><code>withExpression(expression)\n</code></pre> <p>\"Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables: \\n 'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request. See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the request resource. Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/ \\n Required.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescelpreconditionswithname","title":"fn spec.rules.celPreconditions.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName') \\n Required.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulescontext","title":"obj spec.rules.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextwithname","title":"fn spec.rules.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulescontextapicall","title":"obj spec.rules.context.apiCall","text":"<p>\"APICall is an HTTP request to the Kubernetes API server, or other JSON web service. The data returned is stored in the context with the name for the context entry.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextapicallwithdata","title":"fn spec.rules.context.apiCall.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextapicallwithdatamixin","title":"fn spec.rules.context.apiCall.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextapicallwithjmespath","title":"fn spec.rules.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response for the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextapicallwithmethod","title":"fn spec.rules.context.apiCall.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is the HTTP request type (GET or POST).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextapicallwithurlpath","title":"fn spec.rules.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulescontextapicalldata","title":"obj spec.rules.context.apiCall.data","text":"<p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextapicalldatawithkey","title":"fn spec.rules.context.apiCall.data.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is a unique identifier for the data value\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextapicalldatawithvalue","title":"fn spec.rules.context.apiCall.data.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the data value\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulescontextapicallservice","title":"obj spec.rules.context.apiCall.service","text":"<p>\"Service is an API call to a JSON web service\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextapicallservicewithcabundle","title":"fn spec.rules.context.apiCall.service.withCaBundle","text":"<pre><code>withCaBundle(caBundle)\n</code></pre> <p>\"CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextapicallservicewithurl","title":"fn spec.rules.context.apiCall.service.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the JSON web service URL. A typical form is <code>https://{service}.{namespace}:{port}/{path}</code>.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulescontextconfigmap","title":"obj spec.rules.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextconfigmapwithname","title":"fn spec.rules.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextconfigmapwithnamespace","title":"fn spec.rules.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulescontextimageregistry","title":"obj spec.rules.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextimageregistrywithjmespath","title":"fn spec.rules.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextimageregistrywithreference","title":"fn spec.rules.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulescontextimageregistryimageregistrycredentials","title":"obj spec.rules.context.imageRegistry.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextimageregistryimageregistrycredentialswithallowinsecureregistry","title":"fn spec.rules.context.imageRegistry.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextimageregistryimageregistrycredentialswithproviders","title":"fn spec.rules.context.imageRegistry.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextimageregistryimageregistrycredentialswithprovidersmixin","title":"fn spec.rules.context.imageRegistry.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextimageregistryimageregistrycredentialswithsecrets","title":"fn spec.rules.context.imageRegistry.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextimageregistryimageregistrycredentialswithsecretsmixin","title":"fn spec.rules.context.imageRegistry.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulescontextvariable","title":"obj spec.rules.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextvariablewithdefault","title":"fn spec.rules.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextvariablewithjmespath","title":"fn spec.rules.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextvariablewithvalue","title":"fn spec.rules.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesexclude","title":"obj spec.rules.exclude","text":"<p>\"ExcludeResources defines when this policy rule should not be applied. The exclude criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the name or role.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludewithall","title":"fn spec.rules.exclude.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludewithallmixin","title":"fn spec.rules.exclude.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludewithany","title":"fn spec.rules.exclude.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludewithanymixin","title":"fn spec.rules.exclude.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeall","title":"obj spec.rules.exclude.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallwithclusterroles","title":"fn spec.rules.exclude.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallwithclusterrolesmixin","title":"fn spec.rules.exclude.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallwithroles","title":"fn spec.rules.exclude.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallwithrolesmixin","title":"fn spec.rules.exclude.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallwithsubjects","title":"fn spec.rules.exclude.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallwithsubjectsmixin","title":"fn spec.rules.exclude.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeallresources","title":"obj spec.rules.exclude.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourceswithannotations","title":"fn spec.rules.exclude.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourceswithannotationsmixin","title":"fn spec.rules.exclude.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourceswithkinds","title":"fn spec.rules.exclude.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourceswithkindsmixin","title":"fn spec.rules.exclude.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourceswithname","title":"fn spec.rules.exclude.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourceswithnames","title":"fn spec.rules.exclude.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourceswithnamesmixin","title":"fn spec.rules.exclude.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourceswithnamespaces","title":"fn spec.rules.exclude.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourceswithnamespacesmixin","title":"fn spec.rules.exclude.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourceswithoperations","title":"fn spec.rules.exclude.all.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourceswithoperationsmixin","title":"fn spec.rules.exclude.all.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeallresourcesnamespaceselector","title":"obj spec.rules.exclude.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeallresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeallresourcesselector","title":"obj spec.rules.exclude.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeallresourcesselectormatchexpressions","title":"obj spec.rules.exclude.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeallsubjects","title":"obj spec.rules.exclude.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallsubjectswithapigroup","title":"fn spec.rules.exclude.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallsubjectswithkind","title":"fn spec.rules.exclude.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallsubjectswithname","title":"fn spec.rules.exclude.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallsubjectswithnamespace","title":"fn spec.rules.exclude.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeany","title":"obj spec.rules.exclude.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanywithclusterroles","title":"fn spec.rules.exclude.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanywithclusterrolesmixin","title":"fn spec.rules.exclude.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanywithroles","title":"fn spec.rules.exclude.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanywithrolesmixin","title":"fn spec.rules.exclude.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanywithsubjects","title":"fn spec.rules.exclude.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanywithsubjectsmixin","title":"fn spec.rules.exclude.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeanyresources","title":"obj spec.rules.exclude.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourceswithannotations","title":"fn spec.rules.exclude.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourceswithannotationsmixin","title":"fn spec.rules.exclude.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourceswithkinds","title":"fn spec.rules.exclude.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourceswithkindsmixin","title":"fn spec.rules.exclude.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourceswithname","title":"fn spec.rules.exclude.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourceswithnames","title":"fn spec.rules.exclude.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourceswithnamesmixin","title":"fn spec.rules.exclude.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourceswithnamespaces","title":"fn spec.rules.exclude.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourceswithnamespacesmixin","title":"fn spec.rules.exclude.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourceswithoperations","title":"fn spec.rules.exclude.any.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourceswithoperationsmixin","title":"fn spec.rules.exclude.any.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeanyresourcesnamespaceselector","title":"obj spec.rules.exclude.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeanyresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeanyresourcesselector","title":"obj spec.rules.exclude.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeanyresourcesselectormatchexpressions","title":"obj spec.rules.exclude.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeanysubjects","title":"obj spec.rules.exclude.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanysubjectswithapigroup","title":"fn spec.rules.exclude.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanysubjectswithkind","title":"fn spec.rules.exclude.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanysubjectswithname","title":"fn spec.rules.exclude.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanysubjectswithnamespace","title":"fn spec.rules.exclude.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesgenerate","title":"obj spec.rules.generate","text":"<p>\"Generation is used to create new resources.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesgeneratewithapiversion","title":"fn spec.rules.generate.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesgeneratewithdata","title":"fn spec.rules.generate.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data provides the resource declaration used to populate each generated resource. At most one of Data or Clone must be specified. If neither are provided, the generated resource will be created with default data only.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesgeneratewithkind","title":"fn spec.rules.generate.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesgeneratewithname","title":"fn spec.rules.generate.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesgeneratewithnamespace","title":"fn spec.rules.generate.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesgeneratewithsynchronize","title":"fn spec.rules.generate.withSynchronize","text":"<pre><code>withSynchronize(synchronize)\n</code></pre> <p>\"Synchronize controls if generated resources should be kept in-sync with their source resource. If Synchronize is set to \\\"true\\\" changes to generated resources will be overwritten with resource data from Data or the resource specified in the Clone declaration. Optional. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesgeneratewithuid","title":"fn spec.rules.generate.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID specifies the resource uid.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesgenerateclone","title":"obj spec.rules.generate.clone","text":"<p>\"Clone specifies the source resource used to populate each generated resource. At most one of Data or Clone can be specified. If neither are provided, the generated resource will be created with default data only.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonewithname","title":"fn spec.rules.generate.clone.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies name of the resource.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonewithnamespace","title":"fn spec.rules.generate.clone.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies source resource namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesgenerateclonelist","title":"obj spec.rules.generate.cloneList","text":"<p>\"CloneList specifies the list of source resource used to populate each generated resource.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistwithkinds","title":"fn spec.rules.generate.cloneList.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistwithkindsmixin","title":"fn spec.rules.generate.cloneList.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistwithnamespace","title":"fn spec.rules.generate.cloneList.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies source resource namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesgenerateclonelistselector","title":"obj spec.rules.generate.cloneList.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code>. wildcard characters are not supported.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistselectorwithmatchexpressions","title":"fn spec.rules.generate.cloneList.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistselectorwithmatchexpressionsmixin","title":"fn spec.rules.generate.cloneList.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistselectorwithmatchlabels","title":"fn spec.rules.generate.cloneList.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistselectorwithmatchlabelsmixin","title":"fn spec.rules.generate.cloneList.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesgenerateclonelistselectormatchexpressions","title":"obj spec.rules.generate.cloneList.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistselectormatchexpressionswithkey","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistselectormatchexpressionswithoperator","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistselectormatchexpressionswithvalues","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatch","title":"obj spec.rules.match","text":"<p>\"MatchResources defines when this policy rule should be applied. The match criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the user name or role. At least one kind is required.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchwithall","title":"fn spec.rules.match.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchwithallmixin","title":"fn spec.rules.match.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchwithany","title":"fn spec.rules.match.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchwithanymixin","title":"fn spec.rules.match.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchall","title":"obj spec.rules.match.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallwithclusterroles","title":"fn spec.rules.match.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallwithclusterrolesmixin","title":"fn spec.rules.match.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallwithroles","title":"fn spec.rules.match.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallwithrolesmixin","title":"fn spec.rules.match.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallwithsubjects","title":"fn spec.rules.match.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallwithsubjectsmixin","title":"fn spec.rules.match.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchallresources","title":"obj spec.rules.match.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourceswithannotations","title":"fn spec.rules.match.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourceswithannotationsmixin","title":"fn spec.rules.match.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourceswithkinds","title":"fn spec.rules.match.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourceswithkindsmixin","title":"fn spec.rules.match.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourceswithname","title":"fn spec.rules.match.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourceswithnames","title":"fn spec.rules.match.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourceswithnamesmixin","title":"fn spec.rules.match.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourceswithnamespaces","title":"fn spec.rules.match.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourceswithnamespacesmixin","title":"fn spec.rules.match.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourceswithoperations","title":"fn spec.rules.match.all.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourceswithoperationsmixin","title":"fn spec.rules.match.all.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchallresourcesnamespaceselector","title":"obj spec.rules.match.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchallresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchallresourcesselector","title":"obj spec.rules.match.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesselectorwithmatchlabels","title":"fn spec.rules.match.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchallresourcesselectormatchexpressions","title":"obj spec.rules.match.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchallsubjects","title":"obj spec.rules.match.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallsubjectswithapigroup","title":"fn spec.rules.match.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallsubjectswithkind","title":"fn spec.rules.match.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallsubjectswithname","title":"fn spec.rules.match.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallsubjectswithnamespace","title":"fn spec.rules.match.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchany","title":"obj spec.rules.match.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanywithclusterroles","title":"fn spec.rules.match.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanywithclusterrolesmixin","title":"fn spec.rules.match.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanywithroles","title":"fn spec.rules.match.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanywithrolesmixin","title":"fn spec.rules.match.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanywithsubjects","title":"fn spec.rules.match.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanywithsubjectsmixin","title":"fn spec.rules.match.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchanyresources","title":"obj spec.rules.match.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourceswithannotations","title":"fn spec.rules.match.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourceswithannotationsmixin","title":"fn spec.rules.match.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourceswithkinds","title":"fn spec.rules.match.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourceswithkindsmixin","title":"fn spec.rules.match.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourceswithname","title":"fn spec.rules.match.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourceswithnames","title":"fn spec.rules.match.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourceswithnamesmixin","title":"fn spec.rules.match.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourceswithnamespaces","title":"fn spec.rules.match.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourceswithnamespacesmixin","title":"fn spec.rules.match.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourceswithoperations","title":"fn spec.rules.match.any.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourceswithoperationsmixin","title":"fn spec.rules.match.any.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchanyresourcesnamespaceselector","title":"obj spec.rules.match.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchanyresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchanyresourcesselector","title":"obj spec.rules.match.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesselectorwithmatchlabels","title":"fn spec.rules.match.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchanyresourcesselectormatchexpressions","title":"obj spec.rules.match.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchanysubjects","title":"obj spec.rules.match.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanysubjectswithapigroup","title":"fn spec.rules.match.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanysubjectswithkind","title":"fn spec.rules.match.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanysubjectswithname","title":"fn spec.rules.match.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanysubjectswithnamespace","title":"fn spec.rules.match.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutate","title":"obj spec.rules.mutate","text":"<p>\"Mutation is used to modify matching resources.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatewithforeach","title":"fn spec.rules.mutate.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatewithforeachmixin","title":"fn spec.rules.mutate.withForeachMixin","text":"<pre><code>withForeachMixin(foreach)\n</code></pre> <p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatewithpatchstrategicmerge","title":"fn spec.rules.mutate.withPatchStrategicMerge","text":"<pre><code>withPatchStrategicMerge(patchStrategicMerge)\n</code></pre> <p>\"PatchStrategicMerge is a strategic merge patch used to modify resources. See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatewithpatchesjson6902","title":"fn spec.rules.mutate.withPatchesJson6902","text":"<pre><code>withPatchesJson6902(patchesJson6902)\n</code></pre> <p>\"PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources. See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatewithtargets","title":"fn spec.rules.mutate.withTargets","text":"<pre><code>withTargets(targets)\n</code></pre> <p>\"Targets defines the target resources to be mutated.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatewithtargetsmixin","title":"fn spec.rules.mutate.withTargetsMixin","text":"<pre><code>withTargetsMixin(targets)\n</code></pre> <p>\"Targets defines the target resources to be mutated.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeach","title":"obj spec.rules.mutate.foreach","text":"<p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachwithcontext","title":"fn spec.rules.mutate.foreach.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachwithcontextmixin","title":"fn spec.rules.mutate.foreach.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachwithforeach","title":"fn spec.rules.mutate.foreach.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"Foreach declares a nested foreach iterator\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachwithlist","title":"fn spec.rules.mutate.foreach.withList","text":"<pre><code>withList(list)\n</code></pre> <p>\"List specifies a JMESPath expression that results in one or more elements to which the validation logic is applied.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachwithorder","title":"fn spec.rules.mutate.foreach.withOrder","text":"<pre><code>withOrder(order)\n</code></pre> <p>\"Order defines the iteration order on the list. Can be Ascending to iterate from first to last element or Descending to iterate in from last to first element.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachwithpatchstrategicmerge","title":"fn spec.rules.mutate.foreach.withPatchStrategicMerge","text":"<pre><code>withPatchStrategicMerge(patchStrategicMerge)\n</code></pre> <p>\"PatchStrategicMerge is a strategic merge patch used to modify resources. See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachwithpatchesjson6902","title":"fn spec.rules.mutate.foreach.withPatchesJson6902","text":"<pre><code>withPatchesJson6902(patchesJson6902)\n</code></pre> <p>\"PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources. See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeachcontext","title":"obj spec.rules.mutate.foreach.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextwithname","title":"fn spec.rules.mutate.foreach.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeachcontextapicall","title":"obj spec.rules.mutate.foreach.context.apiCall","text":"<p>\"APICall is an HTTP request to the Kubernetes API server, or other JSON web service. The data returned is stored in the context with the name for the context entry.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextapicallwithdata","title":"fn spec.rules.mutate.foreach.context.apiCall.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextapicallwithdatamixin","title":"fn spec.rules.mutate.foreach.context.apiCall.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextapicallwithjmespath","title":"fn spec.rules.mutate.foreach.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response for the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextapicallwithmethod","title":"fn spec.rules.mutate.foreach.context.apiCall.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is the HTTP request type (GET or POST).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextapicallwithurlpath","title":"fn spec.rules.mutate.foreach.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeachcontextapicalldata","title":"obj spec.rules.mutate.foreach.context.apiCall.data","text":"<p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextapicalldatawithkey","title":"fn spec.rules.mutate.foreach.context.apiCall.data.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is a unique identifier for the data value\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextapicalldatawithvalue","title":"fn spec.rules.mutate.foreach.context.apiCall.data.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the data value\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeachcontextapicallservice","title":"obj spec.rules.mutate.foreach.context.apiCall.service","text":"<p>\"Service is an API call to a JSON web service\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextapicallservicewithcabundle","title":"fn spec.rules.mutate.foreach.context.apiCall.service.withCaBundle","text":"<pre><code>withCaBundle(caBundle)\n</code></pre> <p>\"CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextapicallservicewithurl","title":"fn spec.rules.mutate.foreach.context.apiCall.service.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the JSON web service URL. A typical form is <code>https://{service}.{namespace}:{port}/{path}</code>.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeachcontextconfigmap","title":"obj spec.rules.mutate.foreach.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextconfigmapwithname","title":"fn spec.rules.mutate.foreach.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextconfigmapwithnamespace","title":"fn spec.rules.mutate.foreach.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeachcontextimageregistry","title":"obj spec.rules.mutate.foreach.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextimageregistrywithjmespath","title":"fn spec.rules.mutate.foreach.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextimageregistrywithreference","title":"fn spec.rules.mutate.foreach.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeachcontextimageregistryimageregistrycredentials","title":"obj spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextimageregistryimageregistrycredentialswithallowinsecureregistry","title":"fn spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextimageregistryimageregistrycredentialswithproviders","title":"fn spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextimageregistryimageregistrycredentialswithprovidersmixin","title":"fn spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextimageregistryimageregistrycredentialswithsecrets","title":"fn spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextimageregistryimageregistrycredentialswithsecretsmixin","title":"fn spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeachcontextvariable","title":"obj spec.rules.mutate.foreach.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextvariablewithdefault","title":"fn spec.rules.mutate.foreach.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextvariablewithjmespath","title":"fn spec.rules.mutate.foreach.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextvariablewithvalue","title":"fn spec.rules.mutate.foreach.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeachpreconditions","title":"obj spec.rules.mutate.foreach.preconditions","text":"<p>\"AnyAllConditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionswithall","title":"fn spec.rules.mutate.foreach.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionswithallmixin","title":"fn spec.rules.mutate.foreach.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionswithany","title":"fn spec.rules.mutate.foreach.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionswithanymixin","title":"fn spec.rules.mutate.foreach.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeachpreconditionsall","title":"obj spec.rules.mutate.foreach.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsallwithkey","title":"fn spec.rules.mutate.foreach.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsallwithmessage","title":"fn spec.rules.mutate.foreach.preconditions.all.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsallwithoperator","title":"fn spec.rules.mutate.foreach.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsallwithvalue","title":"fn spec.rules.mutate.foreach.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeachpreconditionsany","title":"obj spec.rules.mutate.foreach.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsanywithkey","title":"fn spec.rules.mutate.foreach.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsanywithmessage","title":"fn spec.rules.mutate.foreach.preconditions.any.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsanywithoperator","title":"fn spec.rules.mutate.foreach.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsanywithvalue","title":"fn spec.rules.mutate.foreach.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutatetargets","title":"obj spec.rules.mutate.targets","text":"<p>\"Targets defines the target resources to be mutated.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetswithapiversion","title":"fn spec.rules.mutate.targets.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetswithcontext","title":"fn spec.rules.mutate.targets.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetswithcontextmixin","title":"fn spec.rules.mutate.targets.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetswithkind","title":"fn spec.rules.mutate.targets.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetswithname","title":"fn spec.rules.mutate.targets.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetswithnamespace","title":"fn spec.rules.mutate.targets.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetswithpreconditions","title":"fn spec.rules.mutate.targets.withPreconditions","text":"<pre><code>withPreconditions(preconditions)\n</code></pre> <p>\"Preconditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. A direct list of conditions (without <code>any</code> or <code>all</code> statements is supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetswithuid","title":"fn spec.rules.mutate.targets.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID specifies the resource uid.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutatetargetscontext","title":"obj spec.rules.mutate.targets.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextwithname","title":"fn spec.rules.mutate.targets.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutatetargetscontextapicall","title":"obj spec.rules.mutate.targets.context.apiCall","text":"<p>\"APICall is an HTTP request to the Kubernetes API server, or other JSON web service. The data returned is stored in the context with the name for the context entry.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextapicallwithdata","title":"fn spec.rules.mutate.targets.context.apiCall.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextapicallwithdatamixin","title":"fn spec.rules.mutate.targets.context.apiCall.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextapicallwithjmespath","title":"fn spec.rules.mutate.targets.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response for the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextapicallwithmethod","title":"fn spec.rules.mutate.targets.context.apiCall.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is the HTTP request type (GET or POST).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextapicallwithurlpath","title":"fn spec.rules.mutate.targets.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutatetargetscontextapicalldata","title":"obj spec.rules.mutate.targets.context.apiCall.data","text":"<p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextapicalldatawithkey","title":"fn spec.rules.mutate.targets.context.apiCall.data.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is a unique identifier for the data value\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextapicalldatawithvalue","title":"fn spec.rules.mutate.targets.context.apiCall.data.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the data value\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutatetargetscontextapicallservice","title":"obj spec.rules.mutate.targets.context.apiCall.service","text":"<p>\"Service is an API call to a JSON web service\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextapicallservicewithcabundle","title":"fn spec.rules.mutate.targets.context.apiCall.service.withCaBundle","text":"<pre><code>withCaBundle(caBundle)\n</code></pre> <p>\"CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextapicallservicewithurl","title":"fn spec.rules.mutate.targets.context.apiCall.service.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the JSON web service URL. A typical form is <code>https://{service}.{namespace}:{port}/{path}</code>.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutatetargetscontextconfigmap","title":"obj spec.rules.mutate.targets.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextconfigmapwithname","title":"fn spec.rules.mutate.targets.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextconfigmapwithnamespace","title":"fn spec.rules.mutate.targets.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutatetargetscontextimageregistry","title":"obj spec.rules.mutate.targets.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextimageregistrywithjmespath","title":"fn spec.rules.mutate.targets.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextimageregistrywithreference","title":"fn spec.rules.mutate.targets.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutatetargetscontextimageregistryimageregistrycredentials","title":"obj spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextimageregistryimageregistrycredentialswithallowinsecureregistry","title":"fn spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextimageregistryimageregistrycredentialswithproviders","title":"fn spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextimageregistryimageregistrycredentialswithprovidersmixin","title":"fn spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextimageregistryimageregistrycredentialswithsecrets","title":"fn spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextimageregistryimageregistrycredentialswithsecretsmixin","title":"fn spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutatetargetscontextvariable","title":"obj spec.rules.mutate.targets.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextvariablewithdefault","title":"fn spec.rules.mutate.targets.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextvariablewithjmespath","title":"fn spec.rules.mutate.targets.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetscontextvariablewithvalue","title":"fn spec.rules.mutate.targets.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulespreconditions","title":"obj spec.rules.preconditions","text":"<p>\"Preconditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionswithall","title":"fn spec.rules.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionswithallmixin","title":"fn spec.rules.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionswithany","title":"fn spec.rules.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionswithanymixin","title":"fn spec.rules.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulespreconditionsall","title":"obj spec.rules.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionsallwithkey","title":"fn spec.rules.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionsallwithmessage","title":"fn spec.rules.preconditions.all.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionsallwithoperator","title":"fn spec.rules.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionsallwithvalue","title":"fn spec.rules.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulespreconditionsany","title":"obj spec.rules.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionsanywithkey","title":"fn spec.rules.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionsanywithmessage","title":"fn spec.rules.preconditions.any.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionsanywithoperator","title":"fn spec.rules.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionsanywithvalue","title":"fn spec.rules.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidate","title":"obj spec.rules.validate","text":"<p>\"Validation is used to validate matching resources.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatewithanypattern","title":"fn spec.rules.validate.withAnyPattern","text":"<pre><code>withAnyPattern(anyPattern)\n</code></pre> <p>\"AnyPattern specifies list of validation patterns. At least one of the patterns must be satisfied for the validation rule to succeed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatewithforeach","title":"fn spec.rules.validate.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatewithforeachmixin","title":"fn spec.rules.validate.withForeachMixin","text":"<pre><code>withForeachMixin(foreach)\n</code></pre> <p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatewithmessage","title":"fn spec.rules.validate.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message specifies a custom message to be displayed on failure.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatewithpattern","title":"fn spec.rules.validate.withPattern","text":"<pre><code>withPattern(pattern)\n</code></pre> <p>\"Pattern specifies an overlay-style pattern used to check resources.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatecel","title":"obj spec.rules.validate.cel","text":"<p>\"CEL allows validation checks using the Common Expression Language (https://kubernetes.io/docs/reference/using-api/cel/).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelwithauditannotations","title":"fn spec.rules.validate.cel.withAuditAnnotations","text":"<pre><code>withAuditAnnotations(auditAnnotations)\n</code></pre> <p>\"AuditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelwithauditannotationsmixin","title":"fn spec.rules.validate.cel.withAuditAnnotationsMixin","text":"<pre><code>withAuditAnnotationsMixin(auditAnnotations)\n</code></pre> <p>\"AuditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelwithexpressions","title":"fn spec.rules.validate.cel.withExpressions","text":"<pre><code>withExpressions(expressions)\n</code></pre> <p>\"Expressions is a list of CELExpression types.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelwithexpressionsmixin","title":"fn spec.rules.validate.cel.withExpressionsMixin","text":"<pre><code>withExpressionsMixin(expressions)\n</code></pre> <p>\"Expressions is a list of CELExpression types.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelwithvariables","title":"fn spec.rules.validate.cel.withVariables","text":"<pre><code>withVariables(variables)\n</code></pre> <p>\"Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under <code>variables</code> in other expressions of the policy.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelwithvariablesmixin","title":"fn spec.rules.validate.cel.withVariablesMixin","text":"<pre><code>withVariablesMixin(variables)\n</code></pre> <p>\"Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under <code>variables</code> in other expressions of the policy.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatecelauditannotations","title":"obj spec.rules.validate.cel.auditAnnotations","text":"<p>\"AuditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelauditannotationswithkey","title":"fn spec.rules.validate.cel.auditAnnotations.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key specifies the audit annotation key. The audit annotation keys of a ValidatingAdmissionPolicy must be unique. The key must be a qualified name ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length. \\n The key is combined with the resource name of the ValidatingAdmissionPolicy to construct an audit annotation key: \\\"{ValidatingAdmissionPolicy name}/{key}\\\". \\n If an admission webhook uses the same resource name as this ValidatingAdmissionPolicy and the same audit annotation key, the annotation key will be identical. In this case, the first annotation written with the key will be included in the audit event and all subsequent annotations with the same key will be discarded. \\n Required.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelauditannotationswithvalueexpression","title":"fn spec.rules.validate.cel.auditAnnotations.withValueExpression","text":"<pre><code>withValueExpression(valueExpression)\n</code></pre> <p>\"valueExpression represents the expression which is evaluated by CEL to produce an audit annotation value. The expression must evaluate to either a string or null value. If the expression evaluates to a string, the audit annotation is included with the string value. If the expression evaluates to null or empty string the audit annotation will be omitted. The valueExpression may be no longer than 5kb in length. If the result of the valueExpression is more than 10kb in length, it will be truncated to 10kb. \\n If multiple ValidatingAdmissionPolicyBinding resources match an API request, then the valueExpression will be evaluated for each binding. All unique values produced by the valueExpressions will be joined together in a comma-separated list. \\n Required.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatecelexpressions","title":"obj spec.rules.validate.cel.expressions","text":"<p>\"Expressions is a list of CELExpression types.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelexpressionswithexpression","title":"fn spec.rules.validate.cel.expressions.withExpression","text":"<pre><code>withExpression(expression)\n</code></pre> <p>\"Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables: \\n - 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request(ref). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value. For example, a variable named 'foo' can be accessed as 'variables.foo'. - 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request. See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the request resource. \\n The <code>apiVersion</code>, <code>kind</code>, <code>metadata.name</code> and <code>metadata.generateName</code> are always accessible from the root of the object. No other metadata properties are accessible. \\n Only property names of the form <code>[a-zA-Z_.-/][a-zA-Z0-9_.-/]*</code> are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '' escapes to '__underscores' - '.' escapes to 'dot' - '-' escapes to 'dash' - '/' escapes to 'slash' - Property names that exactly match a CEL RESERVED keyword escape to '{keyword}'. The keywords are: \\\"true\\\", \\\"false\\\", \\\"null\\\", \\\"in\\\", \\\"as\\\", \\\"break\\\", \\\"const\\\", \\\"continue\\\", \\\"else\\\", \\\"for\\\", \\\"function\\\", \\\"if\\\", \\\"import\\\", \\\"let\\\", \\\"loop\\\", \\\"package\\\", \\\"namespace\\\", \\\"return\\\". Examples: - Expression accessing a property named \\\"namespace\\\": {\\\"Expression\\\": \\\"object.namespace &gt; 0\\\"} - Expression accessing a property named \\\"x-prop\\\": {\\\"Expression\\\": \\\"object.x__dash__prop &gt; 0\\\"} - Expression accessing a property named \\\"redact__d\\\": {\\\"Expression\\\": \\\"object.redact__underscores__d &gt; 0\\\"} \\n Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type: - 'set': <code>X + Y</code> performs a union where the array positions of all elements in <code>X</code> are preserved and non-intersecting elements in <code>Y</code> are appended, retaining their partial order. - 'map': <code>X + Y</code> performs a merge where the array positions of all keys in <code>X</code> are preserved but the values are overwritten by values in <code>Y</code> when the key sets of <code>X</code> and <code>Y</code> intersect. Elements in <code>Y</code> with non-intersecting keys are appended, retaining their partial order. Required.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelexpressionswithmessage","title":"fn spec.rules.validate.cel.expressions.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is \\\"failed rule: {Rule}\\\". e.g. \\\"must be a URL with the host matching spec.host\\\" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is \\\"failed Expression: {Expression}\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelexpressionswithmessageexpression","title":"fn spec.rules.validate.cel.expressions.withMessageExpression","text":"<pre><code>withMessageExpression(messageExpression)\n</code></pre> <p>\"messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a validation, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the <code>expression</code> except for 'authorizer' and 'authorizer.requestResource'. Example: \\\"object.x must be less than max (\\\"+string(params.max)+\\\")\\</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelexpressionswithreason","title":"fn spec.rules.validate.cel.expressions.withReason","text":"<pre><code>withReason(reason)\n</code></pre> <p>\"Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: \\\"Unauthorized\\\", \\\"Forbidden\\\", \\\"Invalid\\\", \\\"RequestEntityTooLarge\\\". If not set, StatusReasonInvalid is used in the response to the client.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatecelparamkind","title":"obj spec.rules.validate.cel.paramKind","text":"<p>\"ParamKind is a tuple of Group Kind and Version.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelparamkindwithapiversion","title":"fn spec.rules.validate.cel.paramKind.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the API group version the resources belong to. In format of \\\"group/version\\\". Required.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelparamkindwithkind","title":"fn spec.rules.validate.cel.paramKind.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the API kind the resources belong to. Required.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatecelparamref","title":"obj spec.rules.validate.cel.paramRef","text":"<p>\"ParamRef references a parameter resource.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelparamrefwithname","title":"fn spec.rules.validate.cel.paramRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"<code>name</code> is the name of the resource being referenced. \\n <code>name</code> and <code>selector</code> are mutually exclusive properties. If one is set, the other must be unset.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelparamrefwithnamespace","title":"fn spec.rules.validate.cel.paramRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"namespace is the namespace of the referenced resource. Allows limiting the search for params to a specific namespace. Applies to both <code>name</code> and <code>selector</code> fields. \\n A per-namespace parameter may be used by specifying a namespace-scoped <code>paramKind</code> in the policy and leaving this field empty. \\n - If <code>paramKind</code> is cluster-scoped, this field MUST be unset. Setting this field results in a configuration error. \\n - If <code>paramKind</code> is namespace-scoped, the namespace of the object being evaluated for admission will be used when this field is left unset. Take care that if this is left empty the binding must not match any cluster-scoped resources, which will result in an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelparamrefwithparameternotfoundaction","title":"fn spec.rules.validate.cel.paramRef.withParameterNotFoundAction","text":"<pre><code>withParameterNotFoundAction(parameterNotFoundAction)\n</code></pre> <p>\"<code>parameterNotFoundAction</code> controls the behavior of the binding when the resource exists, and name or selector is valid, but there are no parameters matched by the binding. If the value is set to <code>Allow</code>, then no matched parameters will be treated as successful validation by the binding. If set to <code>Deny</code>, then no matched parameters will be subject to the <code>failurePolicy</code> of the policy. \\n Allowed values are <code>Allow</code> or <code>Deny</code> Default to <code>Deny</code>\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatecelparamrefselector","title":"obj spec.rules.validate.cel.paramRef.selector","text":"<p>\"selector can be used to match multiple param objects based on their labels. Supply selector: {} to match all resources of the ParamKind. \\n If multiple params are found, they are all evaluated with the policy expressions and the results are ANDed together. \\n One of <code>name</code> or <code>selector</code> must be set, but <code>name</code> and <code>selector</code> are mutually exclusive properties. If one is set, the other must be unset.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelparamrefselectorwithmatchexpressions","title":"fn spec.rules.validate.cel.paramRef.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelparamrefselectorwithmatchexpressionsmixin","title":"fn spec.rules.validate.cel.paramRef.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelparamrefselectorwithmatchlabels","title":"fn spec.rules.validate.cel.paramRef.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelparamrefselectorwithmatchlabelsmixin","title":"fn spec.rules.validate.cel.paramRef.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatecelparamrefselectormatchexpressions","title":"obj spec.rules.validate.cel.paramRef.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelparamrefselectormatchexpressionswithkey","title":"fn spec.rules.validate.cel.paramRef.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelparamrefselectormatchexpressionswithoperator","title":"fn spec.rules.validate.cel.paramRef.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelparamrefselectormatchexpressionswithvalues","title":"fn spec.rules.validate.cel.paramRef.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelparamrefselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.validate.cel.paramRef.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatecelvariables","title":"obj spec.rules.validate.cel.variables","text":"<p>\"Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under <code>variables</code> in other expressions of the policy.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelvariableswithexpression","title":"fn spec.rules.validate.cel.variables.withExpression","text":"<pre><code>withExpression(expression)\n</code></pre> <p>\"Expression is the expression that will be evaluated as the value of the variable. The CEL expression has access to the same identifiers as the CEL expressions in Validation.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatecelvariableswithname","title":"fn spec.rules.validate.cel.variables.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables. The variable can be accessed in other expressions through <code>variables</code> For example, if name is \\\"foo\\\", the variable will be available as <code>variables.foo</code>\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatedeny","title":"obj spec.rules.validate.deny","text":"<p>\"Deny defines conditions used to pass or fail a validation rule.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatedenyconditions","title":"obj spec.rules.validate.deny.conditions","text":"<p>\"Multiple conditions can be declared under an <code>any</code> or <code>all</code> statement. See: https://kyverno.io/docs/writing-policies/validate/#deny-rules\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionswithall","title":"fn spec.rules.validate.deny.conditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionswithallmixin","title":"fn spec.rules.validate.deny.conditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionswithany","title":"fn spec.rules.validate.deny.conditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionswithanymixin","title":"fn spec.rules.validate.deny.conditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatedenyconditionsall","title":"obj spec.rules.validate.deny.conditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionsallwithkey","title":"fn spec.rules.validate.deny.conditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionsallwithmessage","title":"fn spec.rules.validate.deny.conditions.all.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionsallwithoperator","title":"fn spec.rules.validate.deny.conditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionsallwithvalue","title":"fn spec.rules.validate.deny.conditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatedenyconditionsany","title":"obj spec.rules.validate.deny.conditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionsanywithkey","title":"fn spec.rules.validate.deny.conditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionsanywithmessage","title":"fn spec.rules.validate.deny.conditions.any.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionsanywithoperator","title":"fn spec.rules.validate.deny.conditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionsanywithvalue","title":"fn spec.rules.validate.deny.conditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeach","title":"obj spec.rules.validate.foreach","text":"<p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachwithanypattern","title":"fn spec.rules.validate.foreach.withAnyPattern","text":"<pre><code>withAnyPattern(anyPattern)\n</code></pre> <p>\"AnyPattern specifies list of validation patterns. At least one of the patterns must be satisfied for the validation rule to succeed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachwithcontext","title":"fn spec.rules.validate.foreach.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachwithcontextmixin","title":"fn spec.rules.validate.foreach.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachwithelementscope","title":"fn spec.rules.validate.foreach.withElementScope","text":"<pre><code>withElementScope(elementScope)\n</code></pre> <p>\"ElementScope specifies whether to use the current list element as the scope for validation. Defaults to \\\"true\\\" if not specified. When set to \\\"false\\\", \\\"request.object\\\" is used as the validation scope within the foreach block to allow referencing other elements in the subtree.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachwithforeach","title":"fn spec.rules.validate.foreach.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"Foreach declares a nested foreach iterator\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachwithlist","title":"fn spec.rules.validate.foreach.withList","text":"<pre><code>withList(list)\n</code></pre> <p>\"List specifies a JMESPath expression that results in one or more elements to which the validation logic is applied.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachwithpattern","title":"fn spec.rules.validate.foreach.withPattern","text":"<pre><code>withPattern(pattern)\n</code></pre> <p>\"Pattern specifies an overlay-style pattern used to check resources.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachcontext","title":"obj spec.rules.validate.foreach.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextwithname","title":"fn spec.rules.validate.foreach.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachcontextapicall","title":"obj spec.rules.validate.foreach.context.apiCall","text":"<p>\"APICall is an HTTP request to the Kubernetes API server, or other JSON web service. The data returned is stored in the context with the name for the context entry.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicallwithdata","title":"fn spec.rules.validate.foreach.context.apiCall.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicallwithdatamixin","title":"fn spec.rules.validate.foreach.context.apiCall.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicallwithjmespath","title":"fn spec.rules.validate.foreach.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response for the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicallwithmethod","title":"fn spec.rules.validate.foreach.context.apiCall.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is the HTTP request type (GET or POST).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicallwithurlpath","title":"fn spec.rules.validate.foreach.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachcontextapicalldata","title":"obj spec.rules.validate.foreach.context.apiCall.data","text":"<p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicalldatawithkey","title":"fn spec.rules.validate.foreach.context.apiCall.data.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is a unique identifier for the data value\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicalldatawithvalue","title":"fn spec.rules.validate.foreach.context.apiCall.data.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the data value\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachcontextapicallservice","title":"obj spec.rules.validate.foreach.context.apiCall.service","text":"<p>\"Service is an API call to a JSON web service\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicallservicewithcabundle","title":"fn spec.rules.validate.foreach.context.apiCall.service.withCaBundle","text":"<pre><code>withCaBundle(caBundle)\n</code></pre> <p>\"CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicallservicewithurl","title":"fn spec.rules.validate.foreach.context.apiCall.service.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the JSON web service URL. A typical form is <code>https://{service}.{namespace}:{port}/{path}</code>.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachcontextconfigmap","title":"obj spec.rules.validate.foreach.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextconfigmapwithname","title":"fn spec.rules.validate.foreach.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextconfigmapwithnamespace","title":"fn spec.rules.validate.foreach.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachcontextimageregistry","title":"obj spec.rules.validate.foreach.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextimageregistrywithjmespath","title":"fn spec.rules.validate.foreach.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextimageregistrywithreference","title":"fn spec.rules.validate.foreach.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachcontextimageregistryimageregistrycredentials","title":"obj spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextimageregistryimageregistrycredentialswithallowinsecureregistry","title":"fn spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextimageregistryimageregistrycredentialswithproviders","title":"fn spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextimageregistryimageregistrycredentialswithprovidersmixin","title":"fn spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextimageregistryimageregistrycredentialswithsecrets","title":"fn spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextimageregistryimageregistrycredentialswithsecretsmixin","title":"fn spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachcontextvariable","title":"obj spec.rules.validate.foreach.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextvariablewithdefault","title":"fn spec.rules.validate.foreach.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextvariablewithjmespath","title":"fn spec.rules.validate.foreach.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextvariablewithvalue","title":"fn spec.rules.validate.foreach.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachdeny","title":"obj spec.rules.validate.foreach.deny","text":"<p>\"Deny defines conditions used to pass or fail a validation rule.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachdenywithconditions","title":"fn spec.rules.validate.foreach.deny.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Multiple conditions can be declared under an <code>any</code> or <code>all</code> statement. A direct list of conditions (without <code>any</code> or <code>all</code> statements) is also supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/validate/#deny-rules\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachpreconditions","title":"obj spec.rules.validate.foreach.preconditions","text":"<p>\"AnyAllConditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionswithall","title":"fn spec.rules.validate.foreach.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionswithallmixin","title":"fn spec.rules.validate.foreach.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionswithany","title":"fn spec.rules.validate.foreach.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionswithanymixin","title":"fn spec.rules.validate.foreach.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachpreconditionsall","title":"obj spec.rules.validate.foreach.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsallwithkey","title":"fn spec.rules.validate.foreach.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsallwithmessage","title":"fn spec.rules.validate.foreach.preconditions.all.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsallwithoperator","title":"fn spec.rules.validate.foreach.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsallwithvalue","title":"fn spec.rules.validate.foreach.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachpreconditionsany","title":"obj spec.rules.validate.foreach.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsanywithkey","title":"fn spec.rules.validate.foreach.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsanywithmessage","title":"fn spec.rules.validate.foreach.preconditions.any.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsanywithoperator","title":"fn spec.rules.validate.foreach.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsanywithvalue","title":"fn spec.rules.validate.foreach.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifests","title":"obj spec.rules.validate.manifests","text":"<p>\"Manifest specifies conditions for manifest verification\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestswithannotationdomain","title":"fn spec.rules.validate.manifests.withAnnotationDomain","text":"<pre><code>withAnnotationDomain(annotationDomain)\n</code></pre> <p>\"AnnotationDomain is custom domain of annotation for message and signature. Default is \\\"cosign.sigstore.dev\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestswithattestors","title":"fn spec.rules.validate.manifests.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestswithattestorsmixin","title":"fn spec.rules.validate.manifests.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestswithignorefields","title":"fn spec.rules.validate.manifests.withIgnoreFields","text":"<pre><code>withIgnoreFields(ignoreFields)\n</code></pre> <p>\"Fields which will be ignored while comparing manifests.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestswithignorefieldsmixin","title":"fn spec.rules.validate.manifests.withIgnoreFieldsMixin","text":"<pre><code>withIgnoreFieldsMixin(ignoreFields)\n</code></pre> <p>\"Fields which will be ignored while comparing manifests.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestswithrepository","title":"fn spec.rules.validate.manifests.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for resource bundle reference. The repository can be overridden per Attestor or Attestation.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestors","title":"obj spec.rules.validate.manifests.attestors","text":"<p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorswithcount","title":"fn spec.rules.validate.manifests.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorswithentries","title":"fn spec.rules.validate.manifests.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorswithentriesmixin","title":"fn spec.rules.validate.manifests.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentries","title":"obj spec.rules.validate.manifests.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieswithannotations","title":"fn spec.rules.validate.manifests.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieswithannotationsmixin","title":"fn spec.rules.validate.manifests.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieswithattestor","title":"fn spec.rules.validate.manifests.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested set of Attestor used to specify a more complex set of match authorities.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieswithrepository","title":"fn spec.rules.validate.manifests.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentriescertificates","title":"obj spec.rules.validate.manifests.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentriescertificateswithcert","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Cert is an optional PEM-encoded public certificate.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentriescertificateswithcertchain","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertChain is an optional PEM encoded set of certificates used to verify.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentriescertificatesctlog","title":"obj spec.rules.validate.manifests.attestors.entries.certificates.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesctlogwithignoresct","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesctlogwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentriescertificatesrekor","title":"obj spec.rules.validate.manifests.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesrekorwithignoretlog","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesrekorwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeyless","title":"obj spec.rules.validate.manifests.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithissuer","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithroots","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithsubject","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeylessctlog","title":"obj spec.rules.validate.manifests.attestors.entries.keyless.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessctlogwithignoresct","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessctlogwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeylessrekor","title":"obj spec.rules.validate.manifests.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessrekorwithignoretlog","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessrekorwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeys","title":"obj spec.rules.validate.manifests.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithkms","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithpublickeys","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeysctlog","title":"obj spec.rules.validate.manifests.attestors.entries.keys.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeysctlogwithignoresct","title":"fn spec.rules.validate.manifests.attestors.entries.keys.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeysctlogwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.keys.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeysrekor","title":"obj spec.rules.validate.manifests.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeysrekorwithignoretlog","title":"fn spec.rules.validate.manifests.attestors.entries.keys.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeysrekorwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.keys.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeysrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeyssecret","title":"obj spec.rules.validate.manifests.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeyssecretwithname","title":"fn spec.rules.validate.manifests.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.validate.manifests.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsdryrun","title":"obj spec.rules.validate.manifests.dryRun","text":"<p>\"DryRun configuration\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsdryrunwithenable","title":"fn spec.rules.validate.manifests.dryRun.withEnable","text":"<pre><code>withEnable(enable)\n</code></pre>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsdryrunwithnamespace","title":"fn spec.rules.validate.manifests.dryRun.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsignorefields","title":"obj spec.rules.validate.manifests.ignoreFields","text":"<p>\"Fields which will be ignored while comparing manifests.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldswithfields","title":"fn spec.rules.validate.manifests.ignoreFields.withFields","text":"<pre><code>withFields(fields)\n</code></pre>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldswithfieldsmixin","title":"fn spec.rules.validate.manifests.ignoreFields.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldswithobjects","title":"fn spec.rules.validate.manifests.ignoreFields.withObjects","text":"<pre><code>withObjects(objects)\n</code></pre>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldswithobjectsmixin","title":"fn spec.rules.validate.manifests.ignoreFields.withObjectsMixin","text":"<pre><code>withObjectsMixin(objects)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsignorefieldsobjects","title":"obj spec.rules.validate.manifests.ignoreFields.objects","text":""},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithgroup","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withGroup","text":"<pre><code>withGroup(group)\n</code></pre>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithkind","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithname","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithnamespace","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithversion","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withVersion","text":"<pre><code>withVersion(version)\n</code></pre>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatepodsecurity","title":"obj spec.rules.validate.podSecurity","text":"<p>\"PodSecurity applies exemptions for Kubernetes Pod Security admission by specifying exclusions for Pod Security Standards controls.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatepodsecuritywithexclude","title":"fn spec.rules.validate.podSecurity.withExclude","text":"<pre><code>withExclude(exclude)\n</code></pre> <p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatepodsecuritywithexcludemixin","title":"fn spec.rules.validate.podSecurity.withExcludeMixin","text":"<pre><code>withExcludeMixin(exclude)\n</code></pre> <p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatepodsecuritywithlevel","title":"fn spec.rules.validate.podSecurity.withLevel","text":"<pre><code>withLevel(level)\n</code></pre> <p>\"Level defines the Pod Security Standard level to be applied to workloads. Allowed values are privileged, baseline, and restricted.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatepodsecuritywithversion","title":"fn spec.rules.validate.podSecurity.withVersion","text":"<pre><code>withVersion(version)\n</code></pre> <p>\"Version defines the Pod Security Standard versions that Kubernetes supports. Allowed values are v1.19, v1.20, v1.21, v1.22, v1.23, v1.24, v1.25, v1.26, latest. Defaults to latest.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatepodsecurityexclude","title":"obj spec.rules.validate.podSecurity.exclude","text":"<p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatepodsecurityexcludewithcontrolname","title":"fn spec.rules.validate.podSecurity.exclude.withControlName","text":"<pre><code>withControlName(controlName)\n</code></pre> <p>\"ControlName specifies the name of the Pod Security Standard control. See: https://kubernetes.io/docs/concepts/security/pod-security-standards/\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatepodsecurityexcludewithimages","title":"fn spec.rules.validate.podSecurity.exclude.withImages","text":"<pre><code>withImages(images)\n</code></pre> <p>\"Images selects matching containers and applies the container level PSS. Each image is the image name consisting of the registry address, repository, image, and tag. Empty list matches no containers, PSS checks are applied at the pod level only. Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatepodsecurityexcludewithimagesmixin","title":"fn spec.rules.validate.podSecurity.exclude.withImagesMixin","text":"<pre><code>withImagesMixin(images)\n</code></pre> <p>\"Images selects matching containers and applies the container level PSS. Each image is the image name consisting of the registry address, repository, image, and tag. Empty list matches no containers, PSS checks are applied at the pod level only. Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimages","title":"obj spec.rules.verifyImages","text":"<p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithattestations","title":"fn spec.rules.verifyImages.withAttestations","text":"<pre><code>withAttestations(attestations)\n</code></pre> <p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithattestationsmixin","title":"fn spec.rules.verifyImages.withAttestationsMixin","text":"<pre><code>withAttestationsMixin(attestations)\n</code></pre> <p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithattestors","title":"fn spec.rules.verifyImages.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithattestorsmixin","title":"fn spec.rules.verifyImages.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithimagereferences","title":"fn spec.rules.verifyImages.withImageReferences","text":"<pre><code>withImageReferences(imageReferences)\n</code></pre> <p>\"ImageReferences is a list of matching image reference patterns. At least one pattern in the list must match the image for the rule to apply. Each image reference consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest). Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithimagereferencesmixin","title":"fn spec.rules.verifyImages.withImageReferencesMixin","text":"<pre><code>withImageReferencesMixin(imageReferences)\n</code></pre> <p>\"ImageReferences is a list of matching image reference patterns. At least one pattern in the list must match the image for the rule to apply. Each image reference consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest). Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithmutatedigest","title":"fn spec.rules.verifyImages.withMutateDigest","text":"<pre><code>withMutateDigest(mutateDigest)\n</code></pre> <p>\"MutateDigest enables replacement of image tags with digests. Defaults to true.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithrepository","title":"fn spec.rules.verifyImages.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule. If specified Repository will override the default OCI image repository configured for the installation. The repository can also be overridden per Attestor or Attestation.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithrequired","title":"fn spec.rules.verifyImages.withRequired","text":"<pre><code>withRequired(required)\n</code></pre> <p>\"Required validates that images are verified i.e. have matched passed a signature or attestation check.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithtype","title":"fn spec.rules.verifyImages.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies the method of signature validation. The allowed options are Cosign and Notary. By default Cosign is used if a type is not specified.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithusecache","title":"fn spec.rules.verifyImages.withUseCache","text":"<pre><code>withUseCache(useCache)\n</code></pre> <p>\"UseCache enables caching of image verify responses for this rule\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithverifydigest","title":"fn spec.rules.verifyImages.withVerifyDigest","text":"<pre><code>withVerifyDigest(verifyDigest)\n</code></pre> <p>\"VerifyDigest validates that images have a digest.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestations","title":"obj spec.rules.verifyImages.attestations","text":"<p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationswithattestors","title":"fn spec.rules.verifyImages.attestations.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specify the required attestors (i.e. authorities).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationswithattestorsmixin","title":"fn spec.rules.verifyImages.attestations.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specify the required attestors (i.e. authorities).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationswithconditions","title":"fn spec.rules.verifyImages.attestations.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationswithconditionsmixin","title":"fn spec.rules.verifyImages.attestations.withConditionsMixin","text":"<pre><code>withConditionsMixin(conditions)\n</code></pre> <p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationswithpredicatetype","title":"fn spec.rules.verifyImages.attestations.withPredicateType","text":"<pre><code>withPredicateType(predicateType)\n</code></pre> <p>\"Deprecated in favour of 'Type', to be removed soon\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationswithtype","title":"fn spec.rules.verifyImages.attestations.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of attestation contained within the Statement.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestors","title":"obj spec.rules.verifyImages.attestations.attestors","text":"<p>\"Attestors specify the required attestors (i.e. authorities).\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorswithcount","title":"fn spec.rules.verifyImages.attestations.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorswithentries","title":"fn spec.rules.verifyImages.attestations.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorswithentriesmixin","title":"fn spec.rules.verifyImages.attestations.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentries","title":"obj spec.rules.verifyImages.attestations.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieswithannotations","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieswithannotationsmixin","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieswithattestor","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested set of Attestor used to specify a more complex set of match authorities.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieswithrepository","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentriescertificates","title":"obj spec.rules.verifyImages.attestations.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentriescertificateswithcert","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Cert is an optional PEM-encoded public certificate.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentriescertificateswithcertchain","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertChain is an optional PEM encoded set of certificates used to verify.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentriescertificatesctlog","title":"obj spec.rules.verifyImages.attestations.attestors.entries.certificates.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesctlogwithignoresct","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesctlogwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentriescertificatesrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesrekorwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeyless","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithissuer","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithroots","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithsubject","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeylessctlog","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keyless.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessctlogwithignoresct","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessctlogwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeylessrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessrekorwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeys","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithkms","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithpublickeys","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeysctlog","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysctlogwithignoresct","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysctlogwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeysrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysrekorwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeyssecret","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyssecretwithname","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsconditions","title":"obj spec.rules.verifyImages.attestations.conditions","text":"<p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionswithall","title":"fn spec.rules.verifyImages.attestations.conditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionswithallmixin","title":"fn spec.rules.verifyImages.attestations.conditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionswithany","title":"fn spec.rules.verifyImages.attestations.conditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionswithanymixin","title":"fn spec.rules.verifyImages.attestations.conditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsconditionsall","title":"obj spec.rules.verifyImages.attestations.conditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsallwithkey","title":"fn spec.rules.verifyImages.attestations.conditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsallwithmessage","title":"fn spec.rules.verifyImages.attestations.conditions.all.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsallwithoperator","title":"fn spec.rules.verifyImages.attestations.conditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsallwithvalue","title":"fn spec.rules.verifyImages.attestations.conditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsconditionsany","title":"obj spec.rules.verifyImages.attestations.conditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsanywithkey","title":"fn spec.rules.verifyImages.attestations.conditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsanywithmessage","title":"fn spec.rules.verifyImages.attestations.conditions.any.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsanywithoperator","title":"fn spec.rules.verifyImages.attestations.conditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsanywithvalue","title":"fn spec.rules.verifyImages.attestations.conditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestors","title":"obj spec.rules.verifyImages.attestors","text":"<p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorswithcount","title":"fn spec.rules.verifyImages.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorswithentries","title":"fn spec.rules.verifyImages.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorswithentriesmixin","title":"fn spec.rules.verifyImages.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestorsentries","title":"obj spec.rules.verifyImages.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieswithannotations","title":"fn spec.rules.verifyImages.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieswithannotationsmixin","title":"fn spec.rules.verifyImages.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieswithattestor","title":"fn spec.rules.verifyImages.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested set of Attestor used to specify a more complex set of match authorities.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieswithrepository","title":"fn spec.rules.verifyImages.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestorsentriescertificates","title":"obj spec.rules.verifyImages.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentriescertificateswithcert","title":"fn spec.rules.verifyImages.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Cert is an optional PEM-encoded public certificate.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentriescertificateswithcertchain","title":"fn spec.rules.verifyImages.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertChain is an optional PEM encoded set of certificates used to verify.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestorsentriescertificatesctlog","title":"obj spec.rules.verifyImages.attestors.entries.certificates.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentriescertificatesctlogwithignoresct","title":"fn spec.rules.verifyImages.attestors.entries.certificates.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentriescertificatesctlogwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.certificates.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestorsentriescertificatesrekor","title":"obj spec.rules.verifyImages.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentriescertificatesrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestors.entries.certificates.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentriescertificatesrekorwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.certificates.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeyless","title":"obj spec.rules.verifyImages.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylesswithissuer","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylesswithroots","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylesswithsubject","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeylessctlog","title":"obj spec.rules.verifyImages.attestors.entries.keyless.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylessctlogwithignoresct","title":"fn spec.rules.verifyImages.attestors.entries.keyless.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylessctlogwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.keyless.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeylessrekor","title":"obj spec.rules.verifyImages.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylessrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestors.entries.keyless.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylessrekorwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.keyless.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeys","title":"obj spec.rules.verifyImages.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeyswithkms","title":"fn spec.rules.verifyImages.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeyswithpublickeys","title":"fn spec.rules.verifyImages.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.verifyImages.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeysctlog","title":"obj spec.rules.verifyImages.attestors.entries.keys.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeysctlogwithignoresct","title":"fn spec.rules.verifyImages.attestors.entries.keys.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeysctlogwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.keys.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeysrekor","title":"obj spec.rules.verifyImages.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeysrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestors.entries.keys.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeysrekorwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.keys.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeysrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeyssecret","title":"obj spec.rules.verifyImages.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeyssecretwithname","title":"fn spec.rules.verifyImages.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.verifyImages.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesimageregistrycredentials","title":"obj spec.rules.verifyImages.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesimageregistrycredentialswithallowinsecureregistry","title":"fn spec.rules.verifyImages.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesimageregistrycredentialswithproviders","title":"fn spec.rules.verifyImages.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesimageregistrycredentialswithprovidersmixin","title":"fn spec.rules.verifyImages.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesimageregistrycredentialswithsecrets","title":"fn spec.rules.verifyImages.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesimageregistrycredentialswithsecretsmixin","title":"fn spec.rules.verifyImages.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specvalidationfailureactionoverrides","title":"obj spec.validationFailureActionOverrides","text":"<p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specvalidationfailureactionoverrideswithaction","title":"fn spec.validationFailureActionOverrides.withAction","text":"<pre><code>withAction(action)\n</code></pre> <p>\"ValidationFailureAction defines the policy validation failure action\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specvalidationfailureactionoverrideswithnamespaces","title":"fn spec.validationFailureActionOverrides.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specvalidationfailureactionoverrideswithnamespacesmixin","title":"fn spec.validationFailureActionOverrides.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specvalidationfailureactionoverridesnamespaceselector","title":"obj spec.validationFailureActionOverrides.namespaceSelector","text":"<p>\"A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specvalidationfailureactionoverridesnamespaceselectorwithmatchexpressions","title":"fn spec.validationFailureActionOverrides.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specvalidationfailureactionoverridesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.validationFailureActionOverrides.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specvalidationfailureactionoverridesnamespaceselectorwithmatchlabels","title":"fn spec.validationFailureActionOverrides.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specvalidationfailureactionoverridesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.validationFailureActionOverrides.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#obj-specvalidationfailureactionoverridesnamespaceselectormatchexpressions","title":"obj spec.validationFailureActionOverrides.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specvalidationfailureactionoverridesnamespaceselectormatchexpressionswithkey","title":"fn spec.validationFailureActionOverrides.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specvalidationfailureactionoverridesnamespaceselectormatchexpressionswithoperator","title":"fn spec.validationFailureActionOverrides.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specvalidationfailureactionoverridesnamespaceselectormatchexpressionswithvalues","title":"fn spec.validationFailureActionOverrides.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/clusterPolicy/#fn-specvalidationfailureactionoverridesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.validationFailureActionOverrides.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/","title":"kyverno.v2beta1.policy","text":"<p>\"Policy declares validation, mutation, and generation behaviors for matching resources. See: https://kyverno.io/docs/writing-policies/ for more information.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAdmission(admission)</code></li> <li><code>fn withApplyRules(applyRules)</code></li> <li><code>fn withBackground(background)</code></li> <li><code>fn withFailurePolicy(failurePolicy)</code></li> <li><code>fn withGenerateExisting(generateExisting)</code></li> <li><code>fn withGenerateExistingOnPolicyUpdate(generateExistingOnPolicyUpdate)</code></li> <li><code>fn withMutateExistingOnPolicyUpdate(mutateExistingOnPolicyUpdate)</code></li> <li><code>fn withRules(rules)</code></li> <li><code>fn withRulesMixin(rules)</code></li> <li><code>fn withSchemaValidation(schemaValidation)</code></li> <li><code>fn withUseServerSideApply(useServerSideApply)</code></li> <li><code>fn withValidationFailureAction(validationFailureAction)</code></li> <li><code>fn withValidationFailureActionOverrides(validationFailureActionOverrides)</code></li> <li><code>fn withValidationFailureActionOverridesMixin(validationFailureActionOverrides)</code></li> <li><code>fn withWebhookTimeoutSeconds(webhookTimeoutSeconds)</code></li> <li><code>obj spec.rules</code><ul> <li><code>fn withCelPreconditions(celPreconditions)</code></li> <li><code>fn withCelPreconditionsMixin(celPreconditions)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withImageExtractors(imageExtractors)</code></li> <li><code>fn withImageExtractorsMixin(imageExtractors)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withVerifyImages(verifyImages)</code></li> <li><code>fn withVerifyImagesMixin(verifyImages)</code></li> <li><code>obj spec.rules.celPreconditions</code><ul> <li><code>fn withExpression(expression)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.rules.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.context.apiCall</code><ul> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> <li><code>obj spec.rules.context.apiCall.data</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.context.apiCall.service</code><ul> <li><code>fn withCaBundle(caBundle)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> <li><code>obj spec.rules.context.imageRegistry.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.exclude.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.rules.exclude.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.rules.exclude.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.generate</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withData(data)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withSynchronize(synchronize)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec.rules.generate.clone</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.generate.cloneList</code><ul> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.rules.generate.cloneList.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.generate.cloneList.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.match.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.rules.match.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.rules.match.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate</code><ul> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withForeachMixin(foreach)</code></li> <li><code>fn withPatchStrategicMerge(patchStrategicMerge)</code></li> <li><code>fn withPatchesJson6902(patchesJson6902)</code></li> <li><code>fn withTargets(targets)</code></li> <li><code>fn withTargetsMixin(targets)</code></li> <li><code>obj spec.rules.mutate.foreach</code><ul> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withList(list)</code></li> <li><code>fn withOrder(order)</code></li> <li><code>fn withPatchStrategicMerge(patchStrategicMerge)</code></li> <li><code>fn withPatchesJson6902(patchesJson6902)</code></li> <li><code>obj spec.rules.mutate.foreach.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.mutate.foreach.context.apiCall</code><ul> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> <li><code>obj spec.rules.mutate.foreach.context.apiCall.data</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.apiCall.service</code><ul> <li><code>fn withCaBundle(caBundle)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> <li><code>obj spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.mutate.foreach.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.targets</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withPreconditions(preconditions)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec.rules.mutate.targets.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.mutate.targets.context.apiCall</code><ul> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> <li><code>obj spec.rules.mutate.targets.context.apiCall.data</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.targets.context.apiCall.service</code><ul> <li><code>fn withCaBundle(caBundle)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.targets.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.targets.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> <li><code>obj spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.targets.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate</code><ul> <li><code>fn withAnyPattern(anyPattern)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withForeachMixin(foreach)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPattern(pattern)</code></li> <li><code>obj spec.rules.validate.cel</code><ul> <li><code>fn withAuditAnnotations(auditAnnotations)</code></li> <li><code>fn withAuditAnnotationsMixin(auditAnnotations)</code></li> <li><code>fn withExpressions(expressions)</code></li> <li><code>fn withExpressionsMixin(expressions)</code></li> <li><code>fn withVariables(variables)</code></li> <li><code>fn withVariablesMixin(variables)</code></li> <li><code>obj spec.rules.validate.cel.auditAnnotations</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValueExpression(valueExpression)</code></li> </ul> </li> <li><code>obj spec.rules.validate.cel.expressions</code><ul> <li><code>fn withExpression(expression)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withMessageExpression(messageExpression)</code></li> <li><code>fn withReason(reason)</code></li> </ul> </li> <li><code>obj spec.rules.validate.cel.paramKind</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> </ul> </li> <li><code>obj spec.rules.validate.cel.paramRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withParameterNotFoundAction(parameterNotFoundAction)</code></li> <li><code>obj spec.rules.validate.cel.paramRef.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.validate.cel.paramRef.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.cel.variables</code><ul> <li><code>fn withExpression(expression)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.deny</code><ul> <li><code>obj spec.rules.validate.deny.conditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.validate.deny.conditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.validate.deny.conditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach</code><ul> <li><code>fn withAnyPattern(anyPattern)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withElementScope(elementScope)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withList(list)</code></li> <li><code>fn withPattern(pattern)</code></li> <li><code>obj spec.rules.validate.foreach.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.validate.foreach.context.apiCall</code><ul> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withMethod(method)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> <li><code>obj spec.rules.validate.foreach.context.apiCall.data</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.apiCall.service</code><ul> <li><code>fn withCaBundle(caBundle)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> <li><code>obj spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach.deny</code><ul> <li><code>fn withConditions(conditions)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.validate.foreach.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests</code><ul> <li><code>fn withAnnotationDomain(annotationDomain)</code></li> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withIgnoreFields(ignoreFields)</code></li> <li><code>fn withIgnoreFieldsMixin(ignoreFields)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.validate.manifests.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.certificates.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.certificates.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keyless.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keyless.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.dryRun</code><ul> <li><code>fn withEnable(enable)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.ignoreFields</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>fn withObjects(objects)</code></li> <li><code>fn withObjectsMixin(objects)</code></li> <li><code>obj spec.rules.validate.manifests.ignoreFields.objects</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withVersion(version)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.podSecurity</code><ul> <li><code>fn withExclude(exclude)</code></li> <li><code>fn withExcludeMixin(exclude)</code></li> <li><code>fn withLevel(level)</code></li> <li><code>fn withVersion(version)</code></li> <li><code>obj spec.rules.validate.podSecurity.exclude</code><ul> <li><code>fn withControlName(controlName)</code></li> <li><code>fn withImages(images)</code></li> <li><code>fn withImagesMixin(images)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages</code><ul> <li><code>fn withAttestations(attestations)</code></li> <li><code>fn withAttestationsMixin(attestations)</code></li> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withImageReferences(imageReferences)</code></li> <li><code>fn withImageReferencesMixin(imageReferences)</code></li> <li><code>fn withMutateDigest(mutateDigest)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>fn withRequired(required)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withUseCache(useCache)</code></li> <li><code>fn withVerifyDigest(verifyDigest)</code></li> <li><code>obj spec.rules.verifyImages.attestations</code><ul> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withConditions(conditions)</code></li> <li><code>fn withConditionsMixin(conditions)</code></li> <li><code>fn withPredicateType(predicateType)</code></li> <li><code>fn withType(type)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.certificates.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keyless.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.conditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.verifyImages.attestations.conditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.conditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.certificates.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.certificates.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.keyless.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keyless.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys.ctlog</code><ul> <li><code>fn withIgnoreSCT(ignoreSCT)</code></li> <li><code>fn withPubkey(pubkey)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys.rekor</code><ul> <li><code>fn withIgnoreTlog(ignoreTlog)</code></li> <li><code>fn withPubkey(pubkey)</code></li> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.imageRegistryCredentials</code><ul> <li><code>fn withAllowInsecureRegistry(allowInsecureRegistry)</code></li> <li><code>fn withProviders(providers)</code></li> <li><code>fn withProvidersMixin(providers)</code></li> <li><code>fn withSecrets(secrets)</code></li> <li><code>fn withSecretsMixin(secrets)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.validationFailureActionOverrides</code><ul> <li><code>fn withAction(action)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.validationFailureActionOverrides.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.validationFailureActionOverrides.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.11/kyverno/v2beta1/policy/#fields","title":"Fields","text":""},{"location":"1.11/kyverno/v2beta1/policy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of Policy</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-spec","title":"obj spec","text":"<p>\"Spec defines policy behaviors and contains one or more rules.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specwithadmission","title":"fn spec.withAdmission","text":"<pre><code>withAdmission(admission)\n</code></pre> <p>\"Admission controls if rules are applied during admission. Optional. Default value is \\\"true\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specwithapplyrules","title":"fn spec.withApplyRules","text":"<pre><code>withApplyRules(applyRules)\n</code></pre> <p>\"ApplyRules controls how rules in a policy are applied. Rule are processed in the order of declaration. When set to <code>One</code> processing stops after a rule has been applied i.e. the rule matches and results in a pass, fail, or error. When set to <code>All</code> all rules in the policy are processed. The default is <code>All</code>.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specwithbackground","title":"fn spec.withBackground","text":"<pre><code>withBackground(background)\n</code></pre> <p>\"Background controls if rules are applied to existing resources during a background scan. Optional. Default value is \\\"true\\\". The value must be set to \\\"false\\\" if the policy rule uses variables that are only available in the admission review request (e.g. user name).\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specwithfailurepolicy","title":"fn spec.withFailurePolicy","text":"<pre><code>withFailurePolicy(failurePolicy)\n</code></pre> <p>\"FailurePolicy defines how unexpected policy errors and webhook response timeout errors are handled. Rules within the same policy share the same failure behavior. Allowed values are Ignore or Fail. Defaults to Fail.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specwithgenerateexisting","title":"fn spec.withGenerateExisting","text":"<pre><code>withGenerateExisting(generateExisting)\n</code></pre> <p>\"GenerateExisting controls whether to trigger generate rule in existing resources If is set to \\\"true\\\" generate rule will be triggered and applied to existing matched resources. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specwithgenerateexistingonpolicyupdate","title":"fn spec.withGenerateExistingOnPolicyUpdate","text":"<pre><code>withGenerateExistingOnPolicyUpdate(generateExistingOnPolicyUpdate)\n</code></pre> <p>\"Deprecated, use generateExisting instead\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specwithmutateexistingonpolicyupdate","title":"fn spec.withMutateExistingOnPolicyUpdate","text":"<pre><code>withMutateExistingOnPolicyUpdate(mutateExistingOnPolicyUpdate)\n</code></pre> <p>\"MutateExistingOnPolicyUpdate controls if a mutateExisting policy is applied on policy events. Default value is \\\"false\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specwithrules","title":"fn spec.withRules","text":"<pre><code>withRules(rules)\n</code></pre> <p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specwithrulesmixin","title":"fn spec.withRulesMixin","text":"<pre><code>withRulesMixin(rules)\n</code></pre> <p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specwithschemavalidation","title":"fn spec.withSchemaValidation","text":"<pre><code>withSchemaValidation(schemaValidation)\n</code></pre> <p>\"SchemaValidation skips validation checks for policies as well as patched resources. Optional. The default value is set to \\\"true\\\", it must be set to \\\"false\\\" to disable the validation checks.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specwithuseserversideapply","title":"fn spec.withUseServerSideApply","text":"<pre><code>withUseServerSideApply(useServerSideApply)\n</code></pre> <p>\"UseServerSideApply controls whether to use server-side apply for generate rules If is set to \\\"true\\\" create &amp; update for generate rules will use apply instead of create/update. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specwithvalidationfailureaction","title":"fn spec.withValidationFailureAction","text":"<pre><code>withValidationFailureAction(validationFailureAction)\n</code></pre> <p>\"ValidationFailureAction defines if a validation policy rule violation should block the admission review request (enforce), or allow (audit) the admission review request and report an error in a policy report. Optional. Allowed values are audit or enforce. The default value is \\\"Audit\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specwithvalidationfailureactionoverrides","title":"fn spec.withValidationFailureActionOverrides","text":"<pre><code>withValidationFailureActionOverrides(validationFailureActionOverrides)\n</code></pre> <p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specwithvalidationfailureactionoverridesmixin","title":"fn spec.withValidationFailureActionOverridesMixin","text":"<pre><code>withValidationFailureActionOverridesMixin(validationFailureActionOverrides)\n</code></pre> <p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specwithwebhooktimeoutseconds","title":"fn spec.withWebhookTimeoutSeconds","text":"<pre><code>withWebhookTimeoutSeconds(webhookTimeoutSeconds)\n</code></pre> <p>\"WebhookTimeoutSeconds specifies the maximum time in seconds allowed to apply this policy. After the configured time expires, the admission request may fail, or may simply ignore the policy results, based on the failure policy. The default timeout is 10s, the value must be between 1 and 30 seconds.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrules","title":"obj spec.rules","text":"<p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specruleswithcelpreconditions","title":"fn spec.rules.withCelPreconditions","text":"<pre><code>withCelPreconditions(celPreconditions)\n</code></pre> <p>\"CELPreconditions are used to determine if a policy rule should be applied by evaluating a set of CEL conditions. It can only be used with the validate.cel subrule\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specruleswithcelpreconditionsmixin","title":"fn spec.rules.withCelPreconditionsMixin","text":"<pre><code>withCelPreconditionsMixin(celPreconditions)\n</code></pre> <p>\"CELPreconditions are used to determine if a policy rule should be applied by evaluating a set of CEL conditions. It can only be used with the validate.cel subrule\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specruleswithcontext","title":"fn spec.rules.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specruleswithcontextmixin","title":"fn spec.rules.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specruleswithimageextractors","title":"fn spec.rules.withImageExtractors","text":"<pre><code>withImageExtractors(imageExtractors)\n</code></pre> <p>\"ImageExtractors defines a mapping from kinds to ImageExtractorConfigs. This config is only valid for verifyImages rules.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specruleswithimageextractorsmixin","title":"fn spec.rules.withImageExtractorsMixin","text":"<pre><code>withImageExtractorsMixin(imageExtractors)\n</code></pre> <p>\"ImageExtractors defines a mapping from kinds to ImageExtractorConfigs. This config is only valid for verifyImages rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specruleswithname","title":"fn spec.rules.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a label to identify the rule, It must be unique within the policy.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specruleswithverifyimages","title":"fn spec.rules.withVerifyImages","text":"<pre><code>withVerifyImages(verifyImages)\n</code></pre> <p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specruleswithverifyimagesmixin","title":"fn spec.rules.withVerifyImagesMixin","text":"<pre><code>withVerifyImagesMixin(verifyImages)\n</code></pre> <p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulescelpreconditions","title":"obj spec.rules.celPreconditions","text":"<p>\"CELPreconditions are used to determine if a policy rule should be applied by evaluating a set of CEL conditions. It can only be used with the validate.cel subrule\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescelpreconditionswithexpression","title":"fn spec.rules.celPreconditions.withExpression","text":"<pre><code>withExpression(expression)\n</code></pre> <p>\"Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables: \\n 'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request. See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the request resource. Documentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/ \\n Required.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescelpreconditionswithname","title":"fn spec.rules.celPreconditions.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName') \\n Required.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulescontext","title":"obj spec.rules.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextwithname","title":"fn spec.rules.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulescontextapicall","title":"obj spec.rules.context.apiCall","text":"<p>\"APICall is an HTTP request to the Kubernetes API server, or other JSON web service. The data returned is stored in the context with the name for the context entry.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextapicallwithdata","title":"fn spec.rules.context.apiCall.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextapicallwithdatamixin","title":"fn spec.rules.context.apiCall.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextapicallwithjmespath","title":"fn spec.rules.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response for the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextapicallwithmethod","title":"fn spec.rules.context.apiCall.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is the HTTP request type (GET or POST).\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextapicallwithurlpath","title":"fn spec.rules.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulescontextapicalldata","title":"obj spec.rules.context.apiCall.data","text":"<p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextapicalldatawithkey","title":"fn spec.rules.context.apiCall.data.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is a unique identifier for the data value\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextapicalldatawithvalue","title":"fn spec.rules.context.apiCall.data.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the data value\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulescontextapicallservice","title":"obj spec.rules.context.apiCall.service","text":"<p>\"Service is an API call to a JSON web service\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextapicallservicewithcabundle","title":"fn spec.rules.context.apiCall.service.withCaBundle","text":"<pre><code>withCaBundle(caBundle)\n</code></pre> <p>\"CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextapicallservicewithurl","title":"fn spec.rules.context.apiCall.service.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the JSON web service URL. A typical form is <code>https://{service}.{namespace}:{port}/{path}</code>.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulescontextconfigmap","title":"obj spec.rules.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextconfigmapwithname","title":"fn spec.rules.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextconfigmapwithnamespace","title":"fn spec.rules.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulescontextimageregistry","title":"obj spec.rules.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextimageregistrywithjmespath","title":"fn spec.rules.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextimageregistrywithreference","title":"fn spec.rules.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulescontextimageregistryimageregistrycredentials","title":"obj spec.rules.context.imageRegistry.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextimageregistryimageregistrycredentialswithallowinsecureregistry","title":"fn spec.rules.context.imageRegistry.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextimageregistryimageregistrycredentialswithproviders","title":"fn spec.rules.context.imageRegistry.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextimageregistryimageregistrycredentialswithprovidersmixin","title":"fn spec.rules.context.imageRegistry.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextimageregistryimageregistrycredentialswithsecrets","title":"fn spec.rules.context.imageRegistry.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextimageregistryimageregistrycredentialswithsecretsmixin","title":"fn spec.rules.context.imageRegistry.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulescontextvariable","title":"obj spec.rules.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextvariablewithdefault","title":"fn spec.rules.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextvariablewithjmespath","title":"fn spec.rules.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulescontextvariablewithvalue","title":"fn spec.rules.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesexclude","title":"obj spec.rules.exclude","text":"<p>\"ExcludeResources defines when this policy rule should not be applied. The exclude criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the name or role.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludewithall","title":"fn spec.rules.exclude.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludewithallmixin","title":"fn spec.rules.exclude.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludewithany","title":"fn spec.rules.exclude.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludewithanymixin","title":"fn spec.rules.exclude.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesexcludeall","title":"obj spec.rules.exclude.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallwithclusterroles","title":"fn spec.rules.exclude.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallwithclusterrolesmixin","title":"fn spec.rules.exclude.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallwithroles","title":"fn spec.rules.exclude.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallwithrolesmixin","title":"fn spec.rules.exclude.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallwithsubjects","title":"fn spec.rules.exclude.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallwithsubjectsmixin","title":"fn spec.rules.exclude.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesexcludeallresources","title":"obj spec.rules.exclude.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourceswithannotations","title":"fn spec.rules.exclude.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourceswithannotationsmixin","title":"fn spec.rules.exclude.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourceswithkinds","title":"fn spec.rules.exclude.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourceswithkindsmixin","title":"fn spec.rules.exclude.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourceswithname","title":"fn spec.rules.exclude.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourceswithnames","title":"fn spec.rules.exclude.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourceswithnamesmixin","title":"fn spec.rules.exclude.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourceswithnamespaces","title":"fn spec.rules.exclude.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourceswithnamespacesmixin","title":"fn spec.rules.exclude.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourceswithoperations","title":"fn spec.rules.exclude.all.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourceswithoperationsmixin","title":"fn spec.rules.exclude.all.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesexcludeallresourcesnamespaceselector","title":"obj spec.rules.exclude.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesexcludeallresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesexcludeallresourcesselector","title":"obj spec.rules.exclude.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesexcludeallresourcesselectormatchexpressions","title":"obj spec.rules.exclude.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesexcludeallsubjects","title":"obj spec.rules.exclude.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallsubjectswithapigroup","title":"fn spec.rules.exclude.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallsubjectswithkind","title":"fn spec.rules.exclude.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallsubjectswithname","title":"fn spec.rules.exclude.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeallsubjectswithnamespace","title":"fn spec.rules.exclude.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesexcludeany","title":"obj spec.rules.exclude.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanywithclusterroles","title":"fn spec.rules.exclude.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanywithclusterrolesmixin","title":"fn spec.rules.exclude.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanywithroles","title":"fn spec.rules.exclude.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanywithrolesmixin","title":"fn spec.rules.exclude.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanywithsubjects","title":"fn spec.rules.exclude.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanywithsubjectsmixin","title":"fn spec.rules.exclude.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesexcludeanyresources","title":"obj spec.rules.exclude.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourceswithannotations","title":"fn spec.rules.exclude.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourceswithannotationsmixin","title":"fn spec.rules.exclude.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourceswithkinds","title":"fn spec.rules.exclude.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourceswithkindsmixin","title":"fn spec.rules.exclude.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourceswithname","title":"fn spec.rules.exclude.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourceswithnames","title":"fn spec.rules.exclude.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourceswithnamesmixin","title":"fn spec.rules.exclude.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourceswithnamespaces","title":"fn spec.rules.exclude.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourceswithnamespacesmixin","title":"fn spec.rules.exclude.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourceswithoperations","title":"fn spec.rules.exclude.any.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourceswithoperationsmixin","title":"fn spec.rules.exclude.any.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesexcludeanyresourcesnamespaceselector","title":"obj spec.rules.exclude.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesexcludeanyresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesexcludeanyresourcesselector","title":"obj spec.rules.exclude.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesexcludeanyresourcesselectormatchexpressions","title":"obj spec.rules.exclude.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesexcludeanysubjects","title":"obj spec.rules.exclude.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanysubjectswithapigroup","title":"fn spec.rules.exclude.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanysubjectswithkind","title":"fn spec.rules.exclude.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanysubjectswithname","title":"fn spec.rules.exclude.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesexcludeanysubjectswithnamespace","title":"fn spec.rules.exclude.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesgenerate","title":"obj spec.rules.generate","text":"<p>\"Generation is used to create new resources.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesgeneratewithapiversion","title":"fn spec.rules.generate.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesgeneratewithdata","title":"fn spec.rules.generate.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data provides the resource declaration used to populate each generated resource. At most one of Data or Clone must be specified. If neither are provided, the generated resource will be created with default data only.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesgeneratewithkind","title":"fn spec.rules.generate.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesgeneratewithname","title":"fn spec.rules.generate.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesgeneratewithnamespace","title":"fn spec.rules.generate.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesgeneratewithsynchronize","title":"fn spec.rules.generate.withSynchronize","text":"<pre><code>withSynchronize(synchronize)\n</code></pre> <p>\"Synchronize controls if generated resources should be kept in-sync with their source resource. If Synchronize is set to \\\"true\\\" changes to generated resources will be overwritten with resource data from Data or the resource specified in the Clone declaration. Optional. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesgeneratewithuid","title":"fn spec.rules.generate.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID specifies the resource uid.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesgenerateclone","title":"obj spec.rules.generate.clone","text":"<p>\"Clone specifies the source resource used to populate each generated resource. At most one of Data or Clone can be specified. If neither are provided, the generated resource will be created with default data only.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesgenerateclonewithname","title":"fn spec.rules.generate.clone.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies name of the resource.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesgenerateclonewithnamespace","title":"fn spec.rules.generate.clone.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies source resource namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesgenerateclonelist","title":"obj spec.rules.generate.cloneList","text":"<p>\"CloneList specifies the list of source resource used to populate each generated resource.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistwithkinds","title":"fn spec.rules.generate.cloneList.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistwithkindsmixin","title":"fn spec.rules.generate.cloneList.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistwithnamespace","title":"fn spec.rules.generate.cloneList.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies source resource namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesgenerateclonelistselector","title":"obj spec.rules.generate.cloneList.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code>. wildcard characters are not supported.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistselectorwithmatchexpressions","title":"fn spec.rules.generate.cloneList.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistselectorwithmatchexpressionsmixin","title":"fn spec.rules.generate.cloneList.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistselectorwithmatchlabels","title":"fn spec.rules.generate.cloneList.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistselectorwithmatchlabelsmixin","title":"fn spec.rules.generate.cloneList.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesgenerateclonelistselectormatchexpressions","title":"obj spec.rules.generate.cloneList.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistselectormatchexpressionswithkey","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistselectormatchexpressionswithoperator","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistselectormatchexpressionswithvalues","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmatch","title":"obj spec.rules.match","text":"<p>\"MatchResources defines when this policy rule should be applied. The match criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the user name or role. At least one kind is required.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchwithall","title":"fn spec.rules.match.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchwithallmixin","title":"fn spec.rules.match.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchwithany","title":"fn spec.rules.match.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchwithanymixin","title":"fn spec.rules.match.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmatchall","title":"obj spec.rules.match.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallwithclusterroles","title":"fn spec.rules.match.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallwithclusterrolesmixin","title":"fn spec.rules.match.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallwithroles","title":"fn spec.rules.match.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallwithrolesmixin","title":"fn spec.rules.match.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallwithsubjects","title":"fn spec.rules.match.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallwithsubjectsmixin","title":"fn spec.rules.match.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmatchallresources","title":"obj spec.rules.match.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourceswithannotations","title":"fn spec.rules.match.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourceswithannotationsmixin","title":"fn spec.rules.match.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourceswithkinds","title":"fn spec.rules.match.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourceswithkindsmixin","title":"fn spec.rules.match.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourceswithname","title":"fn spec.rules.match.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourceswithnames","title":"fn spec.rules.match.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourceswithnamesmixin","title":"fn spec.rules.match.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourceswithnamespaces","title":"fn spec.rules.match.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourceswithnamespacesmixin","title":"fn spec.rules.match.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourceswithoperations","title":"fn spec.rules.match.all.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourceswithoperationsmixin","title":"fn spec.rules.match.all.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmatchallresourcesnamespaceselector","title":"obj spec.rules.match.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmatchallresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmatchallresourcesselector","title":"obj spec.rules.match.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesselectorwithmatchlabels","title":"fn spec.rules.match.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmatchallresourcesselectormatchexpressions","title":"obj spec.rules.match.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmatchallsubjects","title":"obj spec.rules.match.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallsubjectswithapigroup","title":"fn spec.rules.match.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallsubjectswithkind","title":"fn spec.rules.match.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallsubjectswithname","title":"fn spec.rules.match.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchallsubjectswithnamespace","title":"fn spec.rules.match.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmatchany","title":"obj spec.rules.match.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanywithclusterroles","title":"fn spec.rules.match.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanywithclusterrolesmixin","title":"fn spec.rules.match.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanywithroles","title":"fn spec.rules.match.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanywithrolesmixin","title":"fn spec.rules.match.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanywithsubjects","title":"fn spec.rules.match.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanywithsubjectsmixin","title":"fn spec.rules.match.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmatchanyresources","title":"obj spec.rules.match.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourceswithannotations","title":"fn spec.rules.match.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourceswithannotationsmixin","title":"fn spec.rules.match.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourceswithkinds","title":"fn spec.rules.match.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourceswithkindsmixin","title":"fn spec.rules.match.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourceswithname","title":"fn spec.rules.match.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourceswithnames","title":"fn spec.rules.match.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourceswithnamesmixin","title":"fn spec.rules.match.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourceswithnamespaces","title":"fn spec.rules.match.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourceswithnamespacesmixin","title":"fn spec.rules.match.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourceswithoperations","title":"fn spec.rules.match.any.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourceswithoperationsmixin","title":"fn spec.rules.match.any.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmatchanyresourcesnamespaceselector","title":"obj spec.rules.match.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmatchanyresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmatchanyresourcesselector","title":"obj spec.rules.match.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesselectorwithmatchlabels","title":"fn spec.rules.match.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmatchanyresourcesselectormatchexpressions","title":"obj spec.rules.match.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmatchanysubjects","title":"obj spec.rules.match.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanysubjectswithapigroup","title":"fn spec.rules.match.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanysubjectswithkind","title":"fn spec.rules.match.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanysubjectswithname","title":"fn spec.rules.match.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmatchanysubjectswithnamespace","title":"fn spec.rules.match.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutate","title":"obj spec.rules.mutate","text":"<p>\"Mutation is used to modify matching resources.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatewithforeach","title":"fn spec.rules.mutate.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatewithforeachmixin","title":"fn spec.rules.mutate.withForeachMixin","text":"<pre><code>withForeachMixin(foreach)\n</code></pre> <p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatewithpatchstrategicmerge","title":"fn spec.rules.mutate.withPatchStrategicMerge","text":"<pre><code>withPatchStrategicMerge(patchStrategicMerge)\n</code></pre> <p>\"PatchStrategicMerge is a strategic merge patch used to modify resources. See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatewithpatchesjson6902","title":"fn spec.rules.mutate.withPatchesJson6902","text":"<pre><code>withPatchesJson6902(patchesJson6902)\n</code></pre> <p>\"PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources. See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatewithtargets","title":"fn spec.rules.mutate.withTargets","text":"<pre><code>withTargets(targets)\n</code></pre> <p>\"Targets defines the target resources to be mutated.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatewithtargetsmixin","title":"fn spec.rules.mutate.withTargetsMixin","text":"<pre><code>withTargetsMixin(targets)\n</code></pre> <p>\"Targets defines the target resources to be mutated.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutateforeach","title":"obj spec.rules.mutate.foreach","text":"<p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachwithcontext","title":"fn spec.rules.mutate.foreach.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachwithcontextmixin","title":"fn spec.rules.mutate.foreach.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachwithforeach","title":"fn spec.rules.mutate.foreach.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"Foreach declares a nested foreach iterator\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachwithlist","title":"fn spec.rules.mutate.foreach.withList","text":"<pre><code>withList(list)\n</code></pre> <p>\"List specifies a JMESPath expression that results in one or more elements to which the validation logic is applied.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachwithorder","title":"fn spec.rules.mutate.foreach.withOrder","text":"<pre><code>withOrder(order)\n</code></pre> <p>\"Order defines the iteration order on the list. Can be Ascending to iterate from first to last element or Descending to iterate in from last to first element.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachwithpatchstrategicmerge","title":"fn spec.rules.mutate.foreach.withPatchStrategicMerge","text":"<pre><code>withPatchStrategicMerge(patchStrategicMerge)\n</code></pre> <p>\"PatchStrategicMerge is a strategic merge patch used to modify resources. See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachwithpatchesjson6902","title":"fn spec.rules.mutate.foreach.withPatchesJson6902","text":"<pre><code>withPatchesJson6902(patchesJson6902)\n</code></pre> <p>\"PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources. See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutateforeachcontext","title":"obj spec.rules.mutate.foreach.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextwithname","title":"fn spec.rules.mutate.foreach.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutateforeachcontextapicall","title":"obj spec.rules.mutate.foreach.context.apiCall","text":"<p>\"APICall is an HTTP request to the Kubernetes API server, or other JSON web service. The data returned is stored in the context with the name for the context entry.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextapicallwithdata","title":"fn spec.rules.mutate.foreach.context.apiCall.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextapicallwithdatamixin","title":"fn spec.rules.mutate.foreach.context.apiCall.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextapicallwithjmespath","title":"fn spec.rules.mutate.foreach.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response for the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextapicallwithmethod","title":"fn spec.rules.mutate.foreach.context.apiCall.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is the HTTP request type (GET or POST).\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextapicallwithurlpath","title":"fn spec.rules.mutate.foreach.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutateforeachcontextapicalldata","title":"obj spec.rules.mutate.foreach.context.apiCall.data","text":"<p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextapicalldatawithkey","title":"fn spec.rules.mutate.foreach.context.apiCall.data.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is a unique identifier for the data value\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextapicalldatawithvalue","title":"fn spec.rules.mutate.foreach.context.apiCall.data.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the data value\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutateforeachcontextapicallservice","title":"obj spec.rules.mutate.foreach.context.apiCall.service","text":"<p>\"Service is an API call to a JSON web service\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextapicallservicewithcabundle","title":"fn spec.rules.mutate.foreach.context.apiCall.service.withCaBundle","text":"<pre><code>withCaBundle(caBundle)\n</code></pre> <p>\"CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextapicallservicewithurl","title":"fn spec.rules.mutate.foreach.context.apiCall.service.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the JSON web service URL. A typical form is <code>https://{service}.{namespace}:{port}/{path}</code>.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutateforeachcontextconfigmap","title":"obj spec.rules.mutate.foreach.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextconfigmapwithname","title":"fn spec.rules.mutate.foreach.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextconfigmapwithnamespace","title":"fn spec.rules.mutate.foreach.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutateforeachcontextimageregistry","title":"obj spec.rules.mutate.foreach.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextimageregistrywithjmespath","title":"fn spec.rules.mutate.foreach.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextimageregistrywithreference","title":"fn spec.rules.mutate.foreach.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutateforeachcontextimageregistryimageregistrycredentials","title":"obj spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextimageregistryimageregistrycredentialswithallowinsecureregistry","title":"fn spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextimageregistryimageregistrycredentialswithproviders","title":"fn spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextimageregistryimageregistrycredentialswithprovidersmixin","title":"fn spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextimageregistryimageregistrycredentialswithsecrets","title":"fn spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextimageregistryimageregistrycredentialswithsecretsmixin","title":"fn spec.rules.mutate.foreach.context.imageRegistry.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutateforeachcontextvariable","title":"obj spec.rules.mutate.foreach.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextvariablewithdefault","title":"fn spec.rules.mutate.foreach.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextvariablewithjmespath","title":"fn spec.rules.mutate.foreach.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextvariablewithvalue","title":"fn spec.rules.mutate.foreach.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutateforeachpreconditions","title":"obj spec.rules.mutate.foreach.preconditions","text":"<p>\"AnyAllConditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionswithall","title":"fn spec.rules.mutate.foreach.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionswithallmixin","title":"fn spec.rules.mutate.foreach.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionswithany","title":"fn spec.rules.mutate.foreach.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionswithanymixin","title":"fn spec.rules.mutate.foreach.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutateforeachpreconditionsall","title":"obj spec.rules.mutate.foreach.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionsallwithkey","title":"fn spec.rules.mutate.foreach.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionsallwithmessage","title":"fn spec.rules.mutate.foreach.preconditions.all.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionsallwithoperator","title":"fn spec.rules.mutate.foreach.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionsallwithvalue","title":"fn spec.rules.mutate.foreach.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutateforeachpreconditionsany","title":"obj spec.rules.mutate.foreach.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionsanywithkey","title":"fn spec.rules.mutate.foreach.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionsanywithmessage","title":"fn spec.rules.mutate.foreach.preconditions.any.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionsanywithoperator","title":"fn spec.rules.mutate.foreach.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionsanywithvalue","title":"fn spec.rules.mutate.foreach.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutatetargets","title":"obj spec.rules.mutate.targets","text":"<p>\"Targets defines the target resources to be mutated.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetswithapiversion","title":"fn spec.rules.mutate.targets.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetswithcontext","title":"fn spec.rules.mutate.targets.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetswithcontextmixin","title":"fn spec.rules.mutate.targets.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetswithkind","title":"fn spec.rules.mutate.targets.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetswithname","title":"fn spec.rules.mutate.targets.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetswithnamespace","title":"fn spec.rules.mutate.targets.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetswithpreconditions","title":"fn spec.rules.mutate.targets.withPreconditions","text":"<pre><code>withPreconditions(preconditions)\n</code></pre> <p>\"Preconditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. A direct list of conditions (without <code>any</code> or <code>all</code> statements is supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetswithuid","title":"fn spec.rules.mutate.targets.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID specifies the resource uid.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutatetargetscontext","title":"obj spec.rules.mutate.targets.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextwithname","title":"fn spec.rules.mutate.targets.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutatetargetscontextapicall","title":"obj spec.rules.mutate.targets.context.apiCall","text":"<p>\"APICall is an HTTP request to the Kubernetes API server, or other JSON web service. The data returned is stored in the context with the name for the context entry.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextapicallwithdata","title":"fn spec.rules.mutate.targets.context.apiCall.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextapicallwithdatamixin","title":"fn spec.rules.mutate.targets.context.apiCall.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextapicallwithjmespath","title":"fn spec.rules.mutate.targets.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response for the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextapicallwithmethod","title":"fn spec.rules.mutate.targets.context.apiCall.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is the HTTP request type (GET or POST).\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextapicallwithurlpath","title":"fn spec.rules.mutate.targets.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutatetargetscontextapicalldata","title":"obj spec.rules.mutate.targets.context.apiCall.data","text":"<p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextapicalldatawithkey","title":"fn spec.rules.mutate.targets.context.apiCall.data.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is a unique identifier for the data value\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextapicalldatawithvalue","title":"fn spec.rules.mutate.targets.context.apiCall.data.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the data value\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutatetargetscontextapicallservice","title":"obj spec.rules.mutate.targets.context.apiCall.service","text":"<p>\"Service is an API call to a JSON web service\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextapicallservicewithcabundle","title":"fn spec.rules.mutate.targets.context.apiCall.service.withCaBundle","text":"<pre><code>withCaBundle(caBundle)\n</code></pre> <p>\"CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextapicallservicewithurl","title":"fn spec.rules.mutate.targets.context.apiCall.service.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the JSON web service URL. A typical form is <code>https://{service}.{namespace}:{port}/{path}</code>.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutatetargetscontextconfigmap","title":"obj spec.rules.mutate.targets.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextconfigmapwithname","title":"fn spec.rules.mutate.targets.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextconfigmapwithnamespace","title":"fn spec.rules.mutate.targets.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutatetargetscontextimageregistry","title":"obj spec.rules.mutate.targets.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextimageregistrywithjmespath","title":"fn spec.rules.mutate.targets.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextimageregistrywithreference","title":"fn spec.rules.mutate.targets.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutatetargetscontextimageregistryimageregistrycredentials","title":"obj spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextimageregistryimageregistrycredentialswithallowinsecureregistry","title":"fn spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextimageregistryimageregistrycredentialswithproviders","title":"fn spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextimageregistryimageregistrycredentialswithprovidersmixin","title":"fn spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextimageregistryimageregistrycredentialswithsecrets","title":"fn spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextimageregistryimageregistrycredentialswithsecretsmixin","title":"fn spec.rules.mutate.targets.context.imageRegistry.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesmutatetargetscontextvariable","title":"obj spec.rules.mutate.targets.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextvariablewithdefault","title":"fn spec.rules.mutate.targets.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextvariablewithjmespath","title":"fn spec.rules.mutate.targets.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesmutatetargetscontextvariablewithvalue","title":"fn spec.rules.mutate.targets.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulespreconditions","title":"obj spec.rules.preconditions","text":"<p>\"Preconditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulespreconditionswithall","title":"fn spec.rules.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulespreconditionswithallmixin","title":"fn spec.rules.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulespreconditionswithany","title":"fn spec.rules.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulespreconditionswithanymixin","title":"fn spec.rules.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulespreconditionsall","title":"obj spec.rules.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulespreconditionsallwithkey","title":"fn spec.rules.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulespreconditionsallwithmessage","title":"fn spec.rules.preconditions.all.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulespreconditionsallwithoperator","title":"fn spec.rules.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulespreconditionsallwithvalue","title":"fn spec.rules.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulespreconditionsany","title":"obj spec.rules.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulespreconditionsanywithkey","title":"fn spec.rules.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulespreconditionsanywithmessage","title":"fn spec.rules.preconditions.any.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulespreconditionsanywithoperator","title":"fn spec.rules.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulespreconditionsanywithvalue","title":"fn spec.rules.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidate","title":"obj spec.rules.validate","text":"<p>\"Validation is used to validate matching resources.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatewithanypattern","title":"fn spec.rules.validate.withAnyPattern","text":"<pre><code>withAnyPattern(anyPattern)\n</code></pre> <p>\"AnyPattern specifies list of validation patterns. At least one of the patterns must be satisfied for the validation rule to succeed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatewithforeach","title":"fn spec.rules.validate.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatewithforeachmixin","title":"fn spec.rules.validate.withForeachMixin","text":"<pre><code>withForeachMixin(foreach)\n</code></pre> <p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatewithmessage","title":"fn spec.rules.validate.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message specifies a custom message to be displayed on failure.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatewithpattern","title":"fn spec.rules.validate.withPattern","text":"<pre><code>withPattern(pattern)\n</code></pre> <p>\"Pattern specifies an overlay-style pattern used to check resources.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatecel","title":"obj spec.rules.validate.cel","text":"<p>\"CEL allows validation checks using the Common Expression Language (https://kubernetes.io/docs/reference/using-api/cel/).\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelwithauditannotations","title":"fn spec.rules.validate.cel.withAuditAnnotations","text":"<pre><code>withAuditAnnotations(auditAnnotations)\n</code></pre> <p>\"AuditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelwithauditannotationsmixin","title":"fn spec.rules.validate.cel.withAuditAnnotationsMixin","text":"<pre><code>withAuditAnnotationsMixin(auditAnnotations)\n</code></pre> <p>\"AuditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelwithexpressions","title":"fn spec.rules.validate.cel.withExpressions","text":"<pre><code>withExpressions(expressions)\n</code></pre> <p>\"Expressions is a list of CELExpression types.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelwithexpressionsmixin","title":"fn spec.rules.validate.cel.withExpressionsMixin","text":"<pre><code>withExpressionsMixin(expressions)\n</code></pre> <p>\"Expressions is a list of CELExpression types.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelwithvariables","title":"fn spec.rules.validate.cel.withVariables","text":"<pre><code>withVariables(variables)\n</code></pre> <p>\"Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under <code>variables</code> in other expressions of the policy.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelwithvariablesmixin","title":"fn spec.rules.validate.cel.withVariablesMixin","text":"<pre><code>withVariablesMixin(variables)\n</code></pre> <p>\"Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under <code>variables</code> in other expressions of the policy.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatecelauditannotations","title":"obj spec.rules.validate.cel.auditAnnotations","text":"<p>\"AuditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelauditannotationswithkey","title":"fn spec.rules.validate.cel.auditAnnotations.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key specifies the audit annotation key. The audit annotation keys of a ValidatingAdmissionPolicy must be unique. The key must be a qualified name ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length. \\n The key is combined with the resource name of the ValidatingAdmissionPolicy to construct an audit annotation key: \\\"{ValidatingAdmissionPolicy name}/{key}\\\". \\n If an admission webhook uses the same resource name as this ValidatingAdmissionPolicy and the same audit annotation key, the annotation key will be identical. In this case, the first annotation written with the key will be included in the audit event and all subsequent annotations with the same key will be discarded. \\n Required.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelauditannotationswithvalueexpression","title":"fn spec.rules.validate.cel.auditAnnotations.withValueExpression","text":"<pre><code>withValueExpression(valueExpression)\n</code></pre> <p>\"valueExpression represents the expression which is evaluated by CEL to produce an audit annotation value. The expression must evaluate to either a string or null value. If the expression evaluates to a string, the audit annotation is included with the string value. If the expression evaluates to null or empty string the audit annotation will be omitted. The valueExpression may be no longer than 5kb in length. If the result of the valueExpression is more than 10kb in length, it will be truncated to 10kb. \\n If multiple ValidatingAdmissionPolicyBinding resources match an API request, then the valueExpression will be evaluated for each binding. All unique values produced by the valueExpressions will be joined together in a comma-separated list. \\n Required.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatecelexpressions","title":"obj spec.rules.validate.cel.expressions","text":"<p>\"Expressions is a list of CELExpression types.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelexpressionswithexpression","title":"fn spec.rules.validate.cel.expressions.withExpression","text":"<pre><code>withExpression(expression)\n</code></pre> <p>\"Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables: \\n - 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request(ref). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value. For example, a variable named 'foo' can be accessed as 'variables.foo'. - 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request. See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz - 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the request resource. \\n The <code>apiVersion</code>, <code>kind</code>, <code>metadata.name</code> and <code>metadata.generateName</code> are always accessible from the root of the object. No other metadata properties are accessible. \\n Only property names of the form <code>[a-zA-Z_.-/][a-zA-Z0-9_.-/]*</code> are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '' escapes to '__underscores' - '.' escapes to 'dot' - '-' escapes to 'dash' - '/' escapes to 'slash' - Property names that exactly match a CEL RESERVED keyword escape to '{keyword}'. The keywords are: \\\"true\\\", \\\"false\\\", \\\"null\\\", \\\"in\\\", \\\"as\\\", \\\"break\\\", \\\"const\\\", \\\"continue\\\", \\\"else\\\", \\\"for\\\", \\\"function\\\", \\\"if\\\", \\\"import\\\", \\\"let\\\", \\\"loop\\\", \\\"package\\\", \\\"namespace\\\", \\\"return\\\". Examples: - Expression accessing a property named \\\"namespace\\\": {\\\"Expression\\\": \\\"object.namespace &gt; 0\\\"} - Expression accessing a property named \\\"x-prop\\\": {\\\"Expression\\\": \\\"object.x__dash__prop &gt; 0\\\"} - Expression accessing a property named \\\"redact__d\\\": {\\\"Expression\\\": \\\"object.redact__underscores__d &gt; 0\\\"} \\n Equality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type: - 'set': <code>X + Y</code> performs a union where the array positions of all elements in <code>X</code> are preserved and non-intersecting elements in <code>Y</code> are appended, retaining their partial order. - 'map': <code>X + Y</code> performs a merge where the array positions of all keys in <code>X</code> are preserved but the values are overwritten by values in <code>Y</code> when the key sets of <code>X</code> and <code>Y</code> intersect. Elements in <code>Y</code> with non-intersecting keys are appended, retaining their partial order. Required.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelexpressionswithmessage","title":"fn spec.rules.validate.cel.expressions.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is \\\"failed rule: {Rule}\\\". e.g. \\\"must be a URL with the host matching spec.host\\\" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is \\\"failed Expression: {Expression}\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelexpressionswithmessageexpression","title":"fn spec.rules.validate.cel.expressions.withMessageExpression","text":"<pre><code>withMessageExpression(messageExpression)\n</code></pre> <p>\"messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a validation, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the <code>expression</code> except for 'authorizer' and 'authorizer.requestResource'. Example: \\\"object.x must be less than max (\\\"+string(params.max)+\\\")\\</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelexpressionswithreason","title":"fn spec.rules.validate.cel.expressions.withReason","text":"<pre><code>withReason(reason)\n</code></pre> <p>\"Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: \\\"Unauthorized\\\", \\\"Forbidden\\\", \\\"Invalid\\\", \\\"RequestEntityTooLarge\\\". If not set, StatusReasonInvalid is used in the response to the client.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatecelparamkind","title":"obj spec.rules.validate.cel.paramKind","text":"<p>\"ParamKind is a tuple of Group Kind and Version.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelparamkindwithapiversion","title":"fn spec.rules.validate.cel.paramKind.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion is the API group version the resources belong to. In format of \\\"group/version\\\". Required.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelparamkindwithkind","title":"fn spec.rules.validate.cel.paramKind.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind is the API kind the resources belong to. Required.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatecelparamref","title":"obj spec.rules.validate.cel.paramRef","text":"<p>\"ParamRef references a parameter resource.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelparamrefwithname","title":"fn spec.rules.validate.cel.paramRef.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"<code>name</code> is the name of the resource being referenced. \\n <code>name</code> and <code>selector</code> are mutually exclusive properties. If one is set, the other must be unset.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelparamrefwithnamespace","title":"fn spec.rules.validate.cel.paramRef.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"namespace is the namespace of the referenced resource. Allows limiting the search for params to a specific namespace. Applies to both <code>name</code> and <code>selector</code> fields. \\n A per-namespace parameter may be used by specifying a namespace-scoped <code>paramKind</code> in the policy and leaving this field empty. \\n - If <code>paramKind</code> is cluster-scoped, this field MUST be unset. Setting this field results in a configuration error. \\n - If <code>paramKind</code> is namespace-scoped, the namespace of the object being evaluated for admission will be used when this field is left unset. Take care that if this is left empty the binding must not match any cluster-scoped resources, which will result in an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelparamrefwithparameternotfoundaction","title":"fn spec.rules.validate.cel.paramRef.withParameterNotFoundAction","text":"<pre><code>withParameterNotFoundAction(parameterNotFoundAction)\n</code></pre> <p>\"<code>parameterNotFoundAction</code> controls the behavior of the binding when the resource exists, and name or selector is valid, but there are no parameters matched by the binding. If the value is set to <code>Allow</code>, then no matched parameters will be treated as successful validation by the binding. If set to <code>Deny</code>, then no matched parameters will be subject to the <code>failurePolicy</code> of the policy. \\n Allowed values are <code>Allow</code> or <code>Deny</code> Default to <code>Deny</code>\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatecelparamrefselector","title":"obj spec.rules.validate.cel.paramRef.selector","text":"<p>\"selector can be used to match multiple param objects based on their labels. Supply selector: {} to match all resources of the ParamKind. \\n If multiple params are found, they are all evaluated with the policy expressions and the results are ANDed together. \\n One of <code>name</code> or <code>selector</code> must be set, but <code>name</code> and <code>selector</code> are mutually exclusive properties. If one is set, the other must be unset.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelparamrefselectorwithmatchexpressions","title":"fn spec.rules.validate.cel.paramRef.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelparamrefselectorwithmatchexpressionsmixin","title":"fn spec.rules.validate.cel.paramRef.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelparamrefselectorwithmatchlabels","title":"fn spec.rules.validate.cel.paramRef.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelparamrefselectorwithmatchlabelsmixin","title":"fn spec.rules.validate.cel.paramRef.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatecelparamrefselectormatchexpressions","title":"obj spec.rules.validate.cel.paramRef.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelparamrefselectormatchexpressionswithkey","title":"fn spec.rules.validate.cel.paramRef.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelparamrefselectormatchexpressionswithoperator","title":"fn spec.rules.validate.cel.paramRef.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelparamrefselectormatchexpressionswithvalues","title":"fn spec.rules.validate.cel.paramRef.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelparamrefselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.validate.cel.paramRef.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatecelvariables","title":"obj spec.rules.validate.cel.variables","text":"<p>\"Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under <code>variables</code> in other expressions of the policy.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelvariableswithexpression","title":"fn spec.rules.validate.cel.variables.withExpression","text":"<pre><code>withExpression(expression)\n</code></pre> <p>\"Expression is the expression that will be evaluated as the value of the variable. The CEL expression has access to the same identifiers as the CEL expressions in Validation.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatecelvariableswithname","title":"fn spec.rules.validate.cel.variables.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables. The variable can be accessed in other expressions through <code>variables</code> For example, if name is \\\"foo\\\", the variable will be available as <code>variables.foo</code>\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatedeny","title":"obj spec.rules.validate.deny","text":"<p>\"Deny defines conditions used to pass or fail a validation rule.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatedenyconditions","title":"obj spec.rules.validate.deny.conditions","text":"<p>\"Multiple conditions can be declared under an <code>any</code> or <code>all</code> statement. See: https://kyverno.io/docs/writing-policies/validate/#deny-rules\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionswithall","title":"fn spec.rules.validate.deny.conditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionswithallmixin","title":"fn spec.rules.validate.deny.conditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionswithany","title":"fn spec.rules.validate.deny.conditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionswithanymixin","title":"fn spec.rules.validate.deny.conditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatedenyconditionsall","title":"obj spec.rules.validate.deny.conditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionsallwithkey","title":"fn spec.rules.validate.deny.conditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionsallwithmessage","title":"fn spec.rules.validate.deny.conditions.all.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionsallwithoperator","title":"fn spec.rules.validate.deny.conditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionsallwithvalue","title":"fn spec.rules.validate.deny.conditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatedenyconditionsany","title":"obj spec.rules.validate.deny.conditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionsanywithkey","title":"fn spec.rules.validate.deny.conditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionsanywithmessage","title":"fn spec.rules.validate.deny.conditions.any.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionsanywithoperator","title":"fn spec.rules.validate.deny.conditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionsanywithvalue","title":"fn spec.rules.validate.deny.conditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidateforeach","title":"obj spec.rules.validate.foreach","text":"<p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachwithanypattern","title":"fn spec.rules.validate.foreach.withAnyPattern","text":"<pre><code>withAnyPattern(anyPattern)\n</code></pre> <p>\"AnyPattern specifies list of validation patterns. At least one of the patterns must be satisfied for the validation rule to succeed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachwithcontext","title":"fn spec.rules.validate.foreach.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachwithcontextmixin","title":"fn spec.rules.validate.foreach.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachwithelementscope","title":"fn spec.rules.validate.foreach.withElementScope","text":"<pre><code>withElementScope(elementScope)\n</code></pre> <p>\"ElementScope specifies whether to use the current list element as the scope for validation. Defaults to \\\"true\\\" if not specified. When set to \\\"false\\\", \\\"request.object\\\" is used as the validation scope within the foreach block to allow referencing other elements in the subtree.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachwithforeach","title":"fn spec.rules.validate.foreach.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"Foreach declares a nested foreach iterator\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachwithlist","title":"fn spec.rules.validate.foreach.withList","text":"<pre><code>withList(list)\n</code></pre> <p>\"List specifies a JMESPath expression that results in one or more elements to which the validation logic is applied.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachwithpattern","title":"fn spec.rules.validate.foreach.withPattern","text":"<pre><code>withPattern(pattern)\n</code></pre> <p>\"Pattern specifies an overlay-style pattern used to check resources.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachcontext","title":"obj spec.rules.validate.foreach.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextwithname","title":"fn spec.rules.validate.foreach.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachcontextapicall","title":"obj spec.rules.validate.foreach.context.apiCall","text":"<p>\"APICall is an HTTP request to the Kubernetes API server, or other JSON web service. The data returned is stored in the context with the name for the context entry.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextapicallwithdata","title":"fn spec.rules.validate.foreach.context.apiCall.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextapicallwithdatamixin","title":"fn spec.rules.validate.foreach.context.apiCall.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data specifies the POST data sent to the server.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextapicallwithjmespath","title":"fn spec.rules.validate.foreach.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response for the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextapicallwithmethod","title":"fn spec.rules.validate.foreach.context.apiCall.withMethod","text":"<pre><code>withMethod(method)\n</code></pre> <p>\"Method is the HTTP request type (GET or POST).\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextapicallwithurlpath","title":"fn spec.rules.validate.foreach.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET or POST request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command. See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls for details.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachcontextapicalldata","title":"obj spec.rules.validate.foreach.context.apiCall.data","text":"<p>\"Data specifies the POST data sent to the server.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextapicalldatawithkey","title":"fn spec.rules.validate.foreach.context.apiCall.data.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is a unique identifier for the data value\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextapicalldatawithvalue","title":"fn spec.rules.validate.foreach.context.apiCall.data.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the data value\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachcontextapicallservice","title":"obj spec.rules.validate.foreach.context.apiCall.service","text":"<p>\"Service is an API call to a JSON web service\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextapicallservicewithcabundle","title":"fn spec.rules.validate.foreach.context.apiCall.service.withCaBundle","text":"<pre><code>withCaBundle(caBundle)\n</code></pre> <p>\"CABundle is a PEM encoded CA bundle which will be used to validate the server certificate.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextapicallservicewithurl","title":"fn spec.rules.validate.foreach.context.apiCall.service.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the JSON web service URL. A typical form is <code>https://{service}.{namespace}:{port}/{path}</code>.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachcontextconfigmap","title":"obj spec.rules.validate.foreach.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextconfigmapwithname","title":"fn spec.rules.validate.foreach.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextconfigmapwithnamespace","title":"fn spec.rules.validate.foreach.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachcontextimageregistry","title":"obj spec.rules.validate.foreach.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextimageregistrywithjmespath","title":"fn spec.rules.validate.foreach.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextimageregistrywithreference","title":"fn spec.rules.validate.foreach.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachcontextimageregistryimageregistrycredentials","title":"obj spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextimageregistryimageregistrycredentialswithallowinsecureregistry","title":"fn spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextimageregistryimageregistrycredentialswithproviders","title":"fn spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextimageregistryimageregistrycredentialswithprovidersmixin","title":"fn spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextimageregistryimageregistrycredentialswithsecrets","title":"fn spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextimageregistryimageregistrycredentialswithsecretsmixin","title":"fn spec.rules.validate.foreach.context.imageRegistry.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachcontextvariable","title":"obj spec.rules.validate.foreach.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextvariablewithdefault","title":"fn spec.rules.validate.foreach.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextvariablewithjmespath","title":"fn spec.rules.validate.foreach.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextvariablewithvalue","title":"fn spec.rules.validate.foreach.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachdeny","title":"obj spec.rules.validate.foreach.deny","text":"<p>\"Deny defines conditions used to pass or fail a validation rule.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachdenywithconditions","title":"fn spec.rules.validate.foreach.deny.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Multiple conditions can be declared under an <code>any</code> or <code>all</code> statement. A direct list of conditions (without <code>any</code> or <code>all</code> statements) is also supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/validate/#deny-rules\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachpreconditions","title":"obj spec.rules.validate.foreach.preconditions","text":"<p>\"AnyAllConditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionswithall","title":"fn spec.rules.validate.foreach.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionswithallmixin","title":"fn spec.rules.validate.foreach.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionswithany","title":"fn spec.rules.validate.foreach.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionswithanymixin","title":"fn spec.rules.validate.foreach.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachpreconditionsall","title":"obj spec.rules.validate.foreach.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionsallwithkey","title":"fn spec.rules.validate.foreach.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionsallwithmessage","title":"fn spec.rules.validate.foreach.preconditions.all.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionsallwithoperator","title":"fn spec.rules.validate.foreach.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionsallwithvalue","title":"fn spec.rules.validate.foreach.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachpreconditionsany","title":"obj spec.rules.validate.foreach.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionsanywithkey","title":"fn spec.rules.validate.foreach.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionsanywithmessage","title":"fn spec.rules.validate.foreach.preconditions.any.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionsanywithoperator","title":"fn spec.rules.validate.foreach.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionsanywithvalue","title":"fn spec.rules.validate.foreach.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifests","title":"obj spec.rules.validate.manifests","text":"<p>\"Manifest specifies conditions for manifest verification\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestswithannotationdomain","title":"fn spec.rules.validate.manifests.withAnnotationDomain","text":"<pre><code>withAnnotationDomain(annotationDomain)\n</code></pre> <p>\"AnnotationDomain is custom domain of annotation for message and signature. Default is \\\"cosign.sigstore.dev\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestswithattestors","title":"fn spec.rules.validate.manifests.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestswithattestorsmixin","title":"fn spec.rules.validate.manifests.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestswithignorefields","title":"fn spec.rules.validate.manifests.withIgnoreFields","text":"<pre><code>withIgnoreFields(ignoreFields)\n</code></pre> <p>\"Fields which will be ignored while comparing manifests.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestswithignorefieldsmixin","title":"fn spec.rules.validate.manifests.withIgnoreFieldsMixin","text":"<pre><code>withIgnoreFieldsMixin(ignoreFields)\n</code></pre> <p>\"Fields which will be ignored while comparing manifests.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestswithrepository","title":"fn spec.rules.validate.manifests.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for resource bundle reference. The repository can be overridden per Attestor or Attestation.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestors","title":"obj spec.rules.validate.manifests.attestors","text":"<p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorswithcount","title":"fn spec.rules.validate.manifests.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorswithentries","title":"fn spec.rules.validate.manifests.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorswithentriesmixin","title":"fn spec.rules.validate.manifests.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestorsentries","title":"obj spec.rules.validate.manifests.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieswithannotations","title":"fn spec.rules.validate.manifests.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieswithannotationsmixin","title":"fn spec.rules.validate.manifests.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieswithattestor","title":"fn spec.rules.validate.manifests.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested set of Attestor used to specify a more complex set of match authorities.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieswithrepository","title":"fn spec.rules.validate.manifests.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestorsentriescertificates","title":"obj spec.rules.validate.manifests.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentriescertificateswithcert","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Cert is an optional PEM-encoded public certificate.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentriescertificateswithcertchain","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertChain is an optional PEM encoded set of certificates used to verify.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestorsentriescertificatesctlog","title":"obj spec.rules.validate.manifests.attestors.entries.certificates.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesctlogwithignoresct","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesctlogwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestorsentriescertificatesrekor","title":"obj spec.rules.validate.manifests.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesrekorwithignoretlog","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesrekorwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeyless","title":"obj spec.rules.validate.manifests.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithissuer","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithroots","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithsubject","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeylessctlog","title":"obj spec.rules.validate.manifests.attestors.entries.keyless.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessctlogwithignoresct","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessctlogwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeylessrekor","title":"obj spec.rules.validate.manifests.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessrekorwithignoretlog","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessrekorwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeys","title":"obj spec.rules.validate.manifests.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithkms","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithpublickeys","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeysctlog","title":"obj spec.rules.validate.manifests.attestors.entries.keys.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeysctlogwithignoresct","title":"fn spec.rules.validate.manifests.attestors.entries.keys.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeysctlogwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.keys.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeysrekor","title":"obj spec.rules.validate.manifests.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeysrekorwithignoretlog","title":"fn spec.rules.validate.manifests.attestors.entries.keys.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeysrekorwithpubkey","title":"fn spec.rules.validate.manifests.attestors.entries.keys.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeysrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeyssecret","title":"obj spec.rules.validate.manifests.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeyssecretwithname","title":"fn spec.rules.validate.manifests.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.validate.manifests.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsdryrun","title":"obj spec.rules.validate.manifests.dryRun","text":"<p>\"DryRun configuration\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsdryrunwithenable","title":"fn spec.rules.validate.manifests.dryRun.withEnable","text":"<pre><code>withEnable(enable)\n</code></pre>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsdryrunwithnamespace","title":"fn spec.rules.validate.manifests.dryRun.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsignorefields","title":"obj spec.rules.validate.manifests.ignoreFields","text":"<p>\"Fields which will be ignored while comparing manifests.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsignorefieldswithfields","title":"fn spec.rules.validate.manifests.ignoreFields.withFields","text":"<pre><code>withFields(fields)\n</code></pre>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsignorefieldswithfieldsmixin","title":"fn spec.rules.validate.manifests.ignoreFields.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsignorefieldswithobjects","title":"fn spec.rules.validate.manifests.ignoreFields.withObjects","text":"<pre><code>withObjects(objects)\n</code></pre>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsignorefieldswithobjectsmixin","title":"fn spec.rules.validate.manifests.ignoreFields.withObjectsMixin","text":"<pre><code>withObjectsMixin(objects)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsignorefieldsobjects","title":"obj spec.rules.validate.manifests.ignoreFields.objects","text":""},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithgroup","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withGroup","text":"<pre><code>withGroup(group)\n</code></pre>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithkind","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithname","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithnamespace","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithversion","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withVersion","text":"<pre><code>withVersion(version)\n</code></pre>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatepodsecurity","title":"obj spec.rules.validate.podSecurity","text":"<p>\"PodSecurity applies exemptions for Kubernetes Pod Security admission by specifying exclusions for Pod Security Standards controls.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatepodsecuritywithexclude","title":"fn spec.rules.validate.podSecurity.withExclude","text":"<pre><code>withExclude(exclude)\n</code></pre> <p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatepodsecuritywithexcludemixin","title":"fn spec.rules.validate.podSecurity.withExcludeMixin","text":"<pre><code>withExcludeMixin(exclude)\n</code></pre> <p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatepodsecuritywithlevel","title":"fn spec.rules.validate.podSecurity.withLevel","text":"<pre><code>withLevel(level)\n</code></pre> <p>\"Level defines the Pod Security Standard level to be applied to workloads. Allowed values are privileged, baseline, and restricted.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatepodsecuritywithversion","title":"fn spec.rules.validate.podSecurity.withVersion","text":"<pre><code>withVersion(version)\n</code></pre> <p>\"Version defines the Pod Security Standard versions that Kubernetes supports. Allowed values are v1.19, v1.20, v1.21, v1.22, v1.23, v1.24, v1.25, v1.26, latest. Defaults to latest.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesvalidatepodsecurityexclude","title":"obj spec.rules.validate.podSecurity.exclude","text":"<p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatepodsecurityexcludewithcontrolname","title":"fn spec.rules.validate.podSecurity.exclude.withControlName","text":"<pre><code>withControlName(controlName)\n</code></pre> <p>\"ControlName specifies the name of the Pod Security Standard control. See: https://kubernetes.io/docs/concepts/security/pod-security-standards/\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatepodsecurityexcludewithimages","title":"fn spec.rules.validate.podSecurity.exclude.withImages","text":"<pre><code>withImages(images)\n</code></pre> <p>\"Images selects matching containers and applies the container level PSS. Each image is the image name consisting of the registry address, repository, image, and tag. Empty list matches no containers, PSS checks are applied at the pod level only. Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesvalidatepodsecurityexcludewithimagesmixin","title":"fn spec.rules.validate.podSecurity.exclude.withImagesMixin","text":"<pre><code>withImagesMixin(images)\n</code></pre> <p>\"Images selects matching containers and applies the container level PSS. Each image is the image name consisting of the registry address, repository, image, and tag. Empty list matches no containers, PSS checks are applied at the pod level only. Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimages","title":"obj spec.rules.verifyImages","text":"<p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithattestations","title":"fn spec.rules.verifyImages.withAttestations","text":"<pre><code>withAttestations(attestations)\n</code></pre> <p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithattestationsmixin","title":"fn spec.rules.verifyImages.withAttestationsMixin","text":"<pre><code>withAttestationsMixin(attestations)\n</code></pre> <p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithattestors","title":"fn spec.rules.verifyImages.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithattestorsmixin","title":"fn spec.rules.verifyImages.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithimagereferences","title":"fn spec.rules.verifyImages.withImageReferences","text":"<pre><code>withImageReferences(imageReferences)\n</code></pre> <p>\"ImageReferences is a list of matching image reference patterns. At least one pattern in the list must match the image for the rule to apply. Each image reference consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest). Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithimagereferencesmixin","title":"fn spec.rules.verifyImages.withImageReferencesMixin","text":"<pre><code>withImageReferencesMixin(imageReferences)\n</code></pre> <p>\"ImageReferences is a list of matching image reference patterns. At least one pattern in the list must match the image for the rule to apply. Each image reference consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest). Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithmutatedigest","title":"fn spec.rules.verifyImages.withMutateDigest","text":"<pre><code>withMutateDigest(mutateDigest)\n</code></pre> <p>\"MutateDigest enables replacement of image tags with digests. Defaults to true.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithrepository","title":"fn spec.rules.verifyImages.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule. If specified Repository will override the default OCI image repository configured for the installation. The repository can also be overridden per Attestor or Attestation.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithrequired","title":"fn spec.rules.verifyImages.withRequired","text":"<pre><code>withRequired(required)\n</code></pre> <p>\"Required validates that images are verified i.e. have matched passed a signature or attestation check.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithtype","title":"fn spec.rules.verifyImages.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type specifies the method of signature validation. The allowed options are Cosign and Notary. By default Cosign is used if a type is not specified.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithusecache","title":"fn spec.rules.verifyImages.withUseCache","text":"<pre><code>withUseCache(useCache)\n</code></pre> <p>\"UseCache enables caching of image verify responses for this rule\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithverifydigest","title":"fn spec.rules.verifyImages.withVerifyDigest","text":"<pre><code>withVerifyDigest(verifyDigest)\n</code></pre> <p>\"VerifyDigest validates that images have a digest.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestations","title":"obj spec.rules.verifyImages.attestations","text":"<p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationswithattestors","title":"fn spec.rules.verifyImages.attestations.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specify the required attestors (i.e. authorities).\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationswithattestorsmixin","title":"fn spec.rules.verifyImages.attestations.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specify the required attestors (i.e. authorities).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationswithconditions","title":"fn spec.rules.verifyImages.attestations.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationswithconditionsmixin","title":"fn spec.rules.verifyImages.attestations.withConditionsMixin","text":"<pre><code>withConditionsMixin(conditions)\n</code></pre> <p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationswithpredicatetype","title":"fn spec.rules.verifyImages.attestations.withPredicateType","text":"<pre><code>withPredicateType(predicateType)\n</code></pre> <p>\"Deprecated in favour of 'Type', to be removed soon\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationswithtype","title":"fn spec.rules.verifyImages.attestations.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type defines the type of attestation contained within the Statement.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestors","title":"obj spec.rules.verifyImages.attestations.attestors","text":"<p>\"Attestors specify the required attestors (i.e. authorities).\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorswithcount","title":"fn spec.rules.verifyImages.attestations.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorswithentries","title":"fn spec.rules.verifyImages.attestations.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorswithentriesmixin","title":"fn spec.rules.verifyImages.attestations.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestorsentries","title":"obj spec.rules.verifyImages.attestations.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieswithannotations","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieswithannotationsmixin","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieswithattestor","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested set of Attestor used to specify a more complex set of match authorities.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieswithrepository","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestorsentriescertificates","title":"obj spec.rules.verifyImages.attestations.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentriescertificateswithcert","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Cert is an optional PEM-encoded public certificate.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentriescertificateswithcertchain","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertChain is an optional PEM encoded set of certificates used to verify.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestorsentriescertificatesctlog","title":"obj spec.rules.verifyImages.attestations.attestors.entries.certificates.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesctlogwithignoresct","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesctlogwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestorsentriescertificatesrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesrekorwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeyless","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithissuer","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithroots","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithsubject","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeylessctlog","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keyless.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessctlogwithignoresct","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessctlogwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeylessrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessrekorwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeys","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithkms","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithpublickeys","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeysctlog","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysctlogwithignoresct","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysctlogwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeysrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysrekorwithpubkey","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeyssecret","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyssecretwithname","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsconditions","title":"obj spec.rules.verifyImages.attestations.conditions","text":"<p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionswithall","title":"fn spec.rules.verifyImages.attestations.conditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionswithallmixin","title":"fn spec.rules.verifyImages.attestations.conditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionswithany","title":"fn spec.rules.verifyImages.attestations.conditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionswithanymixin","title":"fn spec.rules.verifyImages.attestations.conditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsconditionsall","title":"obj spec.rules.verifyImages.attestations.conditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionsallwithkey","title":"fn spec.rules.verifyImages.attestations.conditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionsallwithmessage","title":"fn spec.rules.verifyImages.attestations.conditions.all.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionsallwithoperator","title":"fn spec.rules.verifyImages.attestations.conditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionsallwithvalue","title":"fn spec.rules.verifyImages.attestations.conditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsconditionsany","title":"obj spec.rules.verifyImages.attestations.conditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionsanywithkey","title":"fn spec.rules.verifyImages.attestations.conditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionsanywithmessage","title":"fn spec.rules.verifyImages.attestations.conditions.any.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is an optional display message\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionsanywithoperator","title":"fn spec.rules.verifyImages.attestations.conditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionsanywithvalue","title":"fn spec.rules.verifyImages.attestations.conditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestors","title":"obj spec.rules.verifyImages.attestors","text":"<p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorswithcount","title":"fn spec.rules.verifyImages.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorswithentries","title":"fn spec.rules.verifyImages.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorswithentriesmixin","title":"fn spec.rules.verifyImages.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestorsentries","title":"obj spec.rules.verifyImages.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieswithannotations","title":"fn spec.rules.verifyImages.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieswithannotationsmixin","title":"fn spec.rules.verifyImages.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieswithattestor","title":"fn spec.rules.verifyImages.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested set of Attestor used to specify a more complex set of match authorities.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieswithrepository","title":"fn spec.rules.verifyImages.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestorsentriescertificates","title":"obj spec.rules.verifyImages.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentriescertificateswithcert","title":"fn spec.rules.verifyImages.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Cert is an optional PEM-encoded public certificate.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentriescertificateswithcertchain","title":"fn spec.rules.verifyImages.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertChain is an optional PEM encoded set of certificates used to verify.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestorsentriescertificatesctlog","title":"obj spec.rules.verifyImages.attestors.entries.certificates.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentriescertificatesctlogwithignoresct","title":"fn spec.rules.verifyImages.attestors.entries.certificates.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentriescertificatesctlogwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.certificates.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestorsentriescertificatesrekor","title":"obj spec.rules.verifyImages.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentriescertificatesrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestors.entries.certificates.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentriescertificatesrekorwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.certificates.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestorsentrieskeyless","title":"obj spec.rules.verifyImages.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeylesswithissuer","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeylesswithroots","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeylesswithsubject","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestorsentrieskeylessctlog","title":"obj spec.rules.verifyImages.attestors.entries.keyless.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeylessctlogwithignoresct","title":"fn spec.rules.verifyImages.attestors.entries.keyless.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeylessctlogwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.keyless.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestorsentrieskeylessrekor","title":"obj spec.rules.verifyImages.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeylessrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestors.entries.keyless.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeylessrekorwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.keyless.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestorsentrieskeys","title":"obj spec.rules.verifyImages.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeyswithkms","title":"fn spec.rules.verifyImages.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeyswithpublickeys","title":"fn spec.rules.verifyImages.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.verifyImages.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestorsentrieskeysctlog","title":"obj spec.rules.verifyImages.attestors.entries.keys.ctlog","text":"<p>\"CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeysctlogwithignoresct","title":"fn spec.rules.verifyImages.attestors.entries.keys.ctlog.withIgnoreSCT","text":"<pre><code>withIgnoreSCT(ignoreSCT)\n</code></pre> <p>\"IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate timestamp. Default is false. Set to true if this was opted out during signing.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeysctlogwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.keys.ctlog.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"PubKey, if set, is used to validate SCTs against a custom source.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestorsentrieskeysrekor","title":"obj spec.rules.verifyImages.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeysrekorwithignoretlog","title":"fn spec.rules.verifyImages.attestors.entries.keys.rekor.withIgnoreTlog","text":"<pre><code>withIgnoreTlog(ignoreTlog)\n</code></pre> <p>\"IgnoreTlog skips transparency log verification.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeysrekorwithpubkey","title":"fn spec.rules.verifyImages.attestors.entries.keys.rekor.withPubkey","text":"<pre><code>withPubkey(pubkey)\n</code></pre> <p>\"RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor. If set, this will be used to validate transparency log signatures from a custom Rekor.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeysrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestorsentrieskeyssecret","title":"obj spec.rules.verifyImages.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeyssecretwithname","title":"fn spec.rules.verifyImages.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.verifyImages.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specrulesverifyimagesimageregistrycredentials","title":"obj spec.rules.verifyImages.imageRegistryCredentials","text":"<p>\"ImageRegistryCredentials provides credentials that will be used for authentication with registry\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesimageregistrycredentialswithallowinsecureregistry","title":"fn spec.rules.verifyImages.imageRegistryCredentials.withAllowInsecureRegistry","text":"<pre><code>withAllowInsecureRegistry(allowInsecureRegistry)\n</code></pre> <p>\"AllowInsecureRegistry allows insecure access to a registry.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesimageregistrycredentialswithproviders","title":"fn spec.rules.verifyImages.imageRegistryCredentials.withProviders","text":"<pre><code>withProviders(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesimageregistrycredentialswithprovidersmixin","title":"fn spec.rules.verifyImages.imageRegistryCredentials.withProvidersMixin","text":"<pre><code>withProvidersMixin(providers)\n</code></pre> <p>\"Providers specifies a list of OCI Registry names, whose authentication providers are provided. It can be of one of these values: default,google,azure,amazon,github.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesimageregistrycredentialswithsecrets","title":"fn spec.rules.verifyImages.imageRegistryCredentials.withSecrets","text":"<pre><code>withSecrets(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specrulesverifyimagesimageregistrycredentialswithsecretsmixin","title":"fn spec.rules.verifyImages.imageRegistryCredentials.withSecretsMixin","text":"<pre><code>withSecretsMixin(secrets)\n</code></pre> <p>\"Secrets specifies a list of secrets that are provided for credentials. Secrets must live in the Kyverno namespace.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specvalidationfailureactionoverrides","title":"obj spec.validationFailureActionOverrides","text":"<p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specvalidationfailureactionoverrideswithaction","title":"fn spec.validationFailureActionOverrides.withAction","text":"<pre><code>withAction(action)\n</code></pre> <p>\"ValidationFailureAction defines the policy validation failure action\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specvalidationfailureactionoverrideswithnamespaces","title":"fn spec.validationFailureActionOverrides.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specvalidationfailureactionoverrideswithnamespacesmixin","title":"fn spec.validationFailureActionOverrides.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specvalidationfailureactionoverridesnamespaceselector","title":"obj spec.validationFailureActionOverrides.namespaceSelector","text":"<p>\"A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specvalidationfailureactionoverridesnamespaceselectorwithmatchexpressions","title":"fn spec.validationFailureActionOverrides.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specvalidationfailureactionoverridesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.validationFailureActionOverrides.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specvalidationfailureactionoverridesnamespaceselectorwithmatchlabels","title":"fn spec.validationFailureActionOverrides.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specvalidationfailureactionoverridesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.validationFailureActionOverrides.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policy/#obj-specvalidationfailureactionoverridesnamespaceselectormatchexpressions","title":"obj spec.validationFailureActionOverrides.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specvalidationfailureactionoverridesnamespaceselectormatchexpressionswithkey","title":"fn spec.validationFailureActionOverrides.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specvalidationfailureactionoverridesnamespaceselectormatchexpressionswithoperator","title":"fn spec.validationFailureActionOverrides.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specvalidationfailureactionoverridesnamespaceselectormatchexpressionswithvalues","title":"fn spec.validationFailureActionOverrides.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/policy/#fn-specvalidationfailureactionoverridesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.validationFailureActionOverrides.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/","title":"kyverno.v2beta1.policyException","text":"<p>\"PolicyException declares resources to be excluded from specified policies.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withBackground(background)</code></li> <li><code>fn withExceptions(exceptions)</code></li> <li><code>fn withExceptionsMixin(exceptions)</code></li> <li><code>obj spec.exceptions</code><ul> <li><code>fn withPolicyName(policyName)</code></li> <li><code>fn withRuleNames(ruleNames)</code></li> <li><code>fn withRuleNamesMixin(ruleNames)</code></li> </ul> </li> <li><code>obj spec.match</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.match.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.match.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.match.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.match.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withOperations(operations)</code></li> <li><code>fn withOperationsMixin(operations)</code></li> <li><code>obj spec.match.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.11/kyverno/v2beta1/policyException/#fields","title":"Fields","text":""},{"location":"1.11/kyverno/v2beta1/policyException/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of PolicyException</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#obj-spec","title":"obj spec","text":"<p>\"Spec declares policy exception behaviors.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specwithbackground","title":"fn spec.withBackground","text":"<pre><code>withBackground(background)\n</code></pre> <p>\"Background controls if exceptions are applied to existing policies during a background scan. Optional. Default value is \\\"true\\\". The value must be set to \\\"false\\\" if the policy rule uses variables that are only available in the admission review request (e.g. user name).\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specwithexceptions","title":"fn spec.withExceptions","text":"<pre><code>withExceptions(exceptions)\n</code></pre> <p>\"Exceptions is a list policy/rules to be excluded\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specwithexceptionsmixin","title":"fn spec.withExceptionsMixin","text":"<pre><code>withExceptionsMixin(exceptions)\n</code></pre> <p>\"Exceptions is a list policy/rules to be excluded\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#obj-specexceptions","title":"obj spec.exceptions","text":"<p>\"Exceptions is a list policy/rules to be excluded\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specexceptionswithpolicyname","title":"fn spec.exceptions.withPolicyName","text":"<pre><code>withPolicyName(policyName)\n</code></pre> <p>\"PolicyName identifies the policy to which the exception is applied. The policy name uses the format / unless it references a ClusterPolicy.\""},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specexceptionswithrulenames","title":"fn spec.exceptions.withRuleNames","text":"<pre><code>withRuleNames(ruleNames)\n</code></pre> <p>\"RuleNames identifies the rules to which the exception is applied.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specexceptionswithrulenamesmixin","title":"fn spec.exceptions.withRuleNamesMixin","text":"<pre><code>withRuleNamesMixin(ruleNames)\n</code></pre> <p>\"RuleNames identifies the rules to which the exception is applied.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#obj-specmatch","title":"obj spec.match","text":"<p>\"Match defines match clause used to check if a resource applies to the exception\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchwithall","title":"fn spec.match.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchwithallmixin","title":"fn spec.match.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchwithany","title":"fn spec.match.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchwithanymixin","title":"fn spec.match.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#obj-specmatchall","title":"obj spec.match.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallwithclusterroles","title":"fn spec.match.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallwithclusterrolesmixin","title":"fn spec.match.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallwithroles","title":"fn spec.match.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallwithrolesmixin","title":"fn spec.match.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallwithsubjects","title":"fn spec.match.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallwithsubjectsmixin","title":"fn spec.match.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#obj-specmatchallresources","title":"obj spec.match.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourceswithannotations","title":"fn spec.match.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourceswithannotationsmixin","title":"fn spec.match.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourceswithkinds","title":"fn spec.match.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourceswithkindsmixin","title":"fn spec.match.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourceswithname","title":"fn spec.match.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourceswithnames","title":"fn spec.match.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourceswithnamesmixin","title":"fn spec.match.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourceswithnamespaces","title":"fn spec.match.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourceswithnamespacesmixin","title":"fn spec.match.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourceswithoperations","title":"fn spec.match.all.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourceswithoperationsmixin","title":"fn spec.match.all.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#obj-specmatchallresourcesnamespaceselector","title":"obj spec.match.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.match.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.match.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.match.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.match.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#obj-specmatchallresourcesnamespaceselectormatchexpressions","title":"obj spec.match.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#obj-specmatchallresourcesselector","title":"obj spec.match.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourcesselectorwithmatchexpressions","title":"fn spec.match.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.match.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourcesselectorwithmatchlabels","title":"fn spec.match.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourcesselectorwithmatchlabelsmixin","title":"fn spec.match.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#obj-specmatchallresourcesselectormatchexpressions","title":"obj spec.match.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourcesselectormatchexpressionswithkey","title":"fn spec.match.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourcesselectormatchexpressionswithoperator","title":"fn spec.match.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourcesselectormatchexpressionswithvalues","title":"fn spec.match.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.match.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#obj-specmatchallsubjects","title":"obj spec.match.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallsubjectswithapigroup","title":"fn spec.match.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallsubjectswithkind","title":"fn spec.match.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallsubjectswithname","title":"fn spec.match.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchallsubjectswithnamespace","title":"fn spec.match.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#obj-specmatchany","title":"obj spec.match.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanywithclusterroles","title":"fn spec.match.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanywithclusterrolesmixin","title":"fn spec.match.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanywithroles","title":"fn spec.match.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanywithrolesmixin","title":"fn spec.match.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanywithsubjects","title":"fn spec.match.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanywithsubjectsmixin","title":"fn spec.match.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#obj-specmatchanyresources","title":"obj spec.match.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourceswithannotations","title":"fn spec.match.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourceswithannotationsmixin","title":"fn spec.match.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourceswithkinds","title":"fn spec.match.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourceswithkindsmixin","title":"fn spec.match.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourceswithname","title":"fn spec.match.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourceswithnames","title":"fn spec.match.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourceswithnamesmixin","title":"fn spec.match.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourceswithnamespaces","title":"fn spec.match.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourceswithnamespacesmixin","title":"fn spec.match.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourceswithoperations","title":"fn spec.match.any.resources.withOperations","text":"<pre><code>withOperations(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourceswithoperationsmixin","title":"fn spec.match.any.resources.withOperationsMixin","text":"<pre><code>withOperationsMixin(operations)\n</code></pre> <p>\"Operations can contain values [\\\"CREATE, \\\"UPDATE\\\", \\\"CONNECT\\\", \\\"DELETE\\\"], which are used to match a specific action.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#obj-specmatchanyresourcesnamespaceselector","title":"obj spec.match.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.match.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.match.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.match.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.match.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#obj-specmatchanyresourcesnamespaceselectormatchexpressions","title":"obj spec.match.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#obj-specmatchanyresourcesselector","title":"obj spec.match.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourcesselectorwithmatchexpressions","title":"fn spec.match.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.match.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourcesselectorwithmatchlabels","title":"fn spec.match.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.match.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#obj-specmatchanyresourcesselectormatchexpressions","title":"obj spec.match.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourcesselectormatchexpressionswithkey","title":"fn spec.match.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourcesselectormatchexpressionswithoperator","title":"fn spec.match.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourcesselectormatchexpressionswithvalues","title":"fn spec.match.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.match.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#obj-specmatchanysubjects","title":"obj spec.match.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanysubjectswithapigroup","title":"fn spec.match.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanysubjectswithkind","title":"fn spec.match.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanysubjectswithname","title":"fn spec.match.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.11/kyverno/v2beta1/policyException/#fn-specmatchanysubjectswithnamespace","title":"fn spec.match.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.6/","title":"kyverno","text":"<pre><code>local kyverno = import \"github.com/jsonnet-libs/kyverno-libsonnet/1.6/main.libsonnet\"\n</code></pre> <ul> <li>kyverno</li> </ul>"},{"location":"1.6/kyverno/","title":"kyverno","text":"<ul> <li>v1</li> <li>v1alpha1</li> <li>v1alpha2</li> </ul>"},{"location":"1.6/kyverno/v1/","title":"kyverno.v1","text":"<ul> <li>clusterPolicy</li> <li>generateRequest</li> <li>policy</li> </ul>"},{"location":"1.6/kyverno/v1/clusterPolicy/","title":"kyverno.v1.clusterPolicy","text":"<p>\"ClusterPolicy declares validation, mutation, and generation behaviors for matching resources.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withBackground(background)</code></li> <li><code>fn withFailurePolicy(failurePolicy)</code></li> <li><code>fn withRules(rules)</code></li> <li><code>fn withRulesMixin(rules)</code></li> <li><code>fn withSchemaValidation(schemaValidation)</code></li> <li><code>fn withValidationFailureAction(validationFailureAction)</code></li> <li><code>fn withValidationFailureActionOverrides(validationFailureActionOverrides)</code></li> <li><code>fn withValidationFailureActionOverridesMixin(validationFailureActionOverrides)</code></li> <li><code>fn withWebhookTimeoutSeconds(webhookTimeoutSeconds)</code></li> <li><code>obj spec.rules</code><ul> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPreconditions(preconditions)</code></li> <li><code>fn withVerifyImages(verifyImages)</code></li> <li><code>fn withVerifyImagesMixin(verifyImages)</code></li> <li><code>obj spec.rules.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.context.apiCall</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> </ul> </li> <li><code>obj spec.rules.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.exclude.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.exclude.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.exclude.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.generate</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withData(data)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withSynchronize(synchronize)</code></li> <li><code>obj spec.rules.generate.clone</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.match.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.match.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.match.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate</code><ul> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withForeachMixin(foreach)</code></li> <li><code>fn withPatchStrategicMerge(patchStrategicMerge)</code></li> <li><code>fn withPatchesJson6902(patchesJson6902)</code></li> <li><code>obj spec.rules.mutate.foreach</code><ul> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withList(list)</code></li> <li><code>fn withPatchStrategicMerge(patchStrategicMerge)</code></li> <li><code>fn withPatchesJson6902(patchesJson6902)</code></li> <li><code>obj spec.rules.mutate.foreach.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.mutate.foreach.context.apiCall</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.mutate.foreach.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate</code><ul> <li><code>fn withAnyPattern(anyPattern)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withForeachMixin(foreach)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPattern(pattern)</code></li> <li><code>obj spec.rules.validate.deny</code><ul> <li><code>fn withConditions(conditions)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach</code><ul> <li><code>fn withAnyPattern(anyPattern)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withElementScope(elementScope)</code></li> <li><code>fn withList(list)</code></li> <li><code>fn withPattern(pattern)</code></li> <li><code>obj spec.rules.validate.foreach.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.validate.foreach.context.apiCall</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach.deny</code><ul> <li><code>fn withConditions(conditions)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.validate.foreach.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestations(attestations)</code></li> <li><code>fn withAttestationsMixin(attestations)</code></li> <li><code>fn withImage(image)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.verifyImages.attestations</code><ul> <li><code>fn withConditions(conditions)</code></li> <li><code>fn withConditionsMixin(conditions)</code></li> <li><code>fn withPredicateType(predicateType)</code></li> <li><code>obj spec.rules.verifyImages.attestations.conditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.verifyImages.attestations.conditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.conditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.validationFailureActionOverrides</code><ul> <li><code>fn withAction(action)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fields","title":"Fields","text":""},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ClusterPolicy</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec declares policy behaviors.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specwithbackground","title":"fn spec.withBackground","text":"<pre><code>withBackground(background)\n</code></pre> <p>\"Background controls if rules are applied to existing resources during a background scan. Optional. Default value is \\\"true\\\". The value must be set to \\\"false\\\" if the policy rule uses variables that are only available in the admission review request (e.g. user name).\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specwithfailurepolicy","title":"fn spec.withFailurePolicy","text":"<pre><code>withFailurePolicy(failurePolicy)\n</code></pre> <p>\"FailurePolicy defines how unrecognized errors from the admission endpoint are handled. Rules within the same policy share the same failure behavior. Allowed values are Ignore or Fail. Defaults to Fail.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specwithrules","title":"fn spec.withRules","text":"<pre><code>withRules(rules)\n</code></pre> <p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specwithrulesmixin","title":"fn spec.withRulesMixin","text":"<pre><code>withRulesMixin(rules)\n</code></pre> <p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specwithschemavalidation","title":"fn spec.withSchemaValidation","text":"<pre><code>withSchemaValidation(schemaValidation)\n</code></pre> <p>\"SchemaValidation skips policy validation checks. Optional. The default value is set to \\\"true\\\", it must be set to \\\"false\\\" to disable the validation checks.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specwithvalidationfailureaction","title":"fn spec.withValidationFailureAction","text":"<pre><code>withValidationFailureAction(validationFailureAction)\n</code></pre> <p>\"ValidationFailureAction controls if a validation policy rule failure should disallow the admission review request (enforce), or allow (audit) the admission review request and report an error in a policy report. Optional. The default value is \\\"audit\\\".\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specwithvalidationfailureactionoverrides","title":"fn spec.withValidationFailureActionOverrides","text":"<pre><code>withValidationFailureActionOverrides(validationFailureActionOverrides)\n</code></pre> <p>\"ValidationFailureActionOverrides is a Cluter Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specwithvalidationfailureactionoverridesmixin","title":"fn spec.withValidationFailureActionOverridesMixin","text":"<pre><code>withValidationFailureActionOverridesMixin(validationFailureActionOverrides)\n</code></pre> <p>\"ValidationFailureActionOverrides is a Cluter Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specwithwebhooktimeoutseconds","title":"fn spec.withWebhookTimeoutSeconds","text":"<pre><code>withWebhookTimeoutSeconds(webhookTimeoutSeconds)\n</code></pre> <p>\"WebhookTimeoutSeconds specifies the maximum time in seconds allowed to apply this policy. After the configured time expires, the admission request may fail, or may simply ignore the policy results, based on the failure policy. The default timeout is 10s, the value must be between 1 and 30 seconds.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrules","title":"obj spec.rules","text":"<p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specruleswithcontext","title":"fn spec.rules.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specruleswithcontextmixin","title":"fn spec.rules.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specruleswithname","title":"fn spec.rules.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a label to identify the rule, It must be unique within the policy.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specruleswithpreconditions","title":"fn spec.rules.withPreconditions","text":"<pre><code>withPreconditions(preconditions)\n</code></pre> <p>\"Preconditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. A direct list of conditions (without <code>any</code> or <code>all</code> statements is supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specruleswithverifyimages","title":"fn spec.rules.withVerifyImages","text":"<pre><code>withVerifyImages(verifyImages)\n</code></pre> <p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specruleswithverifyimagesmixin","title":"fn spec.rules.withVerifyImagesMixin","text":"<pre><code>withVerifyImagesMixin(verifyImages)\n</code></pre> <p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulescontext","title":"obj spec.rules.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulescontextwithname","title":"fn spec.rules.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulescontextapicall","title":"obj spec.rules.context.apiCall","text":"<p>\"APICall defines an HTTP request to the Kubernetes API server. The JSON data retrieved is stored in the context.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulescontextapicallwithjmespath","title":"fn spec.rules.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the API server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response to the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulescontextapicallwithurlpath","title":"fn spec.rules.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulescontextconfigmap","title":"obj spec.rules.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulescontextconfigmapwithname","title":"fn spec.rules.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulescontextconfigmapwithnamespace","title":"fn spec.rules.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulescontextimageregistry","title":"obj spec.rules.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulescontextimageregistrywithjmespath","title":"fn spec.rules.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulescontextimageregistrywithreference","title":"fn spec.rules.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexclude","title":"obj spec.rules.exclude","text":"<p>\"ExcludeResources defines when this policy rule should not be applied. The exclude criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the name or role.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithall","title":"fn spec.rules.exclude.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithallmixin","title":"fn spec.rules.exclude.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithany","title":"fn spec.rules.exclude.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithanymixin","title":"fn spec.rules.exclude.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithclusterroles","title":"fn spec.rules.exclude.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithclusterrolesmixin","title":"fn spec.rules.exclude.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithroles","title":"fn spec.rules.exclude.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithrolesmixin","title":"fn spec.rules.exclude.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithsubjects","title":"fn spec.rules.exclude.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithsubjectsmixin","title":"fn spec.rules.exclude.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexcludeall","title":"obj spec.rules.exclude.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallwithclusterroles","title":"fn spec.rules.exclude.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallwithclusterrolesmixin","title":"fn spec.rules.exclude.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallwithroles","title":"fn spec.rules.exclude.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallwithrolesmixin","title":"fn spec.rules.exclude.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallwithsubjects","title":"fn spec.rules.exclude.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallwithsubjectsmixin","title":"fn spec.rules.exclude.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexcludeallresources","title":"obj spec.rules.exclude.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithannotations","title":"fn spec.rules.exclude.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithannotationsmixin","title":"fn spec.rules.exclude.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithkinds","title":"fn spec.rules.exclude.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithkindsmixin","title":"fn spec.rules.exclude.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithname","title":"fn spec.rules.exclude.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithnames","title":"fn spec.rules.exclude.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithnamesmixin","title":"fn spec.rules.exclude.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithnamespaces","title":"fn spec.rules.exclude.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithnamespacesmixin","title":"fn spec.rules.exclude.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexcludeallresourcesnamespaceselector","title":"obj spec.rules.exclude.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexcludeallresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexcludeallresourcesselector","title":"obj spec.rules.exclude.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexcludeallresourcesselectormatchexpressions","title":"obj spec.rules.exclude.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexcludeallsubjects","title":"obj spec.rules.exclude.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallsubjectswithapigroup","title":"fn spec.rules.exclude.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallsubjectswithkind","title":"fn spec.rules.exclude.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallsubjectswithname","title":"fn spec.rules.exclude.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallsubjectswithnamespace","title":"fn spec.rules.exclude.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexcludeany","title":"obj spec.rules.exclude.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanywithclusterroles","title":"fn spec.rules.exclude.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanywithclusterrolesmixin","title":"fn spec.rules.exclude.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanywithroles","title":"fn spec.rules.exclude.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanywithrolesmixin","title":"fn spec.rules.exclude.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanywithsubjects","title":"fn spec.rules.exclude.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanywithsubjectsmixin","title":"fn spec.rules.exclude.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexcludeanyresources","title":"obj spec.rules.exclude.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithannotations","title":"fn spec.rules.exclude.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithannotationsmixin","title":"fn spec.rules.exclude.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithkinds","title":"fn spec.rules.exclude.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithkindsmixin","title":"fn spec.rules.exclude.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithname","title":"fn spec.rules.exclude.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithnames","title":"fn spec.rules.exclude.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithnamesmixin","title":"fn spec.rules.exclude.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithnamespaces","title":"fn spec.rules.exclude.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithnamespacesmixin","title":"fn spec.rules.exclude.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexcludeanyresourcesnamespaceselector","title":"obj spec.rules.exclude.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexcludeanyresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexcludeanyresourcesselector","title":"obj spec.rules.exclude.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexcludeanyresourcesselectormatchexpressions","title":"obj spec.rules.exclude.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexcludeanysubjects","title":"obj spec.rules.exclude.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanysubjectswithapigroup","title":"fn spec.rules.exclude.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanysubjectswithkind","title":"fn spec.rules.exclude.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanysubjectswithname","title":"fn spec.rules.exclude.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanysubjectswithnamespace","title":"fn spec.rules.exclude.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexcluderesources","title":"obj spec.rules.exclude.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified. Specifying ResourceDescription directly under exclude is being deprecated. Please specify under \\\"any\\\" or \\\"all\\\" instead.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithannotations","title":"fn spec.rules.exclude.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithannotationsmixin","title":"fn spec.rules.exclude.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithkinds","title":"fn spec.rules.exclude.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithkindsmixin","title":"fn spec.rules.exclude.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithname","title":"fn spec.rules.exclude.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithnames","title":"fn spec.rules.exclude.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithnamesmixin","title":"fn spec.rules.exclude.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithnamespaces","title":"fn spec.rules.exclude.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithnamespacesmixin","title":"fn spec.rules.exclude.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexcluderesourcesnamespaceselector","title":"obj spec.rules.exclude.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexcluderesourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexcluderesourcesselector","title":"obj spec.rules.exclude.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexcluderesourcesselectormatchexpressions","title":"obj spec.rules.exclude.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesexcludesubjects","title":"obj spec.rules.exclude.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludesubjectswithapigroup","title":"fn spec.rules.exclude.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludesubjectswithkind","title":"fn spec.rules.exclude.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludesubjectswithname","title":"fn spec.rules.exclude.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesexcludesubjectswithnamespace","title":"fn spec.rules.exclude.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesgenerate","title":"obj spec.rules.generate","text":"<p>\"Generation is used to create new resources.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesgeneratewithapiversion","title":"fn spec.rules.generate.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesgeneratewithdata","title":"fn spec.rules.generate.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data provides the resource declaration used to populate each generated resource. At most one of Data or Clone must be specified. If neither are provided, the generated resource will be created with default data only.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesgeneratewithkind","title":"fn spec.rules.generate.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesgeneratewithname","title":"fn spec.rules.generate.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesgeneratewithnamespace","title":"fn spec.rules.generate.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesgeneratewithsynchronize","title":"fn spec.rules.generate.withSynchronize","text":"<pre><code>withSynchronize(synchronize)\n</code></pre> <p>\"Synchronize controls if generated resources should be kept in-sync with their source resource. If Synchronize is set to \\\"true\\\" changes to generated resources will be overwritten with resource data from Data or the resource specified in the Clone declaration. Optional. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesgenerateclone","title":"obj spec.rules.generate.clone","text":"<p>\"Clone specifies the source resource used to populate each generated resource. At most one of Data or Clone can be specified. If neither are provided, the generated resource will be created with default data only.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonewithname","title":"fn spec.rules.generate.clone.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies name of the resource.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonewithnamespace","title":"fn spec.rules.generate.clone.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies source resource namespace.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatch","title":"obj spec.rules.match","text":"<p>\"MatchResources defines when this policy rule should be applied. The match criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the user name or role. At least one kind is required.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithall","title":"fn spec.rules.match.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithallmixin","title":"fn spec.rules.match.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithany","title":"fn spec.rules.match.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithanymixin","title":"fn spec.rules.match.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithclusterroles","title":"fn spec.rules.match.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithclusterrolesmixin","title":"fn spec.rules.match.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithroles","title":"fn spec.rules.match.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithrolesmixin","title":"fn spec.rules.match.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithsubjects","title":"fn spec.rules.match.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithsubjectsmixin","title":"fn spec.rules.match.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatchall","title":"obj spec.rules.match.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallwithclusterroles","title":"fn spec.rules.match.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallwithclusterrolesmixin","title":"fn spec.rules.match.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallwithroles","title":"fn spec.rules.match.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallwithrolesmixin","title":"fn spec.rules.match.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallwithsubjects","title":"fn spec.rules.match.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallwithsubjectsmixin","title":"fn spec.rules.match.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatchallresources","title":"obj spec.rules.match.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithannotations","title":"fn spec.rules.match.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithannotationsmixin","title":"fn spec.rules.match.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithkinds","title":"fn spec.rules.match.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithkindsmixin","title":"fn spec.rules.match.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithname","title":"fn spec.rules.match.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithnames","title":"fn spec.rules.match.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithnamesmixin","title":"fn spec.rules.match.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithnamespaces","title":"fn spec.rules.match.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithnamespacesmixin","title":"fn spec.rules.match.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatchallresourcesnamespaceselector","title":"obj spec.rules.match.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatchallresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatchallresourcesselector","title":"obj spec.rules.match.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectorwithmatchlabels","title":"fn spec.rules.match.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatchallresourcesselectormatchexpressions","title":"obj spec.rules.match.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatchallsubjects","title":"obj spec.rules.match.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallsubjectswithapigroup","title":"fn spec.rules.match.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallsubjectswithkind","title":"fn spec.rules.match.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallsubjectswithname","title":"fn spec.rules.match.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchallsubjectswithnamespace","title":"fn spec.rules.match.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatchany","title":"obj spec.rules.match.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanywithclusterroles","title":"fn spec.rules.match.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanywithclusterrolesmixin","title":"fn spec.rules.match.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanywithroles","title":"fn spec.rules.match.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanywithrolesmixin","title":"fn spec.rules.match.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanywithsubjects","title":"fn spec.rules.match.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanywithsubjectsmixin","title":"fn spec.rules.match.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatchanyresources","title":"obj spec.rules.match.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithannotations","title":"fn spec.rules.match.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithannotationsmixin","title":"fn spec.rules.match.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithkinds","title":"fn spec.rules.match.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithkindsmixin","title":"fn spec.rules.match.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithname","title":"fn spec.rules.match.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithnames","title":"fn spec.rules.match.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithnamesmixin","title":"fn spec.rules.match.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithnamespaces","title":"fn spec.rules.match.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithnamespacesmixin","title":"fn spec.rules.match.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatchanyresourcesnamespaceselector","title":"obj spec.rules.match.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatchanyresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatchanyresourcesselector","title":"obj spec.rules.match.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectorwithmatchlabels","title":"fn spec.rules.match.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatchanyresourcesselectormatchexpressions","title":"obj spec.rules.match.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatchanysubjects","title":"obj spec.rules.match.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanysubjectswithapigroup","title":"fn spec.rules.match.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanysubjectswithkind","title":"fn spec.rules.match.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanysubjectswithname","title":"fn spec.rules.match.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchanysubjectswithnamespace","title":"fn spec.rules.match.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatchresources","title":"obj spec.rules.match.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified. Requires at least one tag to be specified when under MatchResources. Specifying ResourceDescription directly under match is being deprecated. Please specify under \\\"any\\\" or \\\"all\\\" instead.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithannotations","title":"fn spec.rules.match.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithannotationsmixin","title":"fn spec.rules.match.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithkinds","title":"fn spec.rules.match.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithkindsmixin","title":"fn spec.rules.match.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithname","title":"fn spec.rules.match.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithnames","title":"fn spec.rules.match.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithnamesmixin","title":"fn spec.rules.match.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithnamespaces","title":"fn spec.rules.match.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithnamespacesmixin","title":"fn spec.rules.match.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatchresourcesnamespaceselector","title":"obj spec.rules.match.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatchresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatchresourcesselector","title":"obj spec.rules.match.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectorwithmatchlabels","title":"fn spec.rules.match.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatchresourcesselectormatchexpressions","title":"obj spec.rules.match.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmatchsubjects","title":"obj spec.rules.match.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchsubjectswithapigroup","title":"fn spec.rules.match.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchsubjectswithkind","title":"fn spec.rules.match.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchsubjectswithname","title":"fn spec.rules.match.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmatchsubjectswithnamespace","title":"fn spec.rules.match.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmutate","title":"obj spec.rules.mutate","text":"<p>\"Mutation is used to modify matching resources.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutatewithforeach","title":"fn spec.rules.mutate.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"ForEachMutation applies policy rule changes to nested elements.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutatewithforeachmixin","title":"fn spec.rules.mutate.withForeachMixin","text":"<pre><code>withForeachMixin(foreach)\n</code></pre> <p>\"ForEachMutation applies policy rule changes to nested elements.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutatewithpatchstrategicmerge","title":"fn spec.rules.mutate.withPatchStrategicMerge","text":"<pre><code>withPatchStrategicMerge(patchStrategicMerge)\n</code></pre> <p>\"PatchStrategicMerge is a strategic merge patch used to modify resources. See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutatewithpatchesjson6902","title":"fn spec.rules.mutate.withPatchesJson6902","text":"<pre><code>withPatchesJson6902(patchesJson6902)\n</code></pre> <p>\"PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources. See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeach","title":"obj spec.rules.mutate.foreach","text":"<p>\"ForEachMutation applies policy rule changes to nested elements.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachwithcontext","title":"fn spec.rules.mutate.foreach.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachwithcontextmixin","title":"fn spec.rules.mutate.foreach.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachwithlist","title":"fn spec.rules.mutate.foreach.withList","text":"<pre><code>withList(list)\n</code></pre> <p>\"List specifies a JMESPath expression that results in one or more elements to which the validation logic is applied.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachwithpatchstrategicmerge","title":"fn spec.rules.mutate.foreach.withPatchStrategicMerge","text":"<pre><code>withPatchStrategicMerge(patchStrategicMerge)\n</code></pre> <p>\"PatchStrategicMerge is a strategic merge patch used to modify resources. See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachwithpatchesjson6902","title":"fn spec.rules.mutate.foreach.withPatchesJson6902","text":"<pre><code>withPatchesJson6902(patchesJson6902)\n</code></pre> <p>\"PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources. See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachcontext","title":"obj spec.rules.mutate.foreach.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextwithname","title":"fn spec.rules.mutate.foreach.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachcontextapicall","title":"obj spec.rules.mutate.foreach.context.apiCall","text":"<p>\"APICall defines an HTTP request to the Kubernetes API server. The JSON data retrieved is stored in the context.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextapicallwithjmespath","title":"fn spec.rules.mutate.foreach.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the API server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response to the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextapicallwithurlpath","title":"fn spec.rules.mutate.foreach.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachcontextconfigmap","title":"obj spec.rules.mutate.foreach.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextconfigmapwithname","title":"fn spec.rules.mutate.foreach.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextconfigmapwithnamespace","title":"fn spec.rules.mutate.foreach.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachcontextimageregistry","title":"obj spec.rules.mutate.foreach.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextimageregistrywithjmespath","title":"fn spec.rules.mutate.foreach.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextimageregistrywithreference","title":"fn spec.rules.mutate.foreach.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachpreconditions","title":"obj spec.rules.mutate.foreach.preconditions","text":"<p>\"AnyAllConditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionswithall","title":"fn spec.rules.mutate.foreach.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionswithallmixin","title":"fn spec.rules.mutate.foreach.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionswithany","title":"fn spec.rules.mutate.foreach.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionswithanymixin","title":"fn spec.rules.mutate.foreach.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachpreconditionsall","title":"obj spec.rules.mutate.foreach.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsallwithkey","title":"fn spec.rules.mutate.foreach.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsallwithoperator","title":"fn spec.rules.mutate.foreach.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsallwithvalue","title":"fn spec.rules.mutate.foreach.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using using JMESPath.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachpreconditionsany","title":"obj spec.rules.mutate.foreach.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsanywithkey","title":"fn spec.rules.mutate.foreach.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsanywithoperator","title":"fn spec.rules.mutate.foreach.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsanywithvalue","title":"fn spec.rules.mutate.foreach.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using using JMESPath.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesvalidate","title":"obj spec.rules.validate","text":"<p>\"Validation is used to validate matching resources.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidatewithanypattern","title":"fn spec.rules.validate.withAnyPattern","text":"<pre><code>withAnyPattern(anyPattern)\n</code></pre> <p>\"AnyPattern specifies list of validation patterns. At least one of the patterns must be satisfied for the validation rule to succeed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidatewithforeach","title":"fn spec.rules.validate.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"ForEach applies policy rule changes to nested elements.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidatewithforeachmixin","title":"fn spec.rules.validate.withForeachMixin","text":"<pre><code>withForeachMixin(foreach)\n</code></pre> <p>\"ForEach applies policy rule changes to nested elements.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidatewithmessage","title":"fn spec.rules.validate.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message specifies a custom message to be displayed on failure.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidatewithpattern","title":"fn spec.rules.validate.withPattern","text":"<pre><code>withPattern(pattern)\n</code></pre> <p>\"Pattern specifies an overlay-style pattern used to check resources.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesvalidatedeny","title":"obj spec.rules.validate.deny","text":"<p>\"Deny defines conditions used to pass or fail a validation rule.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidatedenywithconditions","title":"fn spec.rules.validate.deny.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Multiple conditions can be declared under an <code>any</code> or <code>all</code> statement. A direct list of conditions (without <code>any</code> or <code>all</code> statements) is also supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/validate/#deny-rules\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeach","title":"obj spec.rules.validate.foreach","text":"<p>\"ForEach applies policy rule changes to nested elements.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachwithanypattern","title":"fn spec.rules.validate.foreach.withAnyPattern","text":"<pre><code>withAnyPattern(anyPattern)\n</code></pre> <p>\"AnyPattern specifies list of validation patterns. At least one of the patterns must be satisfied for the validation rule to succeed.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachwithcontext","title":"fn spec.rules.validate.foreach.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachwithcontextmixin","title":"fn spec.rules.validate.foreach.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachwithelementscope","title":"fn spec.rules.validate.foreach.withElementScope","text":"<pre><code>withElementScope(elementScope)\n</code></pre> <p>\"ElementScope specifies whether to use the current list element as the scope for validation. Defaults to \\\"true\\\" if not specified. When set to \\\"false\\\", \\\"request.object\\\" is used as the validation scope within the foreach block to allow referencing other elements in the subtree.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachwithlist","title":"fn spec.rules.validate.foreach.withList","text":"<pre><code>withList(list)\n</code></pre> <p>\"List specifies a JMESPath expression that results in one or more elements to which the validation logic is applied.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachwithpattern","title":"fn spec.rules.validate.foreach.withPattern","text":"<pre><code>withPattern(pattern)\n</code></pre> <p>\"Pattern specifies an overlay-style pattern used to check resources.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachcontext","title":"obj spec.rules.validate.foreach.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextwithname","title":"fn spec.rules.validate.foreach.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachcontextapicall","title":"obj spec.rules.validate.foreach.context.apiCall","text":"<p>\"APICall defines an HTTP request to the Kubernetes API server. The JSON data retrieved is stored in the context.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicallwithjmespath","title":"fn spec.rules.validate.foreach.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the API server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response to the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicallwithurlpath","title":"fn spec.rules.validate.foreach.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachcontextconfigmap","title":"obj spec.rules.validate.foreach.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextconfigmapwithname","title":"fn spec.rules.validate.foreach.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextconfigmapwithnamespace","title":"fn spec.rules.validate.foreach.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachcontextimageregistry","title":"obj spec.rules.validate.foreach.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextimageregistrywithjmespath","title":"fn spec.rules.validate.foreach.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextimageregistrywithreference","title":"fn spec.rules.validate.foreach.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachdeny","title":"obj spec.rules.validate.foreach.deny","text":"<p>\"Deny defines conditions used to pass or fail a validation rule.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachdenywithconditions","title":"fn spec.rules.validate.foreach.deny.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Multiple conditions can be declared under an <code>any</code> or <code>all</code> statement. A direct list of conditions (without <code>any</code> or <code>all</code> statements) is also supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/validate/#deny-rules\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachpreconditions","title":"obj spec.rules.validate.foreach.preconditions","text":"<p>\"AnyAllConditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionswithall","title":"fn spec.rules.validate.foreach.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionswithallmixin","title":"fn spec.rules.validate.foreach.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionswithany","title":"fn spec.rules.validate.foreach.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionswithanymixin","title":"fn spec.rules.validate.foreach.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachpreconditionsall","title":"obj spec.rules.validate.foreach.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsallwithkey","title":"fn spec.rules.validate.foreach.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsallwithoperator","title":"fn spec.rules.validate.foreach.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsallwithvalue","title":"fn spec.rules.validate.foreach.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using using JMESPath.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachpreconditionsany","title":"obj spec.rules.validate.foreach.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsanywithkey","title":"fn spec.rules.validate.foreach.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsanywithoperator","title":"fn spec.rules.validate.foreach.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsanywithvalue","title":"fn spec.rules.validate.foreach.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using using JMESPath.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesverifyimages","title":"obj spec.rules.verifyImages","text":"<p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithannotations","title":"fn spec.rules.verifyImages.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithannotationsmixin","title":"fn spec.rules.verifyImages.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithattestations","title":"fn spec.rules.verifyImages.withAttestations","text":"<pre><code>withAttestations(attestations)\n</code></pre> <p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithattestationsmixin","title":"fn spec.rules.verifyImages.withAttestationsMixin","text":"<pre><code>withAttestationsMixin(attestations)\n</code></pre> <p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithimage","title":"fn spec.rules.verifyImages.withImage","text":"<pre><code>withImage(image)\n</code></pre> <p>\"Image is the image name consisting of the registry address, repository, image, and tag. Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithissuer","title":"fn spec.rules.verifyImages.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithkey","title":"fn spec.rules.verifyImages.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the PEM encoded public key that the image or attestation is signed with.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithrepository","title":"fn spec.rules.verifyImages.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for image signatures that match this rule. If specified Repository will override the default OCI image repository configured for the installation.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithroots","title":"fn spec.rules.verifyImages.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is the PEM encoded Root certificate chain used for keyless signing\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithsubject","title":"fn spec.rules.verifyImages.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestations","title":"obj spec.rules.verifyImages.attestations","text":"<p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationswithconditions","title":"fn spec.rules.verifyImages.attestations.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationswithconditionsmixin","title":"fn spec.rules.verifyImages.attestations.withConditionsMixin","text":"<pre><code>withConditionsMixin(conditions)\n</code></pre> <p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationswithpredicatetype","title":"fn spec.rules.verifyImages.attestations.withPredicateType","text":"<pre><code>withPredicateType(predicateType)\n</code></pre> <p>\"PredicateType defines the type of Predicate contained within the Statement.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsconditions","title":"obj spec.rules.verifyImages.attestations.conditions","text":"<p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionswithall","title":"fn spec.rules.verifyImages.attestations.conditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionswithallmixin","title":"fn spec.rules.verifyImages.attestations.conditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionswithany","title":"fn spec.rules.verifyImages.attestations.conditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionswithanymixin","title":"fn spec.rules.verifyImages.attestations.conditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsconditionsall","title":"obj spec.rules.verifyImages.attestations.conditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsallwithkey","title":"fn spec.rules.verifyImages.attestations.conditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsallwithoperator","title":"fn spec.rules.verifyImages.attestations.conditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsallwithvalue","title":"fn spec.rules.verifyImages.attestations.conditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using using JMESPath.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsconditionsany","title":"obj spec.rules.verifyImages.attestations.conditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsanywithkey","title":"fn spec.rules.verifyImages.attestations.conditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsanywithoperator","title":"fn spec.rules.verifyImages.attestations.conditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsanywithvalue","title":"fn spec.rules.verifyImages.attestations.conditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using using JMESPath.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#obj-specvalidationfailureactionoverrides","title":"obj spec.validationFailureActionOverrides","text":"<p>\"ValidationFailureActionOverrides is a Cluter Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specvalidationfailureactionoverrideswithaction","title":"fn spec.validationFailureActionOverrides.withAction","text":"<pre><code>withAction(action)\n</code></pre>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specvalidationfailureactionoverrideswithnamespaces","title":"fn spec.validationFailureActionOverrides.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"1.6/kyverno/v1/clusterPolicy/#fn-specvalidationfailureactionoverrideswithnamespacesmixin","title":"fn spec.validationFailureActionOverrides.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/generateRequest/","title":"kyverno.v1.generateRequest","text":"<p>\"GenerateRequest is a request to process generate rule.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withPolicy(policy)</code></li> <li><code>obj spec.context</code><ul> <li><code>obj spec.context.admissionRequestInfo</code><ul> <li><code>fn withAdmissionRequest(admissionRequest)</code></li> <li><code>fn withOperation(operation)</code></li> </ul> </li> <li><code>obj spec.context.userInfo</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>obj spec.context.userInfo.userInfo</code><ul> <li><code>fn withExtra(extra)</code></li> <li><code>fn withExtraMixin(extra)</code></li> <li><code>fn withGroups(groups)</code></li> <li><code>fn withGroupsMixin(groups)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>fn withUsername(username)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.resource</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.6/kyverno/v1/generateRequest/#fields","title":"Fields","text":""},{"location":"1.6/kyverno/v1/generateRequest/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of GenerateRequest</p>"},{"location":"1.6/kyverno/v1/generateRequest/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#obj-spec","title":"obj spec","text":"<p>\"Spec is the information to identify the generate request.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-specwithpolicy","title":"fn spec.withPolicy","text":"<pre><code>withPolicy(policy)\n</code></pre> <p>\"Specifies the name of the policy.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#obj-speccontext","title":"obj spec.context","text":"<p>\"Context ...\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#obj-speccontextadmissionrequestinfo","title":"obj spec.context.admissionRequestInfo","text":"<p>\"AdmissionRequestInfoObject stores the admission request and operation details\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-speccontextadmissionrequestinfowithadmissionrequest","title":"fn spec.context.admissionRequestInfo.withAdmissionRequest","text":"<pre><code>withAdmissionRequest(admissionRequest)\n</code></pre>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-speccontextadmissionrequestinfowithoperation","title":"fn spec.context.admissionRequestInfo.withOperation","text":"<pre><code>withOperation(operation)\n</code></pre> <p>\"Operation is the type of resource operation being checked for admission control\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#obj-speccontextuserinfo","title":"obj spec.context.userInfo","text":"<p>\"RequestInfo contains permission info carried in an admission request.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-speccontextuserinfowithclusterroles","title":"fn spec.context.userInfo.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is a list of possible clusterRoles send the request.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-speccontextuserinfowithclusterrolesmixin","title":"fn spec.context.userInfo.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is a list of possible clusterRoles send the request.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-speccontextuserinfowithroles","title":"fn spec.context.userInfo.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is a list of possible role send the request.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-speccontextuserinfowithrolesmixin","title":"fn spec.context.userInfo.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is a list of possible role send the request.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/generateRequest/#obj-speccontextuserinfouserinfo","title":"obj spec.context.userInfo.userInfo","text":"<p>\"UserInfo is the userInfo carried in the admission request.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-speccontextuserinfouserinfowithextra","title":"fn spec.context.userInfo.userInfo.withExtra","text":"<pre><code>withExtra(extra)\n</code></pre> <p>\"Any additional information provided by the authenticator.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-speccontextuserinfouserinfowithextramixin","title":"fn spec.context.userInfo.userInfo.withExtraMixin","text":"<pre><code>withExtraMixin(extra)\n</code></pre> <p>\"Any additional information provided by the authenticator.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-speccontextuserinfouserinfowithgroups","title":"fn spec.context.userInfo.userInfo.withGroups","text":"<pre><code>withGroups(groups)\n</code></pre> <p>\"The names of groups this user is a part of.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-speccontextuserinfouserinfowithgroupsmixin","title":"fn spec.context.userInfo.userInfo.withGroupsMixin","text":"<pre><code>withGroupsMixin(groups)\n</code></pre> <p>\"The names of groups this user is a part of.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-speccontextuserinfouserinfowithuid","title":"fn spec.context.userInfo.userInfo.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-speccontextuserinfouserinfowithusername","title":"fn spec.context.userInfo.userInfo.withUsername","text":"<pre><code>withUsername(username)\n</code></pre> <p>\"The name that uniquely identifies this user among all active users.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#obj-specresource","title":"obj spec.resource","text":"<p>\"ResourceSpec is the information to identify the generate request.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-specresourcewithapiversion","title":"fn spec.resource.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-specresourcewithkind","title":"fn spec.resource.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-specresourcewithname","title":"fn spec.resource.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.6/kyverno/v1/generateRequest/#fn-specresourcewithnamespace","title":"fn spec.resource.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.6/kyverno/v1/policy/","title":"kyverno.v1.policy","text":"<p>\"Policy declares validation, mutation, and generation behaviors for matching resources. See: https://kyverno.io/docs/writing-policies/ for more information.\"</p>"},{"location":"1.6/kyverno/v1/policy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withBackground(background)</code></li> <li><code>fn withFailurePolicy(failurePolicy)</code></li> <li><code>fn withRules(rules)</code></li> <li><code>fn withRulesMixin(rules)</code></li> <li><code>fn withSchemaValidation(schemaValidation)</code></li> <li><code>fn withValidationFailureAction(validationFailureAction)</code></li> <li><code>fn withValidationFailureActionOverrides(validationFailureActionOverrides)</code></li> <li><code>fn withValidationFailureActionOverridesMixin(validationFailureActionOverrides)</code></li> <li><code>fn withWebhookTimeoutSeconds(webhookTimeoutSeconds)</code></li> <li><code>obj spec.rules</code><ul> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPreconditions(preconditions)</code></li> <li><code>fn withVerifyImages(verifyImages)</code></li> <li><code>fn withVerifyImagesMixin(verifyImages)</code></li> <li><code>obj spec.rules.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.context.apiCall</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> </ul> </li> <li><code>obj spec.rules.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.exclude.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.exclude.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.exclude.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.generate</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withData(data)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withSynchronize(synchronize)</code></li> <li><code>obj spec.rules.generate.clone</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.match.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.match.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.match.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate</code><ul> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withForeachMixin(foreach)</code></li> <li><code>fn withPatchStrategicMerge(patchStrategicMerge)</code></li> <li><code>fn withPatchesJson6902(patchesJson6902)</code></li> <li><code>obj spec.rules.mutate.foreach</code><ul> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withList(list)</code></li> <li><code>fn withPatchStrategicMerge(patchStrategicMerge)</code></li> <li><code>fn withPatchesJson6902(patchesJson6902)</code></li> <li><code>obj spec.rules.mutate.foreach.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.mutate.foreach.context.apiCall</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.mutate.foreach.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate</code><ul> <li><code>fn withAnyPattern(anyPattern)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withForeachMixin(foreach)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPattern(pattern)</code></li> <li><code>obj spec.rules.validate.deny</code><ul> <li><code>fn withConditions(conditions)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach</code><ul> <li><code>fn withAnyPattern(anyPattern)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withElementScope(elementScope)</code></li> <li><code>fn withList(list)</code></li> <li><code>fn withPattern(pattern)</code></li> <li><code>obj spec.rules.validate.foreach.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.validate.foreach.context.apiCall</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach.deny</code><ul> <li><code>fn withConditions(conditions)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.validate.foreach.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestations(attestations)</code></li> <li><code>fn withAttestationsMixin(attestations)</code></li> <li><code>fn withImage(image)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.verifyImages.attestations</code><ul> <li><code>fn withConditions(conditions)</code></li> <li><code>fn withConditionsMixin(conditions)</code></li> <li><code>fn withPredicateType(predicateType)</code></li> <li><code>obj spec.rules.verifyImages.attestations.conditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.verifyImages.attestations.conditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.conditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.validationFailureActionOverrides</code><ul> <li><code>fn withAction(action)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.6/kyverno/v1/policy/#fields","title":"Fields","text":""},{"location":"1.6/kyverno/v1/policy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of Policy</p>"},{"location":"1.6/kyverno/v1/policy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-spec","title":"obj spec","text":"<p>\"Spec defines policy behaviors and contains one or more rules.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specwithbackground","title":"fn spec.withBackground","text":"<pre><code>withBackground(background)\n</code></pre> <p>\"Background controls if rules are applied to existing resources during a background scan. Optional. Default value is \\\"true\\\". The value must be set to \\\"false\\\" if the policy rule uses variables that are only available in the admission review request (e.g. user name).\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specwithfailurepolicy","title":"fn spec.withFailurePolicy","text":"<pre><code>withFailurePolicy(failurePolicy)\n</code></pre> <p>\"FailurePolicy defines how unrecognized errors from the admission endpoint are handled. Rules within the same policy share the same failure behavior. Allowed values are Ignore or Fail. Defaults to Fail.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specwithrules","title":"fn spec.withRules","text":"<pre><code>withRules(rules)\n</code></pre> <p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specwithrulesmixin","title":"fn spec.withRulesMixin","text":"<pre><code>withRulesMixin(rules)\n</code></pre> <p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specwithschemavalidation","title":"fn spec.withSchemaValidation","text":"<pre><code>withSchemaValidation(schemaValidation)\n</code></pre> <p>\"SchemaValidation skips policy validation checks. Optional. The default value is set to \\\"true\\\", it must be set to \\\"false\\\" to disable the validation checks.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specwithvalidationfailureaction","title":"fn spec.withValidationFailureAction","text":"<pre><code>withValidationFailureAction(validationFailureAction)\n</code></pre> <p>\"ValidationFailureAction controls if a validation policy rule failure should disallow the admission review request (enforce), or allow (audit) the admission review request and report an error in a policy report. Optional. The default value is \\\"audit\\\".\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specwithvalidationfailureactionoverrides","title":"fn spec.withValidationFailureActionOverrides","text":"<pre><code>withValidationFailureActionOverrides(validationFailureActionOverrides)\n</code></pre> <p>\"ValidationFailureActionOverrides is a Cluter Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specwithvalidationfailureactionoverridesmixin","title":"fn spec.withValidationFailureActionOverridesMixin","text":"<pre><code>withValidationFailureActionOverridesMixin(validationFailureActionOverrides)\n</code></pre> <p>\"ValidationFailureActionOverrides is a Cluter Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specwithwebhooktimeoutseconds","title":"fn spec.withWebhookTimeoutSeconds","text":"<pre><code>withWebhookTimeoutSeconds(webhookTimeoutSeconds)\n</code></pre> <p>\"WebhookTimeoutSeconds specifies the maximum time in seconds allowed to apply this policy. After the configured time expires, the admission request may fail, or may simply ignore the policy results, based on the failure policy. The default timeout is 10s, the value must be between 1 and 30 seconds.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrules","title":"obj spec.rules","text":"<p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specruleswithcontext","title":"fn spec.rules.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specruleswithcontextmixin","title":"fn spec.rules.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specruleswithname","title":"fn spec.rules.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a label to identify the rule, It must be unique within the policy.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specruleswithpreconditions","title":"fn spec.rules.withPreconditions","text":"<pre><code>withPreconditions(preconditions)\n</code></pre> <p>\"Preconditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. A direct list of conditions (without <code>any</code> or <code>all</code> statements is supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specruleswithverifyimages","title":"fn spec.rules.withVerifyImages","text":"<pre><code>withVerifyImages(verifyImages)\n</code></pre> <p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specruleswithverifyimagesmixin","title":"fn spec.rules.withVerifyImagesMixin","text":"<pre><code>withVerifyImagesMixin(verifyImages)\n</code></pre> <p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulescontext","title":"obj spec.rules.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulescontextwithname","title":"fn spec.rules.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulescontextapicall","title":"obj spec.rules.context.apiCall","text":"<p>\"APICall defines an HTTP request to the Kubernetes API server. The JSON data retrieved is stored in the context.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulescontextapicallwithjmespath","title":"fn spec.rules.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the API server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response to the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulescontextapicallwithurlpath","title":"fn spec.rules.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulescontextconfigmap","title":"obj spec.rules.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulescontextconfigmapwithname","title":"fn spec.rules.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulescontextconfigmapwithnamespace","title":"fn spec.rules.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulescontextimageregistry","title":"obj spec.rules.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulescontextimageregistrywithjmespath","title":"fn spec.rules.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulescontextimageregistrywithreference","title":"fn spec.rules.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexclude","title":"obj spec.rules.exclude","text":"<p>\"ExcludeResources defines when this policy rule should not be applied. The exclude criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the name or role.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludewithall","title":"fn spec.rules.exclude.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludewithallmixin","title":"fn spec.rules.exclude.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludewithany","title":"fn spec.rules.exclude.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludewithanymixin","title":"fn spec.rules.exclude.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludewithclusterroles","title":"fn spec.rules.exclude.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludewithclusterrolesmixin","title":"fn spec.rules.exclude.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludewithroles","title":"fn spec.rules.exclude.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludewithrolesmixin","title":"fn spec.rules.exclude.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludewithsubjects","title":"fn spec.rules.exclude.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludewithsubjectsmixin","title":"fn spec.rules.exclude.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexcludeall","title":"obj spec.rules.exclude.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallwithclusterroles","title":"fn spec.rules.exclude.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallwithclusterrolesmixin","title":"fn spec.rules.exclude.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallwithroles","title":"fn spec.rules.exclude.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallwithrolesmixin","title":"fn spec.rules.exclude.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallwithsubjects","title":"fn spec.rules.exclude.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallwithsubjectsmixin","title":"fn spec.rules.exclude.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexcludeallresources","title":"obj spec.rules.exclude.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithannotations","title":"fn spec.rules.exclude.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithannotationsmixin","title":"fn spec.rules.exclude.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithkinds","title":"fn spec.rules.exclude.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithkindsmixin","title":"fn spec.rules.exclude.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithname","title":"fn spec.rules.exclude.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithnames","title":"fn spec.rules.exclude.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithnamesmixin","title":"fn spec.rules.exclude.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithnamespaces","title":"fn spec.rules.exclude.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithnamespacesmixin","title":"fn spec.rules.exclude.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexcludeallresourcesnamespaceselector","title":"obj spec.rules.exclude.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexcludeallresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexcludeallresourcesselector","title":"obj spec.rules.exclude.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexcludeallresourcesselectormatchexpressions","title":"obj spec.rules.exclude.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexcludeallsubjects","title":"obj spec.rules.exclude.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallsubjectswithapigroup","title":"fn spec.rules.exclude.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallsubjectswithkind","title":"fn spec.rules.exclude.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallsubjectswithname","title":"fn spec.rules.exclude.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeallsubjectswithnamespace","title":"fn spec.rules.exclude.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexcludeany","title":"obj spec.rules.exclude.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanywithclusterroles","title":"fn spec.rules.exclude.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanywithclusterrolesmixin","title":"fn spec.rules.exclude.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanywithroles","title":"fn spec.rules.exclude.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanywithrolesmixin","title":"fn spec.rules.exclude.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanywithsubjects","title":"fn spec.rules.exclude.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanywithsubjectsmixin","title":"fn spec.rules.exclude.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexcludeanyresources","title":"obj spec.rules.exclude.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithannotations","title":"fn spec.rules.exclude.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithannotationsmixin","title":"fn spec.rules.exclude.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithkinds","title":"fn spec.rules.exclude.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithkindsmixin","title":"fn spec.rules.exclude.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithname","title":"fn spec.rules.exclude.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithnames","title":"fn spec.rules.exclude.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithnamesmixin","title":"fn spec.rules.exclude.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithnamespaces","title":"fn spec.rules.exclude.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithnamespacesmixin","title":"fn spec.rules.exclude.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexcludeanyresourcesnamespaceselector","title":"obj spec.rules.exclude.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexcludeanyresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexcludeanyresourcesselector","title":"obj spec.rules.exclude.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexcludeanyresourcesselectormatchexpressions","title":"obj spec.rules.exclude.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexcludeanysubjects","title":"obj spec.rules.exclude.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanysubjectswithapigroup","title":"fn spec.rules.exclude.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanysubjectswithkind","title":"fn spec.rules.exclude.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanysubjectswithname","title":"fn spec.rules.exclude.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludeanysubjectswithnamespace","title":"fn spec.rules.exclude.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexcluderesources","title":"obj spec.rules.exclude.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified. Specifying ResourceDescription directly under exclude is being deprecated. Please specify under \\\"any\\\" or \\\"all\\\" instead.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourceswithannotations","title":"fn spec.rules.exclude.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourceswithannotationsmixin","title":"fn spec.rules.exclude.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourceswithkinds","title":"fn spec.rules.exclude.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourceswithkindsmixin","title":"fn spec.rules.exclude.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourceswithname","title":"fn spec.rules.exclude.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourceswithnames","title":"fn spec.rules.exclude.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourceswithnamesmixin","title":"fn spec.rules.exclude.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourceswithnamespaces","title":"fn spec.rules.exclude.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourceswithnamespacesmixin","title":"fn spec.rules.exclude.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexcluderesourcesnamespaceselector","title":"obj spec.rules.exclude.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexcluderesourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexcluderesourcesselector","title":"obj spec.rules.exclude.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexcluderesourcesselectormatchexpressions","title":"obj spec.rules.exclude.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesexcludesubjects","title":"obj spec.rules.exclude.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludesubjectswithapigroup","title":"fn spec.rules.exclude.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludesubjectswithkind","title":"fn spec.rules.exclude.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludesubjectswithname","title":"fn spec.rules.exclude.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesexcludesubjectswithnamespace","title":"fn spec.rules.exclude.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesgenerate","title":"obj spec.rules.generate","text":"<p>\"Generation is used to create new resources.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesgeneratewithapiversion","title":"fn spec.rules.generate.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesgeneratewithdata","title":"fn spec.rules.generate.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data provides the resource declaration used to populate each generated resource. At most one of Data or Clone must be specified. If neither are provided, the generated resource will be created with default data only.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesgeneratewithkind","title":"fn spec.rules.generate.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesgeneratewithname","title":"fn spec.rules.generate.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesgeneratewithnamespace","title":"fn spec.rules.generate.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesgeneratewithsynchronize","title":"fn spec.rules.generate.withSynchronize","text":"<pre><code>withSynchronize(synchronize)\n</code></pre> <p>\"Synchronize controls if generated resources should be kept in-sync with their source resource. If Synchronize is set to \\\"true\\\" changes to generated resources will be overwritten with resource data from Data or the resource specified in the Clone declaration. Optional. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesgenerateclone","title":"obj spec.rules.generate.clone","text":"<p>\"Clone specifies the source resource used to populate each generated resource. At most one of Data or Clone can be specified. If neither are provided, the generated resource will be created with default data only.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesgenerateclonewithname","title":"fn spec.rules.generate.clone.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies name of the resource.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesgenerateclonewithnamespace","title":"fn spec.rules.generate.clone.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies source resource namespace.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatch","title":"obj spec.rules.match","text":"<p>\"MatchResources defines when this policy rule should be applied. The match criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the user name or role. At least one kind is required.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchwithall","title":"fn spec.rules.match.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchwithallmixin","title":"fn spec.rules.match.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchwithany","title":"fn spec.rules.match.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchwithanymixin","title":"fn spec.rules.match.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchwithclusterroles","title":"fn spec.rules.match.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchwithclusterrolesmixin","title":"fn spec.rules.match.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchwithroles","title":"fn spec.rules.match.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchwithrolesmixin","title":"fn spec.rules.match.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchwithsubjects","title":"fn spec.rules.match.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchwithsubjectsmixin","title":"fn spec.rules.match.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatchall","title":"obj spec.rules.match.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallwithclusterroles","title":"fn spec.rules.match.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallwithclusterrolesmixin","title":"fn spec.rules.match.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallwithroles","title":"fn spec.rules.match.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallwithrolesmixin","title":"fn spec.rules.match.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallwithsubjects","title":"fn spec.rules.match.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallwithsubjectsmixin","title":"fn spec.rules.match.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatchallresources","title":"obj spec.rules.match.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourceswithannotations","title":"fn spec.rules.match.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourceswithannotationsmixin","title":"fn spec.rules.match.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourceswithkinds","title":"fn spec.rules.match.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourceswithkindsmixin","title":"fn spec.rules.match.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourceswithname","title":"fn spec.rules.match.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourceswithnames","title":"fn spec.rules.match.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourceswithnamesmixin","title":"fn spec.rules.match.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourceswithnamespaces","title":"fn spec.rules.match.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourceswithnamespacesmixin","title":"fn spec.rules.match.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatchallresourcesnamespaceselector","title":"obj spec.rules.match.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatchallresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatchallresourcesselector","title":"obj spec.rules.match.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectorwithmatchlabels","title":"fn spec.rules.match.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatchallresourcesselectormatchexpressions","title":"obj spec.rules.match.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatchallsubjects","title":"obj spec.rules.match.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallsubjectswithapigroup","title":"fn spec.rules.match.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallsubjectswithkind","title":"fn spec.rules.match.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallsubjectswithname","title":"fn spec.rules.match.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchallsubjectswithnamespace","title":"fn spec.rules.match.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatchany","title":"obj spec.rules.match.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanywithclusterroles","title":"fn spec.rules.match.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanywithclusterrolesmixin","title":"fn spec.rules.match.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanywithroles","title":"fn spec.rules.match.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanywithrolesmixin","title":"fn spec.rules.match.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanywithsubjects","title":"fn spec.rules.match.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanywithsubjectsmixin","title":"fn spec.rules.match.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatchanyresources","title":"obj spec.rules.match.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithannotations","title":"fn spec.rules.match.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithannotationsmixin","title":"fn spec.rules.match.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithkinds","title":"fn spec.rules.match.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithkindsmixin","title":"fn spec.rules.match.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithname","title":"fn spec.rules.match.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithnames","title":"fn spec.rules.match.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithnamesmixin","title":"fn spec.rules.match.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithnamespaces","title":"fn spec.rules.match.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithnamespacesmixin","title":"fn spec.rules.match.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatchanyresourcesnamespaceselector","title":"obj spec.rules.match.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatchanyresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatchanyresourcesselector","title":"obj spec.rules.match.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectorwithmatchlabels","title":"fn spec.rules.match.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatchanyresourcesselectormatchexpressions","title":"obj spec.rules.match.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatchanysubjects","title":"obj spec.rules.match.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanysubjectswithapigroup","title":"fn spec.rules.match.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanysubjectswithkind","title":"fn spec.rules.match.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanysubjectswithname","title":"fn spec.rules.match.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchanysubjectswithnamespace","title":"fn spec.rules.match.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatchresources","title":"obj spec.rules.match.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified. Requires at least one tag to be specified when under MatchResources. Specifying ResourceDescription directly under match is being deprecated. Please specify under \\\"any\\\" or \\\"all\\\" instead.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourceswithannotations","title":"fn spec.rules.match.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourceswithannotationsmixin","title":"fn spec.rules.match.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourceswithkinds","title":"fn spec.rules.match.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourceswithkindsmixin","title":"fn spec.rules.match.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourceswithname","title":"fn spec.rules.match.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourceswithnames","title":"fn spec.rules.match.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourceswithnamesmixin","title":"fn spec.rules.match.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourceswithnamespaces","title":"fn spec.rules.match.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourceswithnamespacesmixin","title":"fn spec.rules.match.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatchresourcesnamespaceselector","title":"obj spec.rules.match.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatchresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatchresourcesselector","title":"obj spec.rules.match.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourcesselectorwithmatchlabels","title":"fn spec.rules.match.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatchresourcesselectormatchexpressions","title":"obj spec.rules.match.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmatchsubjects","title":"obj spec.rules.match.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchsubjectswithapigroup","title":"fn spec.rules.match.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchsubjectswithkind","title":"fn spec.rules.match.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchsubjectswithname","title":"fn spec.rules.match.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmatchsubjectswithnamespace","title":"fn spec.rules.match.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmutate","title":"obj spec.rules.mutate","text":"<p>\"Mutation is used to modify matching resources.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutatewithforeach","title":"fn spec.rules.mutate.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"ForEachMutation applies policy rule changes to nested elements.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutatewithforeachmixin","title":"fn spec.rules.mutate.withForeachMixin","text":"<pre><code>withForeachMixin(foreach)\n</code></pre> <p>\"ForEachMutation applies policy rule changes to nested elements.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutatewithpatchstrategicmerge","title":"fn spec.rules.mutate.withPatchStrategicMerge","text":"<pre><code>withPatchStrategicMerge(patchStrategicMerge)\n</code></pre> <p>\"PatchStrategicMerge is a strategic merge patch used to modify resources. See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutatewithpatchesjson6902","title":"fn spec.rules.mutate.withPatchesJson6902","text":"<pre><code>withPatchesJson6902(patchesJson6902)\n</code></pre> <p>\"PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources. See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmutateforeach","title":"obj spec.rules.mutate.foreach","text":"<p>\"ForEachMutation applies policy rule changes to nested elements.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachwithcontext","title":"fn spec.rules.mutate.foreach.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachwithcontextmixin","title":"fn spec.rules.mutate.foreach.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachwithlist","title":"fn spec.rules.mutate.foreach.withList","text":"<pre><code>withList(list)\n</code></pre> <p>\"List specifies a JMESPath expression that results in one or more elements to which the validation logic is applied.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachwithpatchstrategicmerge","title":"fn spec.rules.mutate.foreach.withPatchStrategicMerge","text":"<pre><code>withPatchStrategicMerge(patchStrategicMerge)\n</code></pre> <p>\"PatchStrategicMerge is a strategic merge patch used to modify resources. See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachwithpatchesjson6902","title":"fn spec.rules.mutate.foreach.withPatchesJson6902","text":"<pre><code>withPatchesJson6902(patchesJson6902)\n</code></pre> <p>\"PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources. See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmutateforeachcontext","title":"obj spec.rules.mutate.foreach.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachcontextwithname","title":"fn spec.rules.mutate.foreach.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmutateforeachcontextapicall","title":"obj spec.rules.mutate.foreach.context.apiCall","text":"<p>\"APICall defines an HTTP request to the Kubernetes API server. The JSON data retrieved is stored in the context.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachcontextapicallwithjmespath","title":"fn spec.rules.mutate.foreach.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the API server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response to the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachcontextapicallwithurlpath","title":"fn spec.rules.mutate.foreach.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmutateforeachcontextconfigmap","title":"obj spec.rules.mutate.foreach.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachcontextconfigmapwithname","title":"fn spec.rules.mutate.foreach.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachcontextconfigmapwithnamespace","title":"fn spec.rules.mutate.foreach.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmutateforeachcontextimageregistry","title":"obj spec.rules.mutate.foreach.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachcontextimageregistrywithjmespath","title":"fn spec.rules.mutate.foreach.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachcontextimageregistrywithreference","title":"fn spec.rules.mutate.foreach.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmutateforeachpreconditions","title":"obj spec.rules.mutate.foreach.preconditions","text":"<p>\"AnyAllConditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionswithall","title":"fn spec.rules.mutate.foreach.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionswithallmixin","title":"fn spec.rules.mutate.foreach.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionswithany","title":"fn spec.rules.mutate.foreach.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionswithanymixin","title":"fn spec.rules.mutate.foreach.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmutateforeachpreconditionsall","title":"obj spec.rules.mutate.foreach.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionsallwithkey","title":"fn spec.rules.mutate.foreach.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionsallwithoperator","title":"fn spec.rules.mutate.foreach.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionsallwithvalue","title":"fn spec.rules.mutate.foreach.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using using JMESPath.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesmutateforeachpreconditionsany","title":"obj spec.rules.mutate.foreach.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionsanywithkey","title":"fn spec.rules.mutate.foreach.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionsanywithoperator","title":"fn spec.rules.mutate.foreach.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionsanywithvalue","title":"fn spec.rules.mutate.foreach.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using using JMESPath.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesvalidate","title":"obj spec.rules.validate","text":"<p>\"Validation is used to validate matching resources.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidatewithanypattern","title":"fn spec.rules.validate.withAnyPattern","text":"<pre><code>withAnyPattern(anyPattern)\n</code></pre> <p>\"AnyPattern specifies list of validation patterns. At least one of the patterns must be satisfied for the validation rule to succeed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidatewithforeach","title":"fn spec.rules.validate.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"ForEach applies policy rule changes to nested elements.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidatewithforeachmixin","title":"fn spec.rules.validate.withForeachMixin","text":"<pre><code>withForeachMixin(foreach)\n</code></pre> <p>\"ForEach applies policy rule changes to nested elements.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidatewithmessage","title":"fn spec.rules.validate.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message specifies a custom message to be displayed on failure.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidatewithpattern","title":"fn spec.rules.validate.withPattern","text":"<pre><code>withPattern(pattern)\n</code></pre> <p>\"Pattern specifies an overlay-style pattern used to check resources.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesvalidatedeny","title":"obj spec.rules.validate.deny","text":"<p>\"Deny defines conditions used to pass or fail a validation rule.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidatedenywithconditions","title":"fn spec.rules.validate.deny.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Multiple conditions can be declared under an <code>any</code> or <code>all</code> statement. A direct list of conditions (without <code>any</code> or <code>all</code> statements) is also supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/validate/#deny-rules\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesvalidateforeach","title":"obj spec.rules.validate.foreach","text":"<p>\"ForEach applies policy rule changes to nested elements.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachwithanypattern","title":"fn spec.rules.validate.foreach.withAnyPattern","text":"<pre><code>withAnyPattern(anyPattern)\n</code></pre> <p>\"AnyPattern specifies list of validation patterns. At least one of the patterns must be satisfied for the validation rule to succeed.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachwithcontext","title":"fn spec.rules.validate.foreach.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachwithcontextmixin","title":"fn spec.rules.validate.foreach.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachwithelementscope","title":"fn spec.rules.validate.foreach.withElementScope","text":"<pre><code>withElementScope(elementScope)\n</code></pre> <p>\"ElementScope specifies whether to use the current list element as the scope for validation. Defaults to \\\"true\\\" if not specified. When set to \\\"false\\\", \\\"request.object\\\" is used as the validation scope within the foreach block to allow referencing other elements in the subtree.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachwithlist","title":"fn spec.rules.validate.foreach.withList","text":"<pre><code>withList(list)\n</code></pre> <p>\"List specifies a JMESPath expression that results in one or more elements to which the validation logic is applied.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachwithpattern","title":"fn spec.rules.validate.foreach.withPattern","text":"<pre><code>withPattern(pattern)\n</code></pre> <p>\"Pattern specifies an overlay-style pattern used to check resources.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesvalidateforeachcontext","title":"obj spec.rules.validate.foreach.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextwithname","title":"fn spec.rules.validate.foreach.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesvalidateforeachcontextapicall","title":"obj spec.rules.validate.foreach.context.apiCall","text":"<p>\"APICall defines an HTTP request to the Kubernetes API server. The JSON data retrieved is stored in the context.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextapicallwithjmespath","title":"fn spec.rules.validate.foreach.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the API server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response to the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextapicallwithurlpath","title":"fn spec.rules.validate.foreach.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesvalidateforeachcontextconfigmap","title":"obj spec.rules.validate.foreach.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextconfigmapwithname","title":"fn spec.rules.validate.foreach.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextconfigmapwithnamespace","title":"fn spec.rules.validate.foreach.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesvalidateforeachcontextimageregistry","title":"obj spec.rules.validate.foreach.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextimageregistrywithjmespath","title":"fn spec.rules.validate.foreach.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextimageregistrywithreference","title":"fn spec.rules.validate.foreach.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesvalidateforeachdeny","title":"obj spec.rules.validate.foreach.deny","text":"<p>\"Deny defines conditions used to pass or fail a validation rule.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachdenywithconditions","title":"fn spec.rules.validate.foreach.deny.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Multiple conditions can be declared under an <code>any</code> or <code>all</code> statement. A direct list of conditions (without <code>any</code> or <code>all</code> statements) is also supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/validate/#deny-rules\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesvalidateforeachpreconditions","title":"obj spec.rules.validate.foreach.preconditions","text":"<p>\"AnyAllConditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionswithall","title":"fn spec.rules.validate.foreach.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionswithallmixin","title":"fn spec.rules.validate.foreach.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionswithany","title":"fn spec.rules.validate.foreach.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionswithanymixin","title":"fn spec.rules.validate.foreach.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesvalidateforeachpreconditionsall","title":"obj spec.rules.validate.foreach.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionsallwithkey","title":"fn spec.rules.validate.foreach.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionsallwithoperator","title":"fn spec.rules.validate.foreach.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionsallwithvalue","title":"fn spec.rules.validate.foreach.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using using JMESPath.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesvalidateforeachpreconditionsany","title":"obj spec.rules.validate.foreach.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionsanywithkey","title":"fn spec.rules.validate.foreach.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionsanywithoperator","title":"fn spec.rules.validate.foreach.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionsanywithvalue","title":"fn spec.rules.validate.foreach.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using using JMESPath.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesverifyimages","title":"obj spec.rules.verifyImages","text":"<p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimageswithannotations","title":"fn spec.rules.verifyImages.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimageswithannotationsmixin","title":"fn spec.rules.verifyImages.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimageswithattestations","title":"fn spec.rules.verifyImages.withAttestations","text":"<pre><code>withAttestations(attestations)\n</code></pre> <p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimageswithattestationsmixin","title":"fn spec.rules.verifyImages.withAttestationsMixin","text":"<pre><code>withAttestationsMixin(attestations)\n</code></pre> <p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimageswithimage","title":"fn spec.rules.verifyImages.withImage","text":"<pre><code>withImage(image)\n</code></pre> <p>\"Image is the image name consisting of the registry address, repository, image, and tag. Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimageswithissuer","title":"fn spec.rules.verifyImages.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimageswithkey","title":"fn spec.rules.verifyImages.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the PEM encoded public key that the image or attestation is signed with.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimageswithrepository","title":"fn spec.rules.verifyImages.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for image signatures that match this rule. If specified Repository will override the default OCI image repository configured for the installation.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimageswithroots","title":"fn spec.rules.verifyImages.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is the PEM encoded Root certificate chain used for keyless signing\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimageswithsubject","title":"fn spec.rules.verifyImages.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesverifyimagesattestations","title":"obj spec.rules.verifyImages.attestations","text":"<p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimagesattestationswithconditions","title":"fn spec.rules.verifyImages.attestations.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimagesattestationswithconditionsmixin","title":"fn spec.rules.verifyImages.attestations.withConditionsMixin","text":"<pre><code>withConditionsMixin(conditions)\n</code></pre> <p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimagesattestationswithpredicatetype","title":"fn spec.rules.verifyImages.attestations.withPredicateType","text":"<pre><code>withPredicateType(predicateType)\n</code></pre> <p>\"PredicateType defines the type of Predicate contained within the Statement.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsconditions","title":"obj spec.rules.verifyImages.attestations.conditions","text":"<p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionswithall","title":"fn spec.rules.verifyImages.attestations.conditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionswithallmixin","title":"fn spec.rules.verifyImages.attestations.conditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionswithany","title":"fn spec.rules.verifyImages.attestations.conditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionswithanymixin","title":"fn spec.rules.verifyImages.attestations.conditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsconditionsall","title":"obj spec.rules.verifyImages.attestations.conditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionsallwithkey","title":"fn spec.rules.verifyImages.attestations.conditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionsallwithoperator","title":"fn spec.rules.verifyImages.attestations.conditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionsallwithvalue","title":"fn spec.rules.verifyImages.attestations.conditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using using JMESPath.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsconditionsany","title":"obj spec.rules.verifyImages.attestations.conditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionsanywithkey","title":"fn spec.rules.verifyImages.attestations.conditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionsanywithoperator","title":"fn spec.rules.verifyImages.attestations.conditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionsanywithvalue","title":"fn spec.rules.verifyImages.attestations.conditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using using JMESPath.\"</p>"},{"location":"1.6/kyverno/v1/policy/#obj-specvalidationfailureactionoverrides","title":"obj spec.validationFailureActionOverrides","text":"<p>\"ValidationFailureActionOverrides is a Cluter Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p>"},{"location":"1.6/kyverno/v1/policy/#fn-specvalidationfailureactionoverrideswithaction","title":"fn spec.validationFailureActionOverrides.withAction","text":"<pre><code>withAction(action)\n</code></pre>"},{"location":"1.6/kyverno/v1/policy/#fn-specvalidationfailureactionoverrideswithnamespaces","title":"fn spec.validationFailureActionOverrides.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"1.6/kyverno/v1/policy/#fn-specvalidationfailureactionoverrideswithnamespacesmixin","title":"fn spec.validationFailureActionOverrides.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/","title":"kyverno.v1alpha1","text":"<ul> <li>clusterReportChangeRequest</li> <li>reportChangeRequest</li> </ul>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/","title":"kyverno.v1alpha1.clusterReportChangeRequest","text":"<p>\"ClusterReportChangeRequest is the Schema for the ClusterReportChangeRequests API\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>fn withResults(results)</code></li> <li><code>fn withResultsMixin(results)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj results</code><ul> <li><code>fn withCategory(category)</code></li> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPolicy(policy)</code></li> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> <li><code>fn withRule(rule)</code></li> <li><code>fn withScored(scored)</code></li> <li><code>fn withSeverity(severity)</code></li> <li><code>obj results.resourceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj results.resourceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj results.resources</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> </ul> </li> <li><code>obj scope</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj scopeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj scopeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj summary</code><ul> <li><code>fn withError(err)</code></li> <li><code>fn withFail(fail)</code></li> <li><code>fn withPass(pass)</code></li> <li><code>fn withSkip(skip)</code></li> <li><code>fn withWarn(warn)</code></li> </ul> </li> </ul>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fields","title":"Fields","text":""},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ClusterReportChangeRequest</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-withresults","title":"fn withResults","text":"<pre><code>withResults(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-withresultsmixin","title":"fn withResultsMixin","text":"<pre><code>withResultsMixin(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#obj-results","title":"obj results","text":"<p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultswithcategory","title":"fn results.withCategory","text":"<pre><code>withCategory(category)\n</code></pre> <p>\"Category indicates policy category\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultswithdata","title":"fn results.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data provides additional information for the policy rule\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultswithdatamixin","title":"fn results.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data provides additional information for the policy rule\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultswithmessage","title":"fn results.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is a short user friendly description of the policy rule\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultswithpolicy","title":"fn results.withPolicy","text":"<pre><code>withPolicy(policy)\n</code></pre> <p>\"Policy is the name of the policy\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultswithresources","title":"fn results.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Resources is an optional reference to the resource checked by the policy and rule\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultswithresourcesmixin","title":"fn results.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Resources is an optional reference to the resource checked by the policy and rule\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultswithrule","title":"fn results.withRule","text":"<pre><code>withRule(rule)\n</code></pre> <p>\"Rule is the name of the policy rule\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultswithscored","title":"fn results.withScored","text":"<pre><code>withScored(scored)\n</code></pre> <p>\"Scored indicates if this policy rule is scored\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultswithseverity","title":"fn results.withSeverity","text":"<pre><code>withSeverity(severity)\n</code></pre> <p>\"Severity indicates policy severity\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#obj-resultsresourceselector","title":"obj results.resourceSelector","text":"<p>\"ResourceSelector is an optional selector for policy results that apply to multiple resources. For example, a policy result may apply to all pods that match a label. Either a Resource or a ResourceSelector can be specified. If neither are provided, the result is assumed to be for the policy report scope.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultsresourceselectorwithmatchexpressions","title":"fn results.resourceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultsresourceselectorwithmatchexpressionsmixin","title":"fn results.resourceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultsresourceselectorwithmatchlabels","title":"fn results.resourceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultsresourceselectorwithmatchlabelsmixin","title":"fn results.resourceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#obj-resultsresourceselectormatchexpressions","title":"obj results.resourceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultsresourceselectormatchexpressionswithkey","title":"fn results.resourceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultsresourceselectormatchexpressionswithoperator","title":"fn results.resourceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultsresourceselectormatchexpressionswithvalues","title":"fn results.resourceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultsresourceselectormatchexpressionswithvaluesmixin","title":"fn results.resourceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#obj-resultsresources","title":"obj results.resources","text":"<p>\"Resources is an optional reference to the resource checked by the policy and rule\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultsresourceswithapiversion","title":"fn results.resources.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultsresourceswithfieldpath","title":"fn results.resources.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre> <p>\"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultsresourceswithkind","title":"fn results.resources.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultsresourceswithname","title":"fn results.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultsresourceswithnamespace","title":"fn results.resources.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultsresourceswithresourceversion","title":"fn results.resources.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-resultsresourceswithuid","title":"fn results.resources.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#obj-scope","title":"obj scope","text":"<p>\"Scope is an optional reference to the report scope (e.g. a Deployment, Namespace, or Node)\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-scopewithapiversion","title":"fn scope.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-scopewithfieldpath","title":"fn scope.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre> <p>\"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-scopewithkind","title":"fn scope.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-scopewithname","title":"fn scope.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-scopewithnamespace","title":"fn scope.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-scopewithresourceversion","title":"fn scope.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-scopewithuid","title":"fn scope.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#obj-scopeselector","title":"obj scopeSelector","text":"<p>\"ScopeSelector is an optional selector for multiple scopes (e.g. Pods). Either one of, or none of, but not both of, Scope or ScopeSelector should be specified.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-scopeselectorwithmatchexpressions","title":"fn scopeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-scopeselectorwithmatchexpressionsmixin","title":"fn scopeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-scopeselectorwithmatchlabels","title":"fn scopeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-scopeselectorwithmatchlabelsmixin","title":"fn scopeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#obj-scopeselectormatchexpressions","title":"obj scopeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-scopeselectormatchexpressionswithkey","title":"fn scopeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-scopeselectormatchexpressionswithoperator","title":"fn scopeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-scopeselectormatchexpressionswithvalues","title":"fn scopeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-scopeselectormatchexpressionswithvaluesmixin","title":"fn scopeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#obj-summary","title":"obj summary","text":"<p>\"PolicyReportSummary provides a summary of results\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-summarywitherror","title":"fn summary.withError","text":"<pre><code>withError(err)\n</code></pre> <p>\"Error provides the count of policies that could not be evaluated\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-summarywithfail","title":"fn summary.withFail","text":"<pre><code>withFail(fail)\n</code></pre> <p>\"Fail provides the count of policies whose requirements were not met\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-summarywithpass","title":"fn summary.withPass","text":"<pre><code>withPass(pass)\n</code></pre> <p>\"Pass provides the count of policies whose requirements were met\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-summarywithskip","title":"fn summary.withSkip","text":"<pre><code>withSkip(skip)\n</code></pre> <p>\"Skip indicates the count of policies that were not selected for evaluation\"</p>"},{"location":"1.6/kyverno/v1alpha1/clusterReportChangeRequest/#fn-summarywithwarn","title":"fn summary.withWarn","text":"<pre><code>withWarn(warn)\n</code></pre> <p>\"Warn provides the count of unscored policies whose requirements were not met\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/","title":"kyverno.v1alpha1.reportChangeRequest","text":"<p>\"ReportChangeRequest is the Schema for the ReportChangeRequests API\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>fn withResults(results)</code></li> <li><code>fn withResultsMixin(results)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj results</code><ul> <li><code>fn withCategory(category)</code></li> <li><code>fn withData(data)</code></li> <li><code>fn withDataMixin(data)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPolicy(policy)</code></li> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> <li><code>fn withRule(rule)</code></li> <li><code>fn withScored(scored)</code></li> <li><code>fn withSeverity(severity)</code></li> <li><code>obj results.resourceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj results.resourceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj results.resources</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> </ul> </li> <li><code>obj scope</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj scopeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj scopeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj summary</code><ul> <li><code>fn withError(err)</code></li> <li><code>fn withFail(fail)</code></li> <li><code>fn withPass(pass)</code></li> <li><code>fn withSkip(skip)</code></li> <li><code>fn withWarn(warn)</code></li> </ul> </li> </ul>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fields","title":"Fields","text":""},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ReportChangeRequest</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-withresults","title":"fn withResults","text":"<pre><code>withResults(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-withresultsmixin","title":"fn withResultsMixin","text":"<pre><code>withResultsMixin(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#obj-results","title":"obj results","text":"<p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultswithcategory","title":"fn results.withCategory","text":"<pre><code>withCategory(category)\n</code></pre> <p>\"Category indicates policy category\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultswithdata","title":"fn results.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data provides additional information for the policy rule\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultswithdatamixin","title":"fn results.withDataMixin","text":"<pre><code>withDataMixin(data)\n</code></pre> <p>\"Data provides additional information for the policy rule\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultswithmessage","title":"fn results.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is a short user friendly description of the policy rule\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultswithpolicy","title":"fn results.withPolicy","text":"<pre><code>withPolicy(policy)\n</code></pre> <p>\"Policy is the name of the policy\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultswithresources","title":"fn results.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Resources is an optional reference to the resource checked by the policy and rule\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultswithresourcesmixin","title":"fn results.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Resources is an optional reference to the resource checked by the policy and rule\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultswithrule","title":"fn results.withRule","text":"<pre><code>withRule(rule)\n</code></pre> <p>\"Rule is the name of the policy rule\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultswithscored","title":"fn results.withScored","text":"<pre><code>withScored(scored)\n</code></pre> <p>\"Scored indicates if this policy rule is scored\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultswithseverity","title":"fn results.withSeverity","text":"<pre><code>withSeverity(severity)\n</code></pre> <p>\"Severity indicates policy severity\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#obj-resultsresourceselector","title":"obj results.resourceSelector","text":"<p>\"ResourceSelector is an optional selector for policy results that apply to multiple resources. For example, a policy result may apply to all pods that match a label. Either a Resource or a ResourceSelector can be specified. If neither are provided, the result is assumed to be for the policy report scope.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultsresourceselectorwithmatchexpressions","title":"fn results.resourceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultsresourceselectorwithmatchexpressionsmixin","title":"fn results.resourceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultsresourceselectorwithmatchlabels","title":"fn results.resourceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultsresourceselectorwithmatchlabelsmixin","title":"fn results.resourceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#obj-resultsresourceselectormatchexpressions","title":"obj results.resourceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultsresourceselectormatchexpressionswithkey","title":"fn results.resourceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultsresourceselectormatchexpressionswithoperator","title":"fn results.resourceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultsresourceselectormatchexpressionswithvalues","title":"fn results.resourceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultsresourceselectormatchexpressionswithvaluesmixin","title":"fn results.resourceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#obj-resultsresources","title":"obj results.resources","text":"<p>\"Resources is an optional reference to the resource checked by the policy and rule\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultsresourceswithapiversion","title":"fn results.resources.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultsresourceswithfieldpath","title":"fn results.resources.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre> <p>\"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultsresourceswithkind","title":"fn results.resources.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultsresourceswithname","title":"fn results.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultsresourceswithnamespace","title":"fn results.resources.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultsresourceswithresourceversion","title":"fn results.resources.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-resultsresourceswithuid","title":"fn results.resources.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#obj-scope","title":"obj scope","text":"<p>\"Scope is an optional reference to the report scope (e.g. a Deployment, Namespace, or Node)\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-scopewithapiversion","title":"fn scope.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-scopewithfieldpath","title":"fn scope.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre> <p>\"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-scopewithkind","title":"fn scope.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-scopewithname","title":"fn scope.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-scopewithnamespace","title":"fn scope.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-scopewithresourceversion","title":"fn scope.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-scopewithuid","title":"fn scope.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#obj-scopeselector","title":"obj scopeSelector","text":"<p>\"ScopeSelector is an optional selector for multiple scopes (e.g. Pods). Either one of, or none of, but not both of, Scope or ScopeSelector should be specified.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-scopeselectorwithmatchexpressions","title":"fn scopeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-scopeselectorwithmatchexpressionsmixin","title":"fn scopeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-scopeselectorwithmatchlabels","title":"fn scopeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-scopeselectorwithmatchlabelsmixin","title":"fn scopeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#obj-scopeselectormatchexpressions","title":"obj scopeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-scopeselectormatchexpressionswithkey","title":"fn scopeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-scopeselectormatchexpressionswithoperator","title":"fn scopeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-scopeselectormatchexpressionswithvalues","title":"fn scopeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-scopeselectormatchexpressionswithvaluesmixin","title":"fn scopeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#obj-summary","title":"obj summary","text":"<p>\"PolicyReportSummary provides a summary of results\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-summarywitherror","title":"fn summary.withError","text":"<pre><code>withError(err)\n</code></pre> <p>\"Error provides the count of policies that could not be evaluated\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-summarywithfail","title":"fn summary.withFail","text":"<pre><code>withFail(fail)\n</code></pre> <p>\"Fail provides the count of policies whose requirements were not met\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-summarywithpass","title":"fn summary.withPass","text":"<pre><code>withPass(pass)\n</code></pre> <p>\"Pass provides the count of policies whose requirements were met\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-summarywithskip","title":"fn summary.withSkip","text":"<pre><code>withSkip(skip)\n</code></pre> <p>\"Skip indicates the count of policies that were not selected for evaluation\"</p>"},{"location":"1.6/kyverno/v1alpha1/reportChangeRequest/#fn-summarywithwarn","title":"fn summary.withWarn","text":"<pre><code>withWarn(warn)\n</code></pre> <p>\"Warn provides the count of unscored policies whose requirements were not met\"</p>"},{"location":"1.6/kyverno/v1alpha2/","title":"kyverno.v1alpha2","text":"<ul> <li>clusterReportChangeRequest</li> <li>reportChangeRequest</li> </ul>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/","title":"kyverno.v1alpha2.clusterReportChangeRequest","text":"<p>\"ClusterReportChangeRequest is the Schema for the ClusterReportChangeRequests API\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>fn withResults(results)</code></li> <li><code>fn withResultsMixin(results)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj results</code><ul> <li><code>fn withCategory(category)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPolicy(policy)</code></li> <li><code>fn withProperties(properties)</code></li> <li><code>fn withPropertiesMixin(properties)</code></li> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> <li><code>fn withResult(result)</code></li> <li><code>fn withRule(rule)</code></li> <li><code>fn withScored(scored)</code></li> <li><code>fn withSeverity(severity)</code></li> <li><code>fn withSource(source)</code></li> <li><code>obj results.resourceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj results.resourceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj results.resources</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj results.timestamp</code><ul> <li><code>fn withNanos(nanos)</code></li> <li><code>fn withSeconds(seconds)</code></li> </ul> </li> </ul> </li> <li><code>obj scope</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj scopeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj scopeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj summary</code><ul> <li><code>fn withError(err)</code></li> <li><code>fn withFail(fail)</code></li> <li><code>fn withPass(pass)</code></li> <li><code>fn withSkip(skip)</code></li> <li><code>fn withWarn(warn)</code></li> </ul> </li> </ul>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fields","title":"Fields","text":""},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ClusterReportChangeRequest</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-withresults","title":"fn withResults","text":"<pre><code>withResults(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-withresultsmixin","title":"fn withResultsMixin","text":"<pre><code>withResultsMixin(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#obj-results","title":"obj results","text":"<p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultswithcategory","title":"fn results.withCategory","text":"<pre><code>withCategory(category)\n</code></pre> <p>\"Category indicates policy category\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultswithmessage","title":"fn results.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is a short user friendly description of the policy rule\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultswithpolicy","title":"fn results.withPolicy","text":"<pre><code>withPolicy(policy)\n</code></pre> <p>\"Policy is the name of the policy\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultswithproperties","title":"fn results.withProperties","text":"<pre><code>withProperties(properties)\n</code></pre> <p>\"Properties provides additional information for the policy rule\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultswithpropertiesmixin","title":"fn results.withPropertiesMixin","text":"<pre><code>withPropertiesMixin(properties)\n</code></pre> <p>\"Properties provides additional information for the policy rule\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultswithresources","title":"fn results.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Resources is an optional reference to the resource checked by the policy and rule\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultswithresourcesmixin","title":"fn results.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Resources is an optional reference to the resource checked by the policy and rule\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultswithresult","title":"fn results.withResult","text":"<pre><code>withResult(result)\n</code></pre> <p>\"Result indicates the outcome of the policy rule execution\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultswithrule","title":"fn results.withRule","text":"<pre><code>withRule(rule)\n</code></pre> <p>\"Rule is the name of the policy rule\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultswithscored","title":"fn results.withScored","text":"<pre><code>withScored(scored)\n</code></pre> <p>\"Scored indicates if this policy rule is scored\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultswithseverity","title":"fn results.withSeverity","text":"<pre><code>withSeverity(severity)\n</code></pre> <p>\"Severity indicates policy severity\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultswithsource","title":"fn results.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source is an identifier for the policy engine that manages this report\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#obj-resultsresourceselector","title":"obj results.resourceSelector","text":"<p>\"ResourceSelector is an optional selector for policy results that apply to multiple resources. For example, a policy result may apply to all pods that match a label. Either a Resource or a ResourceSelector can be specified. If neither are provided, the result is assumed to be for the policy report scope.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultsresourceselectorwithmatchexpressions","title":"fn results.resourceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultsresourceselectorwithmatchexpressionsmixin","title":"fn results.resourceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultsresourceselectorwithmatchlabels","title":"fn results.resourceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultsresourceselectorwithmatchlabelsmixin","title":"fn results.resourceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#obj-resultsresourceselectormatchexpressions","title":"obj results.resourceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultsresourceselectormatchexpressionswithkey","title":"fn results.resourceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultsresourceselectormatchexpressionswithoperator","title":"fn results.resourceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultsresourceselectormatchexpressionswithvalues","title":"fn results.resourceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultsresourceselectormatchexpressionswithvaluesmixin","title":"fn results.resourceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#obj-resultsresources","title":"obj results.resources","text":"<p>\"Resources is an optional reference to the resource checked by the policy and rule\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultsresourceswithapiversion","title":"fn results.resources.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultsresourceswithfieldpath","title":"fn results.resources.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre> <p>\"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultsresourceswithkind","title":"fn results.resources.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultsresourceswithname","title":"fn results.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultsresourceswithnamespace","title":"fn results.resources.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultsresourceswithresourceversion","title":"fn results.resources.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultsresourceswithuid","title":"fn results.resources.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#obj-resultstimestamp","title":"obj results.timestamp","text":"<p>\"Timestamp indicates the time the result was found\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultstimestampwithnanos","title":"fn results.timestamp.withNanos","text":"<pre><code>withNanos(nanos)\n</code></pre> <p>\"Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-resultstimestampwithseconds","title":"fn results.timestamp.withSeconds","text":"<pre><code>withSeconds(seconds)\n</code></pre> <p>\"Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#obj-scope","title":"obj scope","text":"<p>\"Scope is an optional reference to the report scope (e.g. a Deployment, Namespace, or Node)\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-scopewithapiversion","title":"fn scope.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-scopewithfieldpath","title":"fn scope.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre> <p>\"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-scopewithkind","title":"fn scope.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-scopewithname","title":"fn scope.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-scopewithnamespace","title":"fn scope.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-scopewithresourceversion","title":"fn scope.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-scopewithuid","title":"fn scope.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#obj-scopeselector","title":"obj scopeSelector","text":"<p>\"ScopeSelector is an optional selector for multiple scopes (e.g. Pods). Either one of, or none of, but not both of, Scope or ScopeSelector should be specified.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-scopeselectorwithmatchexpressions","title":"fn scopeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-scopeselectorwithmatchexpressionsmixin","title":"fn scopeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-scopeselectorwithmatchlabels","title":"fn scopeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-scopeselectorwithmatchlabelsmixin","title":"fn scopeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#obj-scopeselectormatchexpressions","title":"obj scopeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-scopeselectormatchexpressionswithkey","title":"fn scopeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-scopeselectormatchexpressionswithoperator","title":"fn scopeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-scopeselectormatchexpressionswithvalues","title":"fn scopeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-scopeselectormatchexpressionswithvaluesmixin","title":"fn scopeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#obj-summary","title":"obj summary","text":"<p>\"PolicyReportSummary provides a summary of results\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-summarywitherror","title":"fn summary.withError","text":"<pre><code>withError(err)\n</code></pre> <p>\"Error provides the count of policies that could not be evaluated\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-summarywithfail","title":"fn summary.withFail","text":"<pre><code>withFail(fail)\n</code></pre> <p>\"Fail provides the count of policies whose requirements were not met\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-summarywithpass","title":"fn summary.withPass","text":"<pre><code>withPass(pass)\n</code></pre> <p>\"Pass provides the count of policies whose requirements were met\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-summarywithskip","title":"fn summary.withSkip","text":"<pre><code>withSkip(skip)\n</code></pre> <p>\"Skip indicates the count of policies that were not selected for evaluation\"</p>"},{"location":"1.6/kyverno/v1alpha2/clusterReportChangeRequest/#fn-summarywithwarn","title":"fn summary.withWarn","text":"<pre><code>withWarn(warn)\n</code></pre> <p>\"Warn provides the count of unscored policies whose requirements were not met\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/","title":"kyverno.v1alpha2.reportChangeRequest","text":"<p>\"ReportChangeRequest is the Schema for the ReportChangeRequests API\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>fn withResults(results)</code></li> <li><code>fn withResultsMixin(results)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj results</code><ul> <li><code>fn withCategory(category)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPolicy(policy)</code></li> <li><code>fn withProperties(properties)</code></li> <li><code>fn withPropertiesMixin(properties)</code></li> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> <li><code>fn withResult(result)</code></li> <li><code>fn withRule(rule)</code></li> <li><code>fn withScored(scored)</code></li> <li><code>fn withSeverity(severity)</code></li> <li><code>fn withSource(source)</code></li> <li><code>obj results.resourceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj results.resourceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj results.resources</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj results.timestamp</code><ul> <li><code>fn withNanos(nanos)</code></li> <li><code>fn withSeconds(seconds)</code></li> </ul> </li> </ul> </li> <li><code>obj scope</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj scopeSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj scopeSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj summary</code><ul> <li><code>fn withError(err)</code></li> <li><code>fn withFail(fail)</code></li> <li><code>fn withPass(pass)</code></li> <li><code>fn withSkip(skip)</code></li> <li><code>fn withWarn(warn)</code></li> </ul> </li> </ul>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fields","title":"Fields","text":""},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ReportChangeRequest</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-withresults","title":"fn withResults","text":"<pre><code>withResults(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-withresultsmixin","title":"fn withResultsMixin","text":"<pre><code>withResultsMixin(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#obj-results","title":"obj results","text":"<p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultswithcategory","title":"fn results.withCategory","text":"<pre><code>withCategory(category)\n</code></pre> <p>\"Category indicates policy category\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultswithmessage","title":"fn results.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message is a short user friendly description of the policy rule\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultswithpolicy","title":"fn results.withPolicy","text":"<pre><code>withPolicy(policy)\n</code></pre> <p>\"Policy is the name of the policy\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultswithproperties","title":"fn results.withProperties","text":"<pre><code>withProperties(properties)\n</code></pre> <p>\"Properties provides additional information for the policy rule\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultswithpropertiesmixin","title":"fn results.withPropertiesMixin","text":"<pre><code>withPropertiesMixin(properties)\n</code></pre> <p>\"Properties provides additional information for the policy rule\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultswithresources","title":"fn results.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Resources is an optional reference to the resource checked by the policy and rule\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultswithresourcesmixin","title":"fn results.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Resources is an optional reference to the resource checked by the policy and rule\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultswithresult","title":"fn results.withResult","text":"<pre><code>withResult(result)\n</code></pre> <p>\"Result indicates the outcome of the policy rule execution\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultswithrule","title":"fn results.withRule","text":"<pre><code>withRule(rule)\n</code></pre> <p>\"Rule is the name of the policy rule\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultswithscored","title":"fn results.withScored","text":"<pre><code>withScored(scored)\n</code></pre> <p>\"Scored indicates if this policy rule is scored\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultswithseverity","title":"fn results.withSeverity","text":"<pre><code>withSeverity(severity)\n</code></pre> <p>\"Severity indicates policy severity\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultswithsource","title":"fn results.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source is an identifier for the policy engine that manages this report\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#obj-resultsresourceselector","title":"obj results.resourceSelector","text":"<p>\"ResourceSelector is an optional selector for policy results that apply to multiple resources. For example, a policy result may apply to all pods that match a label. Either a Resource or a ResourceSelector can be specified. If neither are provided, the result is assumed to be for the policy report scope.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultsresourceselectorwithmatchexpressions","title":"fn results.resourceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultsresourceselectorwithmatchexpressionsmixin","title":"fn results.resourceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultsresourceselectorwithmatchlabels","title":"fn results.resourceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultsresourceselectorwithmatchlabelsmixin","title":"fn results.resourceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#obj-resultsresourceselectormatchexpressions","title":"obj results.resourceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultsresourceselectormatchexpressionswithkey","title":"fn results.resourceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultsresourceselectormatchexpressionswithoperator","title":"fn results.resourceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultsresourceselectormatchexpressionswithvalues","title":"fn results.resourceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultsresourceselectormatchexpressionswithvaluesmixin","title":"fn results.resourceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#obj-resultsresources","title":"obj results.resources","text":"<p>\"Resources is an optional reference to the resource checked by the policy and rule\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultsresourceswithapiversion","title":"fn results.resources.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultsresourceswithfieldpath","title":"fn results.resources.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre> <p>\"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultsresourceswithkind","title":"fn results.resources.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultsresourceswithname","title":"fn results.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultsresourceswithnamespace","title":"fn results.resources.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultsresourceswithresourceversion","title":"fn results.resources.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultsresourceswithuid","title":"fn results.resources.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#obj-resultstimestamp","title":"obj results.timestamp","text":"<p>\"Timestamp indicates the time the result was found\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultstimestampwithnanos","title":"fn results.timestamp.withNanos","text":"<pre><code>withNanos(nanos)\n</code></pre> <p>\"Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-resultstimestampwithseconds","title":"fn results.timestamp.withSeconds","text":"<pre><code>withSeconds(seconds)\n</code></pre> <p>\"Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#obj-scope","title":"obj scope","text":"<p>\"Scope is an optional reference to the report scope (e.g. a Deployment, Namespace, or Node)\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-scopewithapiversion","title":"fn scope.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-scopewithfieldpath","title":"fn scope.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre> <p>\"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-scopewithkind","title":"fn scope.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-scopewithname","title":"fn scope.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-scopewithnamespace","title":"fn scope.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-scopewithresourceversion","title":"fn scope.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-scopewithuid","title":"fn scope.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#obj-scopeselector","title":"obj scopeSelector","text":"<p>\"ScopeSelector is an optional selector for multiple scopes (e.g. Pods). Either one of, or none of, but not both of, Scope or ScopeSelector should be specified.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-scopeselectorwithmatchexpressions","title":"fn scopeSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-scopeselectorwithmatchexpressionsmixin","title":"fn scopeSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-scopeselectorwithmatchlabels","title":"fn scopeSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-scopeselectorwithmatchlabelsmixin","title":"fn scopeSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#obj-scopeselectormatchexpressions","title":"obj scopeSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-scopeselectormatchexpressionswithkey","title":"fn scopeSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-scopeselectormatchexpressionswithoperator","title":"fn scopeSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-scopeselectormatchexpressionswithvalues","title":"fn scopeSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-scopeselectormatchexpressionswithvaluesmixin","title":"fn scopeSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#obj-summary","title":"obj summary","text":"<p>\"PolicyReportSummary provides a summary of results\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-summarywitherror","title":"fn summary.withError","text":"<pre><code>withError(err)\n</code></pre> <p>\"Error provides the count of policies that could not be evaluated\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-summarywithfail","title":"fn summary.withFail","text":"<pre><code>withFail(fail)\n</code></pre> <p>\"Fail provides the count of policies whose requirements were not met\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-summarywithpass","title":"fn summary.withPass","text":"<pre><code>withPass(pass)\n</code></pre> <p>\"Pass provides the count of policies whose requirements were met\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-summarywithskip","title":"fn summary.withSkip","text":"<pre><code>withSkip(skip)\n</code></pre> <p>\"Skip indicates the count of policies that were not selected for evaluation\"</p>"},{"location":"1.6/kyverno/v1alpha2/reportChangeRequest/#fn-summarywithwarn","title":"fn summary.withWarn","text":"<pre><code>withWarn(warn)\n</code></pre> <p>\"Warn provides the count of unscored policies whose requirements were not met\"</p>"},{"location":"1.9/","title":"kyverno","text":"<pre><code>local kyverno = import \"github.com/jsonnet-libs/kyverno-libsonnet/1.9/main.libsonnet\"\n</code></pre> <ul> <li>kyverno</li> </ul>"},{"location":"1.9/kyverno/","title":"kyverno","text":"<ul> <li>v1</li> <li>v1alpha2</li> <li>v1beta1</li> <li>v2alpha1</li> <li>v2beta1</li> </ul>"},{"location":"1.9/kyverno/v1/","title":"kyverno.v1","text":"<ul> <li>clusterPolicy</li> <li>generateRequest</li> <li>policy</li> </ul>"},{"location":"1.9/kyverno/v1/clusterPolicy/","title":"kyverno.v1.clusterPolicy","text":"<p>\"ClusterPolicy declares validation, mutation, and generation behaviors for matching resources.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withApplyRules(applyRules)</code></li> <li><code>fn withBackground(background)</code></li> <li><code>fn withFailurePolicy(failurePolicy)</code></li> <li><code>fn withGenerateExistingOnPolicyUpdate(generateExistingOnPolicyUpdate)</code></li> <li><code>fn withMutateExistingOnPolicyUpdate(mutateExistingOnPolicyUpdate)</code></li> <li><code>fn withRules(rules)</code></li> <li><code>fn withRulesMixin(rules)</code></li> <li><code>fn withSchemaValidation(schemaValidation)</code></li> <li><code>fn withValidationFailureAction(validationFailureAction)</code></li> <li><code>fn withValidationFailureActionOverrides(validationFailureActionOverrides)</code></li> <li><code>fn withValidationFailureActionOverridesMixin(validationFailureActionOverrides)</code></li> <li><code>fn withWebhookTimeoutSeconds(webhookTimeoutSeconds)</code></li> <li><code>obj spec.rules</code><ul> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withImageExtractors(imageExtractors)</code></li> <li><code>fn withImageExtractorsMixin(imageExtractors)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPreconditions(preconditions)</code></li> <li><code>fn withVerifyImages(verifyImages)</code></li> <li><code>fn withVerifyImagesMixin(verifyImages)</code></li> <li><code>obj spec.rules.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.context.apiCall</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> </ul> </li> <li><code>obj spec.rules.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> </ul> </li> <li><code>obj spec.rules.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.exclude.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.exclude.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.exclude.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.generate</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withData(data)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withSynchronize(synchronize)</code></li> <li><code>obj spec.rules.generate.clone</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.generate.cloneList</code><ul> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.rules.generate.cloneList.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.generate.cloneList.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.match.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.match.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.match.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate</code><ul> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withForeachMixin(foreach)</code></li> <li><code>fn withPatchStrategicMerge(patchStrategicMerge)</code></li> <li><code>fn withPatchesJson6902(patchesJson6902)</code></li> <li><code>fn withTargets(targets)</code></li> <li><code>fn withTargetsMixin(targets)</code></li> <li><code>obj spec.rules.mutate.foreach</code><ul> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withList(list)</code></li> <li><code>fn withPatchStrategicMerge(patchStrategicMerge)</code></li> <li><code>fn withPatchesJson6902(patchesJson6902)</code></li> <li><code>obj spec.rules.mutate.foreach.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.mutate.foreach.context.apiCall</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.mutate.foreach.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.targets</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate</code><ul> <li><code>fn withAnyPattern(anyPattern)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withForeachMixin(foreach)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPattern(pattern)</code></li> <li><code>obj spec.rules.validate.deny</code><ul> <li><code>fn withConditions(conditions)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach</code><ul> <li><code>fn withAnyPattern(anyPattern)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withElementScope(elementScope)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withList(list)</code></li> <li><code>fn withPattern(pattern)</code></li> <li><code>obj spec.rules.validate.foreach.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.validate.foreach.context.apiCall</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach.deny</code><ul> <li><code>fn withConditions(conditions)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.validate.foreach.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests</code><ul> <li><code>fn withAnnotationDomain(annotationDomain)</code></li> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withIgnoreFields(ignoreFields)</code></li> <li><code>fn withIgnoreFieldsMixin(ignoreFields)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.validate.manifests.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.certificates.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keyless.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.dryRun</code><ul> <li><code>fn withEnable(enable)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.ignoreFields</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>fn withObjects(objects)</code></li> <li><code>fn withObjectsMixin(objects)</code></li> <li><code>obj spec.rules.validate.manifests.ignoreFields.objects</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withVersion(version)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.podSecurity</code><ul> <li><code>fn withExclude(exclude)</code></li> <li><code>fn withExcludeMixin(exclude)</code></li> <li><code>fn withLevel(level)</code></li> <li><code>fn withVersion(version)</code></li> <li><code>obj spec.rules.validate.podSecurity.exclude</code><ul> <li><code>fn withControlName(controlName)</code></li> <li><code>fn withImages(images)</code></li> <li><code>fn withImagesMixin(images)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestations(attestations)</code></li> <li><code>fn withAttestationsMixin(attestations)</code></li> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withImage(image)</code></li> <li><code>fn withImageReferences(imageReferences)</code></li> <li><code>fn withImageReferencesMixin(imageReferences)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withMutateDigest(mutateDigest)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>fn withRequired(required)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>fn withVerifyDigest(verifyDigest)</code></li> <li><code>obj spec.rules.verifyImages.attestations</code><ul> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withConditions(conditions)</code></li> <li><code>fn withConditionsMixin(conditions)</code></li> <li><code>fn withPredicateType(predicateType)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.conditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.verifyImages.attestations.conditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.conditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.certificates.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.keyless.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.validationFailureActionOverrides</code><ul> <li><code>fn withAction(action)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fields","title":"Fields","text":""},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ClusterPolicy</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec declares policy behaviors.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specwithapplyrules","title":"fn spec.withApplyRules","text":"<pre><code>withApplyRules(applyRules)\n</code></pre> <p>\"ApplyRules controls how rules in a policy are applied. Rule are processed in the order of declaration. When set to <code>One</code> processing stops after a rule has been applied i.e. the rule matches and results in a pass, fail, or error. When set to <code>All</code> all rules in the policy are processed. The default is <code>All</code>.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specwithbackground","title":"fn spec.withBackground","text":"<pre><code>withBackground(background)\n</code></pre> <p>\"Background controls if rules are applied to existing resources during a background scan. Optional. Default value is \\\"true\\\". The value must be set to \\\"false\\\" if the policy rule uses variables that are only available in the admission review request (e.g. user name).\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specwithfailurepolicy","title":"fn spec.withFailurePolicy","text":"<pre><code>withFailurePolicy(failurePolicy)\n</code></pre> <p>\"FailurePolicy defines how unexpected policy errors and webhook response timeout errors are handled. Rules within the same policy share the same failure behavior. This field should not be accessed directly, instead <code>GetFailurePolicy()</code> should be used. Allowed values are Ignore or Fail. Defaults to Fail.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specwithgenerateexistingonpolicyupdate","title":"fn spec.withGenerateExistingOnPolicyUpdate","text":"<pre><code>withGenerateExistingOnPolicyUpdate(generateExistingOnPolicyUpdate)\n</code></pre> <p>\"GenerateExistingOnPolicyUpdate controls whether to trigger generate rule in existing resources If is set to \\\"true\\\" generate rule will be triggered and applied to existing matched resources. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specwithmutateexistingonpolicyupdate","title":"fn spec.withMutateExistingOnPolicyUpdate","text":"<pre><code>withMutateExistingOnPolicyUpdate(mutateExistingOnPolicyUpdate)\n</code></pre> <p>\"MutateExistingOnPolicyUpdate controls if a mutateExisting policy is applied on policy events. Default value is \\\"false\\\".\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specwithrules","title":"fn spec.withRules","text":"<pre><code>withRules(rules)\n</code></pre> <p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specwithrulesmixin","title":"fn spec.withRulesMixin","text":"<pre><code>withRulesMixin(rules)\n</code></pre> <p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specwithschemavalidation","title":"fn spec.withSchemaValidation","text":"<pre><code>withSchemaValidation(schemaValidation)\n</code></pre> <p>\"SchemaValidation skips validation checks for policies as well as patched resources. Optional. The default value is set to \\\"true\\\", it must be set to \\\"false\\\" to disable the validation checks.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specwithvalidationfailureaction","title":"fn spec.withValidationFailureAction","text":"<pre><code>withValidationFailureAction(validationFailureAction)\n</code></pre> <p>\"ValidationFailureAction defines if a validation policy rule violation should block the admission review request (enforce), or allow (audit) the admission review request and report an error in a policy report. Optional. Allowed values are audit or enforce. The default value is \\\"Audit\\\".\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specwithvalidationfailureactionoverrides","title":"fn spec.withValidationFailureActionOverrides","text":"<pre><code>withValidationFailureActionOverrides(validationFailureActionOverrides)\n</code></pre> <p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specwithvalidationfailureactionoverridesmixin","title":"fn spec.withValidationFailureActionOverridesMixin","text":"<pre><code>withValidationFailureActionOverridesMixin(validationFailureActionOverrides)\n</code></pre> <p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specwithwebhooktimeoutseconds","title":"fn spec.withWebhookTimeoutSeconds","text":"<pre><code>withWebhookTimeoutSeconds(webhookTimeoutSeconds)\n</code></pre> <p>\"WebhookTimeoutSeconds specifies the maximum time in seconds allowed to apply this policy. After the configured time expires, the admission request may fail, or may simply ignore the policy results, based on the failure policy. The default timeout is 10s, the value must be between 1 and 30 seconds.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrules","title":"obj spec.rules","text":"<p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specruleswithcontext","title":"fn spec.rules.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specruleswithcontextmixin","title":"fn spec.rules.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specruleswithimageextractors","title":"fn spec.rules.withImageExtractors","text":"<pre><code>withImageExtractors(imageExtractors)\n</code></pre> <p>\"ImageExtractors defines a mapping from kinds to ImageExtractorConfigs. This config is only valid for verifyImages rules.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specruleswithimageextractorsmixin","title":"fn spec.rules.withImageExtractorsMixin","text":"<pre><code>withImageExtractorsMixin(imageExtractors)\n</code></pre> <p>\"ImageExtractors defines a mapping from kinds to ImageExtractorConfigs. This config is only valid for verifyImages rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specruleswithname","title":"fn spec.rules.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a label to identify the rule, It must be unique within the policy.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specruleswithpreconditions","title":"fn spec.rules.withPreconditions","text":"<pre><code>withPreconditions(preconditions)\n</code></pre> <p>\"Preconditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. A direct list of conditions (without <code>any</code> or <code>all</code> statements is supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specruleswithverifyimages","title":"fn spec.rules.withVerifyImages","text":"<pre><code>withVerifyImages(verifyImages)\n</code></pre> <p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specruleswithverifyimagesmixin","title":"fn spec.rules.withVerifyImagesMixin","text":"<pre><code>withVerifyImagesMixin(verifyImages)\n</code></pre> <p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulescontext","title":"obj spec.rules.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulescontextwithname","title":"fn spec.rules.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulescontextapicall","title":"obj spec.rules.context.apiCall","text":"<p>\"APICall defines an HTTP request to the Kubernetes API server. The JSON data retrieved is stored in the context.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulescontextapicallwithjmespath","title":"fn spec.rules.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the API server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response to the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulescontextapicallwithurlpath","title":"fn spec.rules.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulescontextconfigmap","title":"obj spec.rules.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulescontextconfigmapwithname","title":"fn spec.rules.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulescontextconfigmapwithnamespace","title":"fn spec.rules.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulescontextimageregistry","title":"obj spec.rules.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulescontextimageregistrywithjmespath","title":"fn spec.rules.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulescontextimageregistrywithreference","title":"fn spec.rules.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulescontextvariable","title":"obj spec.rules.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulescontextvariablewithdefault","title":"fn spec.rules.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulescontextvariablewithjmespath","title":"fn spec.rules.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulescontextvariablewithvalue","title":"fn spec.rules.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexclude","title":"obj spec.rules.exclude","text":"<p>\"ExcludeResources defines when this policy rule should not be applied. The exclude criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the name or role.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithall","title":"fn spec.rules.exclude.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithallmixin","title":"fn spec.rules.exclude.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithany","title":"fn spec.rules.exclude.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithanymixin","title":"fn spec.rules.exclude.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithclusterroles","title":"fn spec.rules.exclude.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithclusterrolesmixin","title":"fn spec.rules.exclude.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithroles","title":"fn spec.rules.exclude.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithrolesmixin","title":"fn spec.rules.exclude.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithsubjects","title":"fn spec.rules.exclude.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludewithsubjectsmixin","title":"fn spec.rules.exclude.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexcludeall","title":"obj spec.rules.exclude.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallwithclusterroles","title":"fn spec.rules.exclude.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallwithclusterrolesmixin","title":"fn spec.rules.exclude.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallwithroles","title":"fn spec.rules.exclude.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallwithrolesmixin","title":"fn spec.rules.exclude.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallwithsubjects","title":"fn spec.rules.exclude.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallwithsubjectsmixin","title":"fn spec.rules.exclude.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexcludeallresources","title":"obj spec.rules.exclude.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithannotations","title":"fn spec.rules.exclude.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithannotationsmixin","title":"fn spec.rules.exclude.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithkinds","title":"fn spec.rules.exclude.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithkindsmixin","title":"fn spec.rules.exclude.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithname","title":"fn spec.rules.exclude.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithnames","title":"fn spec.rules.exclude.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithnamesmixin","title":"fn spec.rules.exclude.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithnamespaces","title":"fn spec.rules.exclude.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourceswithnamespacesmixin","title":"fn spec.rules.exclude.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexcludeallresourcesnamespaceselector","title":"obj spec.rules.exclude.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexcludeallresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexcludeallresourcesselector","title":"obj spec.rules.exclude.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexcludeallresourcesselectormatchexpressions","title":"obj spec.rules.exclude.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexcludeallsubjects","title":"obj spec.rules.exclude.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallsubjectswithapigroup","title":"fn spec.rules.exclude.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallsubjectswithkind","title":"fn spec.rules.exclude.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallsubjectswithname","title":"fn spec.rules.exclude.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeallsubjectswithnamespace","title":"fn spec.rules.exclude.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexcludeany","title":"obj spec.rules.exclude.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanywithclusterroles","title":"fn spec.rules.exclude.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanywithclusterrolesmixin","title":"fn spec.rules.exclude.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanywithroles","title":"fn spec.rules.exclude.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanywithrolesmixin","title":"fn spec.rules.exclude.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanywithsubjects","title":"fn spec.rules.exclude.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanywithsubjectsmixin","title":"fn spec.rules.exclude.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexcludeanyresources","title":"obj spec.rules.exclude.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithannotations","title":"fn spec.rules.exclude.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithannotationsmixin","title":"fn spec.rules.exclude.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithkinds","title":"fn spec.rules.exclude.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithkindsmixin","title":"fn spec.rules.exclude.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithname","title":"fn spec.rules.exclude.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithnames","title":"fn spec.rules.exclude.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithnamesmixin","title":"fn spec.rules.exclude.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithnamespaces","title":"fn spec.rules.exclude.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourceswithnamespacesmixin","title":"fn spec.rules.exclude.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexcludeanyresourcesnamespaceselector","title":"obj spec.rules.exclude.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexcludeanyresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexcludeanyresourcesselector","title":"obj spec.rules.exclude.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexcludeanyresourcesselectormatchexpressions","title":"obj spec.rules.exclude.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexcludeanysubjects","title":"obj spec.rules.exclude.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanysubjectswithapigroup","title":"fn spec.rules.exclude.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanysubjectswithkind","title":"fn spec.rules.exclude.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanysubjectswithname","title":"fn spec.rules.exclude.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludeanysubjectswithnamespace","title":"fn spec.rules.exclude.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexcluderesources","title":"obj spec.rules.exclude.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified. Requires at least one tag to be specified when under MatchResources. Specifying ResourceDescription directly under match is being deprecated. Please specify under \\\"any\\\" or \\\"all\\\" instead.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithannotations","title":"fn spec.rules.exclude.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithannotationsmixin","title":"fn spec.rules.exclude.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithkinds","title":"fn spec.rules.exclude.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithkindsmixin","title":"fn spec.rules.exclude.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithname","title":"fn spec.rules.exclude.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithnames","title":"fn spec.rules.exclude.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithnamesmixin","title":"fn spec.rules.exclude.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithnamespaces","title":"fn spec.rules.exclude.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourceswithnamespacesmixin","title":"fn spec.rules.exclude.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexcluderesourcesnamespaceselector","title":"obj spec.rules.exclude.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexcluderesourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexcluderesourcesselector","title":"obj spec.rules.exclude.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexcluderesourcesselectormatchexpressions","title":"obj spec.rules.exclude.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcluderesourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesexcludesubjects","title":"obj spec.rules.exclude.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludesubjectswithapigroup","title":"fn spec.rules.exclude.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludesubjectswithkind","title":"fn spec.rules.exclude.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludesubjectswithname","title":"fn spec.rules.exclude.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesexcludesubjectswithnamespace","title":"fn spec.rules.exclude.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesgenerate","title":"obj spec.rules.generate","text":"<p>\"Generation is used to create new resources.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesgeneratewithapiversion","title":"fn spec.rules.generate.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesgeneratewithdata","title":"fn spec.rules.generate.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data provides the resource declaration used to populate each generated resource. At most one of Data or Clone must be specified. If neither are provided, the generated resource will be created with default data only.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesgeneratewithkind","title":"fn spec.rules.generate.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesgeneratewithname","title":"fn spec.rules.generate.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesgeneratewithnamespace","title":"fn spec.rules.generate.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesgeneratewithsynchronize","title":"fn spec.rules.generate.withSynchronize","text":"<pre><code>withSynchronize(synchronize)\n</code></pre> <p>\"Synchronize controls if generated resources should be kept in-sync with their source resource. If Synchronize is set to \\\"true\\\" changes to generated resources will be overwritten with resource data from Data or the resource specified in the Clone declaration. Optional. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesgenerateclone","title":"obj spec.rules.generate.clone","text":"<p>\"Clone specifies the source resource used to populate each generated resource. At most one of Data or Clone can be specified. If neither are provided, the generated resource will be created with default data only.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonewithname","title":"fn spec.rules.generate.clone.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies name of the resource.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonewithnamespace","title":"fn spec.rules.generate.clone.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies source resource namespace.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesgenerateclonelist","title":"obj spec.rules.generate.cloneList","text":"<p>\"CloneList specifies the list of source resource used to populate each generated resource.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistwithkinds","title":"fn spec.rules.generate.cloneList.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistwithkindsmixin","title":"fn spec.rules.generate.cloneList.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistwithnamespace","title":"fn spec.rules.generate.cloneList.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies source resource namespace.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesgenerateclonelistselector","title":"obj spec.rules.generate.cloneList.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code>. wildcard characters are not supported.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistselectorwithmatchexpressions","title":"fn spec.rules.generate.cloneList.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistselectorwithmatchexpressionsmixin","title":"fn spec.rules.generate.cloneList.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistselectorwithmatchlabels","title":"fn spec.rules.generate.cloneList.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistselectorwithmatchlabelsmixin","title":"fn spec.rules.generate.cloneList.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesgenerateclonelistselectormatchexpressions","title":"obj spec.rules.generate.cloneList.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistselectormatchexpressionswithkey","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistselectormatchexpressionswithoperator","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistselectormatchexpressionswithvalues","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesgenerateclonelistselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatch","title":"obj spec.rules.match","text":"<p>\"MatchResources defines when this policy rule should be applied. The match criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the user name or role. At least one kind is required.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithall","title":"fn spec.rules.match.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithallmixin","title":"fn spec.rules.match.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithany","title":"fn spec.rules.match.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithanymixin","title":"fn spec.rules.match.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithclusterroles","title":"fn spec.rules.match.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithclusterrolesmixin","title":"fn spec.rules.match.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithroles","title":"fn spec.rules.match.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithrolesmixin","title":"fn spec.rules.match.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithsubjects","title":"fn spec.rules.match.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchwithsubjectsmixin","title":"fn spec.rules.match.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatchall","title":"obj spec.rules.match.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallwithclusterroles","title":"fn spec.rules.match.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallwithclusterrolesmixin","title":"fn spec.rules.match.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallwithroles","title":"fn spec.rules.match.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallwithrolesmixin","title":"fn spec.rules.match.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallwithsubjects","title":"fn spec.rules.match.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallwithsubjectsmixin","title":"fn spec.rules.match.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatchallresources","title":"obj spec.rules.match.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithannotations","title":"fn spec.rules.match.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithannotationsmixin","title":"fn spec.rules.match.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithkinds","title":"fn spec.rules.match.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithkindsmixin","title":"fn spec.rules.match.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithname","title":"fn spec.rules.match.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithnames","title":"fn spec.rules.match.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithnamesmixin","title":"fn spec.rules.match.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithnamespaces","title":"fn spec.rules.match.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourceswithnamespacesmixin","title":"fn spec.rules.match.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatchallresourcesnamespaceselector","title":"obj spec.rules.match.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatchallresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatchallresourcesselector","title":"obj spec.rules.match.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectorwithmatchlabels","title":"fn spec.rules.match.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatchallresourcesselectormatchexpressions","title":"obj spec.rules.match.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatchallsubjects","title":"obj spec.rules.match.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallsubjectswithapigroup","title":"fn spec.rules.match.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallsubjectswithkind","title":"fn spec.rules.match.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallsubjectswithname","title":"fn spec.rules.match.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchallsubjectswithnamespace","title":"fn spec.rules.match.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatchany","title":"obj spec.rules.match.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanywithclusterroles","title":"fn spec.rules.match.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanywithclusterrolesmixin","title":"fn spec.rules.match.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanywithroles","title":"fn spec.rules.match.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanywithrolesmixin","title":"fn spec.rules.match.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanywithsubjects","title":"fn spec.rules.match.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanywithsubjectsmixin","title":"fn spec.rules.match.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatchanyresources","title":"obj spec.rules.match.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithannotations","title":"fn spec.rules.match.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithannotationsmixin","title":"fn spec.rules.match.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithkinds","title":"fn spec.rules.match.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithkindsmixin","title":"fn spec.rules.match.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithname","title":"fn spec.rules.match.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithnames","title":"fn spec.rules.match.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithnamesmixin","title":"fn spec.rules.match.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithnamespaces","title":"fn spec.rules.match.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourceswithnamespacesmixin","title":"fn spec.rules.match.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatchanyresourcesnamespaceselector","title":"obj spec.rules.match.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatchanyresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatchanyresourcesselector","title":"obj spec.rules.match.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectorwithmatchlabels","title":"fn spec.rules.match.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatchanyresourcesselectormatchexpressions","title":"obj spec.rules.match.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatchanysubjects","title":"obj spec.rules.match.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanysubjectswithapigroup","title":"fn spec.rules.match.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanysubjectswithkind","title":"fn spec.rules.match.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanysubjectswithname","title":"fn spec.rules.match.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchanysubjectswithnamespace","title":"fn spec.rules.match.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatchresources","title":"obj spec.rules.match.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified. Requires at least one tag to be specified when under MatchResources. Specifying ResourceDescription directly under match is being deprecated. Please specify under \\\"any\\\" or \\\"all\\\" instead.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithannotations","title":"fn spec.rules.match.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithannotationsmixin","title":"fn spec.rules.match.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithkinds","title":"fn spec.rules.match.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithkindsmixin","title":"fn spec.rules.match.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithname","title":"fn spec.rules.match.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithnames","title":"fn spec.rules.match.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithnamesmixin","title":"fn spec.rules.match.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithnamespaces","title":"fn spec.rules.match.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourceswithnamespacesmixin","title":"fn spec.rules.match.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatchresourcesnamespaceselector","title":"obj spec.rules.match.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatchresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatchresourcesselector","title":"obj spec.rules.match.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectorwithmatchlabels","title":"fn spec.rules.match.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatchresourcesselectormatchexpressions","title":"obj spec.rules.match.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmatchsubjects","title":"obj spec.rules.match.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchsubjectswithapigroup","title":"fn spec.rules.match.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchsubjectswithkind","title":"fn spec.rules.match.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchsubjectswithname","title":"fn spec.rules.match.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmatchsubjectswithnamespace","title":"fn spec.rules.match.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmutate","title":"obj spec.rules.mutate","text":"<p>\"Mutation is used to modify matching resources.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutatewithforeach","title":"fn spec.rules.mutate.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutatewithforeachmixin","title":"fn spec.rules.mutate.withForeachMixin","text":"<pre><code>withForeachMixin(foreach)\n</code></pre> <p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutatewithpatchstrategicmerge","title":"fn spec.rules.mutate.withPatchStrategicMerge","text":"<pre><code>withPatchStrategicMerge(patchStrategicMerge)\n</code></pre> <p>\"PatchStrategicMerge is a strategic merge patch used to modify resources. See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutatewithpatchesjson6902","title":"fn spec.rules.mutate.withPatchesJson6902","text":"<pre><code>withPatchesJson6902(patchesJson6902)\n</code></pre> <p>\"PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources. See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutatewithtargets","title":"fn spec.rules.mutate.withTargets","text":"<pre><code>withTargets(targets)\n</code></pre> <p>\"Targets defines the target resources to be mutated.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutatewithtargetsmixin","title":"fn spec.rules.mutate.withTargetsMixin","text":"<pre><code>withTargetsMixin(targets)\n</code></pre> <p>\"Targets defines the target resources to be mutated.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeach","title":"obj spec.rules.mutate.foreach","text":"<p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachwithcontext","title":"fn spec.rules.mutate.foreach.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachwithcontextmixin","title":"fn spec.rules.mutate.foreach.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachwithforeach","title":"fn spec.rules.mutate.foreach.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"Foreach declares a nested foreach iterator\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachwithlist","title":"fn spec.rules.mutate.foreach.withList","text":"<pre><code>withList(list)\n</code></pre> <p>\"List specifies a JMESPath expression that results in one or more elements to which the validation logic is applied.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachwithpatchstrategicmerge","title":"fn spec.rules.mutate.foreach.withPatchStrategicMerge","text":"<pre><code>withPatchStrategicMerge(patchStrategicMerge)\n</code></pre> <p>\"PatchStrategicMerge is a strategic merge patch used to modify resources. See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachwithpatchesjson6902","title":"fn spec.rules.mutate.foreach.withPatchesJson6902","text":"<pre><code>withPatchesJson6902(patchesJson6902)\n</code></pre> <p>\"PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources. See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachcontext","title":"obj spec.rules.mutate.foreach.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextwithname","title":"fn spec.rules.mutate.foreach.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachcontextapicall","title":"obj spec.rules.mutate.foreach.context.apiCall","text":"<p>\"APICall defines an HTTP request to the Kubernetes API server. The JSON data retrieved is stored in the context.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextapicallwithjmespath","title":"fn spec.rules.mutate.foreach.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the API server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response to the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextapicallwithurlpath","title":"fn spec.rules.mutate.foreach.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachcontextconfigmap","title":"obj spec.rules.mutate.foreach.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextconfigmapwithname","title":"fn spec.rules.mutate.foreach.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextconfigmapwithnamespace","title":"fn spec.rules.mutate.foreach.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachcontextimageregistry","title":"obj spec.rules.mutate.foreach.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextimageregistrywithjmespath","title":"fn spec.rules.mutate.foreach.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextimageregistrywithreference","title":"fn spec.rules.mutate.foreach.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachcontextvariable","title":"obj spec.rules.mutate.foreach.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextvariablewithdefault","title":"fn spec.rules.mutate.foreach.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextvariablewithjmespath","title":"fn spec.rules.mutate.foreach.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachcontextvariablewithvalue","title":"fn spec.rules.mutate.foreach.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachpreconditions","title":"obj spec.rules.mutate.foreach.preconditions","text":"<p>\"AnyAllConditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionswithall","title":"fn spec.rules.mutate.foreach.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionswithallmixin","title":"fn spec.rules.mutate.foreach.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionswithany","title":"fn spec.rules.mutate.foreach.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionswithanymixin","title":"fn spec.rules.mutate.foreach.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachpreconditionsall","title":"obj spec.rules.mutate.foreach.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsallwithkey","title":"fn spec.rules.mutate.foreach.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsallwithoperator","title":"fn spec.rules.mutate.foreach.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsallwithvalue","title":"fn spec.rules.mutate.foreach.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmutateforeachpreconditionsany","title":"obj spec.rules.mutate.foreach.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsanywithkey","title":"fn spec.rules.mutate.foreach.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsanywithoperator","title":"fn spec.rules.mutate.foreach.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsanywithvalue","title":"fn spec.rules.mutate.foreach.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesmutatetargets","title":"obj spec.rules.mutate.targets","text":"<p>\"Targets defines the target resources to be mutated.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetswithapiversion","title":"fn spec.rules.mutate.targets.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetswithkind","title":"fn spec.rules.mutate.targets.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetswithname","title":"fn spec.rules.mutate.targets.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesmutatetargetswithnamespace","title":"fn spec.rules.mutate.targets.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidate","title":"obj spec.rules.validate","text":"<p>\"Validation is used to validate matching resources.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatewithanypattern","title":"fn spec.rules.validate.withAnyPattern","text":"<pre><code>withAnyPattern(anyPattern)\n</code></pre> <p>\"AnyPattern specifies list of validation patterns. At least one of the patterns must be satisfied for the validation rule to succeed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatewithforeach","title":"fn spec.rules.validate.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatewithforeachmixin","title":"fn spec.rules.validate.withForeachMixin","text":"<pre><code>withForeachMixin(foreach)\n</code></pre> <p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatewithmessage","title":"fn spec.rules.validate.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message specifies a custom message to be displayed on failure.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatewithpattern","title":"fn spec.rules.validate.withPattern","text":"<pre><code>withPattern(pattern)\n</code></pre> <p>\"Pattern specifies an overlay-style pattern used to check resources.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidatedeny","title":"obj spec.rules.validate.deny","text":"<p>\"Deny defines conditions used to pass or fail a validation rule.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatedenywithconditions","title":"fn spec.rules.validate.deny.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Multiple conditions can be declared under an <code>any</code> or <code>all</code> statement. A direct list of conditions (without <code>any</code> or <code>all</code> statements) is also supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/validate/#deny-rules\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeach","title":"obj spec.rules.validate.foreach","text":"<p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachwithanypattern","title":"fn spec.rules.validate.foreach.withAnyPattern","text":"<pre><code>withAnyPattern(anyPattern)\n</code></pre> <p>\"AnyPattern specifies list of validation patterns. At least one of the patterns must be satisfied for the validation rule to succeed.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachwithcontext","title":"fn spec.rules.validate.foreach.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachwithcontextmixin","title":"fn spec.rules.validate.foreach.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachwithelementscope","title":"fn spec.rules.validate.foreach.withElementScope","text":"<pre><code>withElementScope(elementScope)\n</code></pre> <p>\"ElementScope specifies whether to use the current list element as the scope for validation. Defaults to \\\"true\\\" if not specified. When set to \\\"false\\\", \\\"request.object\\\" is used as the validation scope within the foreach block to allow referencing other elements in the subtree.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachwithforeach","title":"fn spec.rules.validate.foreach.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"Foreach declares a nested foreach iterator\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachwithlist","title":"fn spec.rules.validate.foreach.withList","text":"<pre><code>withList(list)\n</code></pre> <p>\"List specifies a JMESPath expression that results in one or more elements to which the validation logic is applied.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachwithpattern","title":"fn spec.rules.validate.foreach.withPattern","text":"<pre><code>withPattern(pattern)\n</code></pre> <p>\"Pattern specifies an overlay-style pattern used to check resources.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachcontext","title":"obj spec.rules.validate.foreach.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextwithname","title":"fn spec.rules.validate.foreach.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachcontextapicall","title":"obj spec.rules.validate.foreach.context.apiCall","text":"<p>\"APICall defines an HTTP request to the Kubernetes API server. The JSON data retrieved is stored in the context.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicallwithjmespath","title":"fn spec.rules.validate.foreach.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the API server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response to the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicallwithurlpath","title":"fn spec.rules.validate.foreach.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachcontextconfigmap","title":"obj spec.rules.validate.foreach.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextconfigmapwithname","title":"fn spec.rules.validate.foreach.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextconfigmapwithnamespace","title":"fn spec.rules.validate.foreach.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachcontextimageregistry","title":"obj spec.rules.validate.foreach.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextimageregistrywithjmespath","title":"fn spec.rules.validate.foreach.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextimageregistrywithreference","title":"fn spec.rules.validate.foreach.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachcontextvariable","title":"obj spec.rules.validate.foreach.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextvariablewithdefault","title":"fn spec.rules.validate.foreach.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextvariablewithjmespath","title":"fn spec.rules.validate.foreach.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachcontextvariablewithvalue","title":"fn spec.rules.validate.foreach.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachdeny","title":"obj spec.rules.validate.foreach.deny","text":"<p>\"Deny defines conditions used to pass or fail a validation rule.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachdenywithconditions","title":"fn spec.rules.validate.foreach.deny.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Multiple conditions can be declared under an <code>any</code> or <code>all</code> statement. A direct list of conditions (without <code>any</code> or <code>all</code> statements) is also supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/validate/#deny-rules\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachpreconditions","title":"obj spec.rules.validate.foreach.preconditions","text":"<p>\"AnyAllConditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionswithall","title":"fn spec.rules.validate.foreach.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionswithallmixin","title":"fn spec.rules.validate.foreach.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionswithany","title":"fn spec.rules.validate.foreach.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionswithanymixin","title":"fn spec.rules.validate.foreach.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachpreconditionsall","title":"obj spec.rules.validate.foreach.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsallwithkey","title":"fn spec.rules.validate.foreach.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsallwithoperator","title":"fn spec.rules.validate.foreach.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsallwithvalue","title":"fn spec.rules.validate.foreach.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidateforeachpreconditionsany","title":"obj spec.rules.validate.foreach.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsanywithkey","title":"fn spec.rules.validate.foreach.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsanywithoperator","title":"fn spec.rules.validate.foreach.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsanywithvalue","title":"fn spec.rules.validate.foreach.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifests","title":"obj spec.rules.validate.manifests","text":"<p>\"Manifest specifies conditions for manifest verification\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestswithannotationdomain","title":"fn spec.rules.validate.manifests.withAnnotationDomain","text":"<pre><code>withAnnotationDomain(annotationDomain)\n</code></pre> <p>\"AnnotationDomain is custom domain of annotation for message and signature. Default is \\\"cosign.sigstore.dev\\\".\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestswithattestors","title":"fn spec.rules.validate.manifests.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestswithattestorsmixin","title":"fn spec.rules.validate.manifests.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestswithignorefields","title":"fn spec.rules.validate.manifests.withIgnoreFields","text":"<pre><code>withIgnoreFields(ignoreFields)\n</code></pre> <p>\"Fields which will be ignored while comparing manifests.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestswithignorefieldsmixin","title":"fn spec.rules.validate.manifests.withIgnoreFieldsMixin","text":"<pre><code>withIgnoreFieldsMixin(ignoreFields)\n</code></pre> <p>\"Fields which will be ignored while comparing manifests.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestswithrepository","title":"fn spec.rules.validate.manifests.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for resource bundle reference. The repository can be overridden per Attestor or Attestation.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestors","title":"obj spec.rules.validate.manifests.attestors","text":"<p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorswithcount","title":"fn spec.rules.validate.manifests.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorswithentries","title":"fn spec.rules.validate.manifests.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorswithentriesmixin","title":"fn spec.rules.validate.manifests.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentries","title":"obj spec.rules.validate.manifests.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieswithannotations","title":"fn spec.rules.validate.manifests.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieswithannotationsmixin","title":"fn spec.rules.validate.manifests.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieswithattestor","title":"fn spec.rules.validate.manifests.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested AttestorSet used to specify a more complex set of match authorities\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieswithrepository","title":"fn spec.rules.validate.manifests.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentriescertificates","title":"obj spec.rules.validate.manifests.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentriescertificateswithcert","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Certificate is an optional PEM encoded public certificate.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentriescertificateswithcertchain","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertificateChain is an optional PEM encoded set of certificates used to verify\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentriescertificatesrekor","title":"obj spec.rules.validate.manifests.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeyless","title":"obj spec.rules.validate.manifests.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithissuer","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithroots","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithsubject","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeylessrekor","title":"obj spec.rules.validate.manifests.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked and a root certificate chain is expected instead. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeys","title":"obj spec.rules.validate.manifests.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithkms","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithpublickeys","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeysrekor","title":"obj spec.rules.validate.manifests.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeysrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeyssecret","title":"obj spec.rules.validate.manifests.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeyssecretwithname","title":"fn spec.rules.validate.manifests.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.validate.manifests.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsdryrun","title":"obj spec.rules.validate.manifests.dryRun","text":"<p>\"DryRun configuration\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsdryrunwithenable","title":"fn spec.rules.validate.manifests.dryRun.withEnable","text":"<pre><code>withEnable(enable)\n</code></pre>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsdryrunwithnamespace","title":"fn spec.rules.validate.manifests.dryRun.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsignorefields","title":"obj spec.rules.validate.manifests.ignoreFields","text":"<p>\"Fields which will be ignored while comparing manifests.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldswithfields","title":"fn spec.rules.validate.manifests.ignoreFields.withFields","text":"<pre><code>withFields(fields)\n</code></pre>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldswithfieldsmixin","title":"fn spec.rules.validate.manifests.ignoreFields.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldswithobjects","title":"fn spec.rules.validate.manifests.ignoreFields.withObjects","text":"<pre><code>withObjects(objects)\n</code></pre>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldswithobjectsmixin","title":"fn spec.rules.validate.manifests.ignoreFields.withObjectsMixin","text":"<pre><code>withObjectsMixin(objects)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidatemanifestsignorefieldsobjects","title":"obj spec.rules.validate.manifests.ignoreFields.objects","text":""},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithgroup","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withGroup","text":"<pre><code>withGroup(group)\n</code></pre>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithkind","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithname","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithnamespace","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithversion","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withVersion","text":"<pre><code>withVersion(version)\n</code></pre>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidatepodsecurity","title":"obj spec.rules.validate.podSecurity","text":"<p>\"PodSecurity applies exemptions for Kubernetes Pod Security admission by specifying exclusions for Pod Security Standards controls.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatepodsecuritywithexclude","title":"fn spec.rules.validate.podSecurity.withExclude","text":"<pre><code>withExclude(exclude)\n</code></pre> <p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatepodsecuritywithexcludemixin","title":"fn spec.rules.validate.podSecurity.withExcludeMixin","text":"<pre><code>withExcludeMixin(exclude)\n</code></pre> <p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatepodsecuritywithlevel","title":"fn spec.rules.validate.podSecurity.withLevel","text":"<pre><code>withLevel(level)\n</code></pre> <p>\"Level defines the Pod Security Standard level to be applied to workloads. Allowed values are privileged, baseline, and restricted.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatepodsecuritywithversion","title":"fn spec.rules.validate.podSecurity.withVersion","text":"<pre><code>withVersion(version)\n</code></pre> <p>\"Version defines the Pod Security Standard versions that Kubernetes supports. Allowed values are v1.19, v1.20, v1.21, v1.22, v1.23, v1.24, v1.25, latest. Defaults to latest.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesvalidatepodsecurityexclude","title":"obj spec.rules.validate.podSecurity.exclude","text":"<p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatepodsecurityexcludewithcontrolname","title":"fn spec.rules.validate.podSecurity.exclude.withControlName","text":"<pre><code>withControlName(controlName)\n</code></pre> <p>\"ControlName specifies the name of the Pod Security Standard control. See: https://kubernetes.io/docs/concepts/security/pod-security-standards/\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatepodsecurityexcludewithimages","title":"fn spec.rules.validate.podSecurity.exclude.withImages","text":"<pre><code>withImages(images)\n</code></pre> <p>\"Images selects matching containers and applies the container level PSS. Each image is the image name consisting of the registry address, repository, image, and tag. Empty list matches no containers, PSS checks are applied at the pod level only. Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesvalidatepodsecurityexcludewithimagesmixin","title":"fn spec.rules.validate.podSecurity.exclude.withImagesMixin","text":"<pre><code>withImagesMixin(images)\n</code></pre> <p>\"Images selects matching containers and applies the container level PSS. Each image is the image name consisting of the registry address, repository, image, and tag. Empty list matches no containers, PSS checks are applied at the pod level only. Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimages","title":"obj spec.rules.verifyImages","text":"<p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithadditionalextensions","title":"fn spec.rules.verifyImages.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing. Deprecated.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithadditionalextensionsmixin","title":"fn spec.rules.verifyImages.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing. Deprecated.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithannotations","title":"fn spec.rules.verifyImages.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs. Deprecated. Use annotations per Attestor instead.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithannotationsmixin","title":"fn spec.rules.verifyImages.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs. Deprecated. Use annotations per Attestor instead.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithattestations","title":"fn spec.rules.verifyImages.withAttestations","text":"<pre><code>withAttestations(attestations)\n</code></pre> <p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithattestationsmixin","title":"fn spec.rules.verifyImages.withAttestationsMixin","text":"<pre><code>withAttestationsMixin(attestations)\n</code></pre> <p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithattestors","title":"fn spec.rules.verifyImages.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithattestorsmixin","title":"fn spec.rules.verifyImages.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithimage","title":"fn spec.rules.verifyImages.withImage","text":"<pre><code>withImage(image)\n</code></pre> <p>\"Image is the image name consisting of the registry address, repository, image, and tag. Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images. Deprecated. Use ImageReferences instead.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithimagereferences","title":"fn spec.rules.verifyImages.withImageReferences","text":"<pre><code>withImageReferences(imageReferences)\n</code></pre> <p>\"ImageReferences is a list of matching image reference patterns. At least one pattern in the list must match the image for the rule to apply. Each image reference consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest). Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithimagereferencesmixin","title":"fn spec.rules.verifyImages.withImageReferencesMixin","text":"<pre><code>withImageReferencesMixin(imageReferences)\n</code></pre> <p>\"ImageReferences is a list of matching image reference patterns. At least one pattern in the list must match the image for the rule to apply. Each image reference consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest). Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithissuer","title":"fn spec.rules.verifyImages.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing. Deprecated. Use KeylessAttestor instead.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithkey","title":"fn spec.rules.verifyImages.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the PEM encoded public key that the image or attestation is signed with. Deprecated. Use StaticKeyAttestor instead.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithmutatedigest","title":"fn spec.rules.verifyImages.withMutateDigest","text":"<pre><code>withMutateDigest(mutateDigest)\n</code></pre> <p>\"MutateDigest enables replacement of image tags with digests. Defaults to true.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithrepository","title":"fn spec.rules.verifyImages.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule. If specified Repository will override the default OCI image repository configured for the installation. The repository can also be overridden per Attestor or Attestation.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithrequired","title":"fn spec.rules.verifyImages.withRequired","text":"<pre><code>withRequired(required)\n</code></pre> <p>\"Required validates that images are verified i.e. have matched passed a signature or attestation check.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithroots","title":"fn spec.rules.verifyImages.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is the PEM encoded Root certificate chain used for keyless signing Deprecated. Use KeylessAttestor instead.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithsubject","title":"fn spec.rules.verifyImages.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the identity used for keyless signing, for example an email address Deprecated. Use KeylessAttestor instead.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimageswithverifydigest","title":"fn spec.rules.verifyImages.withVerifyDigest","text":"<pre><code>withVerifyDigest(verifyDigest)\n</code></pre> <p>\"VerifyDigest validates that images have a digest.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestations","title":"obj spec.rules.verifyImages.attestations","text":"<p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationswithattestors","title":"fn spec.rules.verifyImages.attestations.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specify the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationswithattestorsmixin","title":"fn spec.rules.verifyImages.attestations.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specify the required attestors (i.e. authorities)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationswithconditions","title":"fn spec.rules.verifyImages.attestations.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationswithconditionsmixin","title":"fn spec.rules.verifyImages.attestations.withConditionsMixin","text":"<pre><code>withConditionsMixin(conditions)\n</code></pre> <p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationswithpredicatetype","title":"fn spec.rules.verifyImages.attestations.withPredicateType","text":"<pre><code>withPredicateType(predicateType)\n</code></pre> <p>\"PredicateType defines the type of Predicate contained within the Statement.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestors","title":"obj spec.rules.verifyImages.attestations.attestors","text":"<p>\"Attestors specify the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorswithcount","title":"fn spec.rules.verifyImages.attestations.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorswithentries","title":"fn spec.rules.verifyImages.attestations.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorswithentriesmixin","title":"fn spec.rules.verifyImages.attestations.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentries","title":"obj spec.rules.verifyImages.attestations.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieswithannotations","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieswithannotationsmixin","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieswithattestor","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested AttestorSet used to specify a more complex set of match authorities\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieswithrepository","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentriescertificates","title":"obj spec.rules.verifyImages.attestations.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentriescertificateswithcert","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Certificate is an optional PEM encoded public certificate.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentriescertificateswithcertchain","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertificateChain is an optional PEM encoded set of certificates used to verify\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentriescertificatesrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeyless","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithissuer","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithroots","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithsubject","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeylessrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked and a root certificate chain is expected instead. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeys","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithkms","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithpublickeys","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeysrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeyssecret","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyssecretwithname","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsconditions","title":"obj spec.rules.verifyImages.attestations.conditions","text":"<p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionswithall","title":"fn spec.rules.verifyImages.attestations.conditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionswithallmixin","title":"fn spec.rules.verifyImages.attestations.conditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionswithany","title":"fn spec.rules.verifyImages.attestations.conditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionswithanymixin","title":"fn spec.rules.verifyImages.attestations.conditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsconditionsall","title":"obj spec.rules.verifyImages.attestations.conditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsallwithkey","title":"fn spec.rules.verifyImages.attestations.conditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsallwithoperator","title":"fn spec.rules.verifyImages.attestations.conditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsallwithvalue","title":"fn spec.rules.verifyImages.attestations.conditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestationsconditionsany","title":"obj spec.rules.verifyImages.attestations.conditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsanywithkey","title":"fn spec.rules.verifyImages.attestations.conditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsanywithoperator","title":"fn spec.rules.verifyImages.attestations.conditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsanywithvalue","title":"fn spec.rules.verifyImages.attestations.conditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestors","title":"obj spec.rules.verifyImages.attestors","text":"<p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorswithcount","title":"fn spec.rules.verifyImages.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorswithentries","title":"fn spec.rules.verifyImages.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorswithentriesmixin","title":"fn spec.rules.verifyImages.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestorsentries","title":"obj spec.rules.verifyImages.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieswithannotations","title":"fn spec.rules.verifyImages.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieswithannotationsmixin","title":"fn spec.rules.verifyImages.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieswithattestor","title":"fn spec.rules.verifyImages.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested AttestorSet used to specify a more complex set of match authorities\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieswithrepository","title":"fn spec.rules.verifyImages.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestorsentriescertificates","title":"obj spec.rules.verifyImages.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentriescertificateswithcert","title":"fn spec.rules.verifyImages.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Certificate is an optional PEM encoded public certificate.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentriescertificateswithcertchain","title":"fn spec.rules.verifyImages.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertificateChain is an optional PEM encoded set of certificates used to verify\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestorsentriescertificatesrekor","title":"obj spec.rules.verifyImages.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeyless","title":"obj spec.rules.verifyImages.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylesswithissuer","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylesswithroots","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylesswithsubject","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeylessrekor","title":"obj spec.rules.verifyImages.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked and a root certificate chain is expected instead. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeys","title":"obj spec.rules.verifyImages.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeyswithkms","title":"fn spec.rules.verifyImages.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeyswithpublickeys","title":"fn spec.rules.verifyImages.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.verifyImages.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeysrekor","title":"obj spec.rules.verifyImages.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeysrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeyssecret","title":"obj spec.rules.verifyImages.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeyssecretwithname","title":"fn spec.rules.verifyImages.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.verifyImages.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#obj-specvalidationfailureactionoverrides","title":"obj spec.validationFailureActionOverrides","text":"<p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specvalidationfailureactionoverrideswithaction","title":"fn spec.validationFailureActionOverrides.withAction","text":"<pre><code>withAction(action)\n</code></pre> <p>\"ValidationFailureAction defines the policy validation failure action\"</p>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specvalidationfailureactionoverrideswithnamespaces","title":"fn spec.validationFailureActionOverrides.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"1.9/kyverno/v1/clusterPolicy/#fn-specvalidationfailureactionoverrideswithnamespacesmixin","title":"fn spec.validationFailureActionOverrides.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/generateRequest/","title":"kyverno.v1.generateRequest","text":"<p>\"GenerateRequest is a request to process generate rule.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withPolicy(policy)</code></li> <li><code>obj spec.context</code><ul> <li><code>obj spec.context.admissionRequestInfo</code><ul> <li><code>fn withAdmissionRequest(admissionRequest)</code></li> <li><code>fn withOperation(operation)</code></li> </ul> </li> <li><code>obj spec.context.userInfo</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>obj spec.context.userInfo.userInfo</code><ul> <li><code>fn withExtra(extra)</code></li> <li><code>fn withExtraMixin(extra)</code></li> <li><code>fn withGroups(groups)</code></li> <li><code>fn withGroupsMixin(groups)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>fn withUsername(username)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.resource</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.9/kyverno/v1/generateRequest/#fields","title":"Fields","text":""},{"location":"1.9/kyverno/v1/generateRequest/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of GenerateRequest</p>"},{"location":"1.9/kyverno/v1/generateRequest/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#obj-spec","title":"obj spec","text":"<p>\"Spec is the information to identify the generate request.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-specwithpolicy","title":"fn spec.withPolicy","text":"<pre><code>withPolicy(policy)\n</code></pre> <p>\"Specifies the name of the policy.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#obj-speccontext","title":"obj spec.context","text":"<p>\"Context ...\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#obj-speccontextadmissionrequestinfo","title":"obj spec.context.admissionRequestInfo","text":"<p>\"AdmissionRequestInfoObject stores the admission request and operation details\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-speccontextadmissionrequestinfowithadmissionrequest","title":"fn spec.context.admissionRequestInfo.withAdmissionRequest","text":"<pre><code>withAdmissionRequest(admissionRequest)\n</code></pre>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-speccontextadmissionrequestinfowithoperation","title":"fn spec.context.admissionRequestInfo.withOperation","text":"<pre><code>withOperation(operation)\n</code></pre> <p>\"Operation is the type of resource operation being checked for admission control\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#obj-speccontextuserinfo","title":"obj spec.context.userInfo","text":"<p>\"RequestInfo contains permission info carried in an admission request.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-speccontextuserinfowithclusterroles","title":"fn spec.context.userInfo.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is a list of possible clusterRoles send the request.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-speccontextuserinfowithclusterrolesmixin","title":"fn spec.context.userInfo.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is a list of possible clusterRoles send the request.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-speccontextuserinfowithroles","title":"fn spec.context.userInfo.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is a list of possible role send the request.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-speccontextuserinfowithrolesmixin","title":"fn spec.context.userInfo.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is a list of possible role send the request.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/generateRequest/#obj-speccontextuserinfouserinfo","title":"obj spec.context.userInfo.userInfo","text":"<p>\"UserInfo is the userInfo carried in the admission request.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-speccontextuserinfouserinfowithextra","title":"fn spec.context.userInfo.userInfo.withExtra","text":"<pre><code>withExtra(extra)\n</code></pre> <p>\"Any additional information provided by the authenticator.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-speccontextuserinfouserinfowithextramixin","title":"fn spec.context.userInfo.userInfo.withExtraMixin","text":"<pre><code>withExtraMixin(extra)\n</code></pre> <p>\"Any additional information provided by the authenticator.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-speccontextuserinfouserinfowithgroups","title":"fn spec.context.userInfo.userInfo.withGroups","text":"<pre><code>withGroups(groups)\n</code></pre> <p>\"The names of groups this user is a part of.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-speccontextuserinfouserinfowithgroupsmixin","title":"fn spec.context.userInfo.userInfo.withGroupsMixin","text":"<pre><code>withGroupsMixin(groups)\n</code></pre> <p>\"The names of groups this user is a part of.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-speccontextuserinfouserinfowithuid","title":"fn spec.context.userInfo.userInfo.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-speccontextuserinfouserinfowithusername","title":"fn spec.context.userInfo.userInfo.withUsername","text":"<pre><code>withUsername(username)\n</code></pre> <p>\"The name that uniquely identifies this user among all active users.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#obj-specresource","title":"obj spec.resource","text":"<p>\"ResourceSpec is the information to identify the generate request.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-specresourcewithapiversion","title":"fn spec.resource.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-specresourcewithkind","title":"fn spec.resource.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-specresourcewithname","title":"fn spec.resource.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.9/kyverno/v1/generateRequest/#fn-specresourcewithnamespace","title":"fn spec.resource.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.9/kyverno/v1/policy/","title":"kyverno.v1.policy","text":"<p>\"Policy declares validation, mutation, and generation behaviors for matching resources. See: https://kyverno.io/docs/writing-policies/ for more information.\"</p>"},{"location":"1.9/kyverno/v1/policy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withApplyRules(applyRules)</code></li> <li><code>fn withBackground(background)</code></li> <li><code>fn withFailurePolicy(failurePolicy)</code></li> <li><code>fn withGenerateExistingOnPolicyUpdate(generateExistingOnPolicyUpdate)</code></li> <li><code>fn withMutateExistingOnPolicyUpdate(mutateExistingOnPolicyUpdate)</code></li> <li><code>fn withRules(rules)</code></li> <li><code>fn withRulesMixin(rules)</code></li> <li><code>fn withSchemaValidation(schemaValidation)</code></li> <li><code>fn withValidationFailureAction(validationFailureAction)</code></li> <li><code>fn withValidationFailureActionOverrides(validationFailureActionOverrides)</code></li> <li><code>fn withValidationFailureActionOverridesMixin(validationFailureActionOverrides)</code></li> <li><code>fn withWebhookTimeoutSeconds(webhookTimeoutSeconds)</code></li> <li><code>obj spec.rules</code><ul> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withImageExtractors(imageExtractors)</code></li> <li><code>fn withImageExtractorsMixin(imageExtractors)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPreconditions(preconditions)</code></li> <li><code>fn withVerifyImages(verifyImages)</code></li> <li><code>fn withVerifyImagesMixin(verifyImages)</code></li> <li><code>obj spec.rules.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.context.apiCall</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> </ul> </li> <li><code>obj spec.rules.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> </ul> </li> <li><code>obj spec.rules.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.exclude.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.exclude.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.exclude.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.generate</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withData(data)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withSynchronize(synchronize)</code></li> <li><code>obj spec.rules.generate.clone</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.generate.cloneList</code><ul> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.rules.generate.cloneList.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.generate.cloneList.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.match.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.match.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.match.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate</code><ul> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withForeachMixin(foreach)</code></li> <li><code>fn withPatchStrategicMerge(patchStrategicMerge)</code></li> <li><code>fn withPatchesJson6902(patchesJson6902)</code></li> <li><code>fn withTargets(targets)</code></li> <li><code>fn withTargetsMixin(targets)</code></li> <li><code>obj spec.rules.mutate.foreach</code><ul> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withList(list)</code></li> <li><code>fn withPatchStrategicMerge(patchStrategicMerge)</code></li> <li><code>fn withPatchesJson6902(patchesJson6902)</code></li> <li><code>obj spec.rules.mutate.foreach.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.mutate.foreach.context.apiCall</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.mutate.foreach.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.targets</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate</code><ul> <li><code>fn withAnyPattern(anyPattern)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withForeachMixin(foreach)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPattern(pattern)</code></li> <li><code>obj spec.rules.validate.deny</code><ul> <li><code>fn withConditions(conditions)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach</code><ul> <li><code>fn withAnyPattern(anyPattern)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withElementScope(elementScope)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withList(list)</code></li> <li><code>fn withPattern(pattern)</code></li> <li><code>obj spec.rules.validate.foreach.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.validate.foreach.context.apiCall</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach.deny</code><ul> <li><code>fn withConditions(conditions)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.validate.foreach.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests</code><ul> <li><code>fn withAnnotationDomain(annotationDomain)</code></li> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withIgnoreFields(ignoreFields)</code></li> <li><code>fn withIgnoreFieldsMixin(ignoreFields)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.validate.manifests.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.certificates.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keyless.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.dryRun</code><ul> <li><code>fn withEnable(enable)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.ignoreFields</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>fn withObjects(objects)</code></li> <li><code>fn withObjectsMixin(objects)</code></li> <li><code>obj spec.rules.validate.manifests.ignoreFields.objects</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withVersion(version)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.podSecurity</code><ul> <li><code>fn withExclude(exclude)</code></li> <li><code>fn withExcludeMixin(exclude)</code></li> <li><code>fn withLevel(level)</code></li> <li><code>fn withVersion(version)</code></li> <li><code>obj spec.rules.validate.podSecurity.exclude</code><ul> <li><code>fn withControlName(controlName)</code></li> <li><code>fn withImages(images)</code></li> <li><code>fn withImagesMixin(images)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestations(attestations)</code></li> <li><code>fn withAttestationsMixin(attestations)</code></li> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withImage(image)</code></li> <li><code>fn withImageReferences(imageReferences)</code></li> <li><code>fn withImageReferencesMixin(imageReferences)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withMutateDigest(mutateDigest)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>fn withRequired(required)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>fn withVerifyDigest(verifyDigest)</code></li> <li><code>obj spec.rules.verifyImages.attestations</code><ul> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withConditions(conditions)</code></li> <li><code>fn withConditionsMixin(conditions)</code></li> <li><code>fn withPredicateType(predicateType)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.conditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.verifyImages.attestations.conditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.conditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.certificates.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.keyless.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.validationFailureActionOverrides</code><ul> <li><code>fn withAction(action)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.9/kyverno/v1/policy/#fields","title":"Fields","text":""},{"location":"1.9/kyverno/v1/policy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of Policy</p>"},{"location":"1.9/kyverno/v1/policy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-spec","title":"obj spec","text":"<p>\"Spec defines policy behaviors and contains one or more rules.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specwithapplyrules","title":"fn spec.withApplyRules","text":"<pre><code>withApplyRules(applyRules)\n</code></pre> <p>\"ApplyRules controls how rules in a policy are applied. Rule are processed in the order of declaration. When set to <code>One</code> processing stops after a rule has been applied i.e. the rule matches and results in a pass, fail, or error. When set to <code>All</code> all rules in the policy are processed. The default is <code>All</code>.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specwithbackground","title":"fn spec.withBackground","text":"<pre><code>withBackground(background)\n</code></pre> <p>\"Background controls if rules are applied to existing resources during a background scan. Optional. Default value is \\\"true\\\". The value must be set to \\\"false\\\" if the policy rule uses variables that are only available in the admission review request (e.g. user name).\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specwithfailurepolicy","title":"fn spec.withFailurePolicy","text":"<pre><code>withFailurePolicy(failurePolicy)\n</code></pre> <p>\"FailurePolicy defines how unexpected policy errors and webhook response timeout errors are handled. Rules within the same policy share the same failure behavior. This field should not be accessed directly, instead <code>GetFailurePolicy()</code> should be used. Allowed values are Ignore or Fail. Defaults to Fail.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specwithgenerateexistingonpolicyupdate","title":"fn spec.withGenerateExistingOnPolicyUpdate","text":"<pre><code>withGenerateExistingOnPolicyUpdate(generateExistingOnPolicyUpdate)\n</code></pre> <p>\"GenerateExistingOnPolicyUpdate controls whether to trigger generate rule in existing resources If is set to \\\"true\\\" generate rule will be triggered and applied to existing matched resources. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specwithmutateexistingonpolicyupdate","title":"fn spec.withMutateExistingOnPolicyUpdate","text":"<pre><code>withMutateExistingOnPolicyUpdate(mutateExistingOnPolicyUpdate)\n</code></pre> <p>\"MutateExistingOnPolicyUpdate controls if a mutateExisting policy is applied on policy events. Default value is \\\"false\\\".\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specwithrules","title":"fn spec.withRules","text":"<pre><code>withRules(rules)\n</code></pre> <p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specwithrulesmixin","title":"fn spec.withRulesMixin","text":"<pre><code>withRulesMixin(rules)\n</code></pre> <p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specwithschemavalidation","title":"fn spec.withSchemaValidation","text":"<pre><code>withSchemaValidation(schemaValidation)\n</code></pre> <p>\"SchemaValidation skips validation checks for policies as well as patched resources. Optional. The default value is set to \\\"true\\\", it must be set to \\\"false\\\" to disable the validation checks.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specwithvalidationfailureaction","title":"fn spec.withValidationFailureAction","text":"<pre><code>withValidationFailureAction(validationFailureAction)\n</code></pre> <p>\"ValidationFailureAction defines if a validation policy rule violation should block the admission review request (enforce), or allow (audit) the admission review request and report an error in a policy report. Optional. Allowed values are audit or enforce. The default value is \\\"Audit\\\".\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specwithvalidationfailureactionoverrides","title":"fn spec.withValidationFailureActionOverrides","text":"<pre><code>withValidationFailureActionOverrides(validationFailureActionOverrides)\n</code></pre> <p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specwithvalidationfailureactionoverridesmixin","title":"fn spec.withValidationFailureActionOverridesMixin","text":"<pre><code>withValidationFailureActionOverridesMixin(validationFailureActionOverrides)\n</code></pre> <p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specwithwebhooktimeoutseconds","title":"fn spec.withWebhookTimeoutSeconds","text":"<pre><code>withWebhookTimeoutSeconds(webhookTimeoutSeconds)\n</code></pre> <p>\"WebhookTimeoutSeconds specifies the maximum time in seconds allowed to apply this policy. After the configured time expires, the admission request may fail, or may simply ignore the policy results, based on the failure policy. The default timeout is 10s, the value must be between 1 and 30 seconds.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrules","title":"obj spec.rules","text":"<p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specruleswithcontext","title":"fn spec.rules.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specruleswithcontextmixin","title":"fn spec.rules.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specruleswithimageextractors","title":"fn spec.rules.withImageExtractors","text":"<pre><code>withImageExtractors(imageExtractors)\n</code></pre> <p>\"ImageExtractors defines a mapping from kinds to ImageExtractorConfigs. This config is only valid for verifyImages rules.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specruleswithimageextractorsmixin","title":"fn spec.rules.withImageExtractorsMixin","text":"<pre><code>withImageExtractorsMixin(imageExtractors)\n</code></pre> <p>\"ImageExtractors defines a mapping from kinds to ImageExtractorConfigs. This config is only valid for verifyImages rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specruleswithname","title":"fn spec.rules.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a label to identify the rule, It must be unique within the policy.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specruleswithpreconditions","title":"fn spec.rules.withPreconditions","text":"<pre><code>withPreconditions(preconditions)\n</code></pre> <p>\"Preconditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. A direct list of conditions (without <code>any</code> or <code>all</code> statements is supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specruleswithverifyimages","title":"fn spec.rules.withVerifyImages","text":"<pre><code>withVerifyImages(verifyImages)\n</code></pre> <p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specruleswithverifyimagesmixin","title":"fn spec.rules.withVerifyImagesMixin","text":"<pre><code>withVerifyImagesMixin(verifyImages)\n</code></pre> <p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulescontext","title":"obj spec.rules.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulescontextwithname","title":"fn spec.rules.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulescontextapicall","title":"obj spec.rules.context.apiCall","text":"<p>\"APICall defines an HTTP request to the Kubernetes API server. The JSON data retrieved is stored in the context.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulescontextapicallwithjmespath","title":"fn spec.rules.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the API server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response to the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulescontextapicallwithurlpath","title":"fn spec.rules.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulescontextconfigmap","title":"obj spec.rules.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulescontextconfigmapwithname","title":"fn spec.rules.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulescontextconfigmapwithnamespace","title":"fn spec.rules.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulescontextimageregistry","title":"obj spec.rules.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulescontextimageregistrywithjmespath","title":"fn spec.rules.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulescontextimageregistrywithreference","title":"fn spec.rules.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulescontextvariable","title":"obj spec.rules.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulescontextvariablewithdefault","title":"fn spec.rules.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulescontextvariablewithjmespath","title":"fn spec.rules.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulescontextvariablewithvalue","title":"fn spec.rules.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexclude","title":"obj spec.rules.exclude","text":"<p>\"ExcludeResources defines when this policy rule should not be applied. The exclude criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the name or role.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludewithall","title":"fn spec.rules.exclude.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludewithallmixin","title":"fn spec.rules.exclude.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludewithany","title":"fn spec.rules.exclude.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludewithanymixin","title":"fn spec.rules.exclude.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludewithclusterroles","title":"fn spec.rules.exclude.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludewithclusterrolesmixin","title":"fn spec.rules.exclude.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludewithroles","title":"fn spec.rules.exclude.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludewithrolesmixin","title":"fn spec.rules.exclude.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludewithsubjects","title":"fn spec.rules.exclude.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludewithsubjectsmixin","title":"fn spec.rules.exclude.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexcludeall","title":"obj spec.rules.exclude.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallwithclusterroles","title":"fn spec.rules.exclude.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallwithclusterrolesmixin","title":"fn spec.rules.exclude.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallwithroles","title":"fn spec.rules.exclude.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallwithrolesmixin","title":"fn spec.rules.exclude.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallwithsubjects","title":"fn spec.rules.exclude.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallwithsubjectsmixin","title":"fn spec.rules.exclude.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexcludeallresources","title":"obj spec.rules.exclude.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithannotations","title":"fn spec.rules.exclude.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithannotationsmixin","title":"fn spec.rules.exclude.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithkinds","title":"fn spec.rules.exclude.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithkindsmixin","title":"fn spec.rules.exclude.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithname","title":"fn spec.rules.exclude.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithnames","title":"fn spec.rules.exclude.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithnamesmixin","title":"fn spec.rules.exclude.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithnamespaces","title":"fn spec.rules.exclude.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourceswithnamespacesmixin","title":"fn spec.rules.exclude.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexcludeallresourcesnamespaceselector","title":"obj spec.rules.exclude.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexcludeallresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexcludeallresourcesselector","title":"obj spec.rules.exclude.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexcludeallresourcesselectormatchexpressions","title":"obj spec.rules.exclude.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexcludeallsubjects","title":"obj spec.rules.exclude.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallsubjectswithapigroup","title":"fn spec.rules.exclude.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallsubjectswithkind","title":"fn spec.rules.exclude.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallsubjectswithname","title":"fn spec.rules.exclude.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeallsubjectswithnamespace","title":"fn spec.rules.exclude.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexcludeany","title":"obj spec.rules.exclude.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanywithclusterroles","title":"fn spec.rules.exclude.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanywithclusterrolesmixin","title":"fn spec.rules.exclude.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanywithroles","title":"fn spec.rules.exclude.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanywithrolesmixin","title":"fn spec.rules.exclude.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanywithsubjects","title":"fn spec.rules.exclude.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanywithsubjectsmixin","title":"fn spec.rules.exclude.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexcludeanyresources","title":"obj spec.rules.exclude.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithannotations","title":"fn spec.rules.exclude.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithannotationsmixin","title":"fn spec.rules.exclude.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithkinds","title":"fn spec.rules.exclude.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithkindsmixin","title":"fn spec.rules.exclude.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithname","title":"fn spec.rules.exclude.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithnames","title":"fn spec.rules.exclude.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithnamesmixin","title":"fn spec.rules.exclude.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithnamespaces","title":"fn spec.rules.exclude.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourceswithnamespacesmixin","title":"fn spec.rules.exclude.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexcludeanyresourcesnamespaceselector","title":"obj spec.rules.exclude.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexcludeanyresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexcludeanyresourcesselector","title":"obj spec.rules.exclude.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexcludeanyresourcesselectormatchexpressions","title":"obj spec.rules.exclude.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexcludeanysubjects","title":"obj spec.rules.exclude.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanysubjectswithapigroup","title":"fn spec.rules.exclude.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanysubjectswithkind","title":"fn spec.rules.exclude.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanysubjectswithname","title":"fn spec.rules.exclude.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludeanysubjectswithnamespace","title":"fn spec.rules.exclude.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexcluderesources","title":"obj spec.rules.exclude.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified. Requires at least one tag to be specified when under MatchResources. Specifying ResourceDescription directly under match is being deprecated. Please specify under \\\"any\\\" or \\\"all\\\" instead.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourceswithannotations","title":"fn spec.rules.exclude.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourceswithannotationsmixin","title":"fn spec.rules.exclude.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourceswithkinds","title":"fn spec.rules.exclude.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourceswithkindsmixin","title":"fn spec.rules.exclude.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourceswithname","title":"fn spec.rules.exclude.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourceswithnames","title":"fn spec.rules.exclude.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourceswithnamesmixin","title":"fn spec.rules.exclude.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourceswithnamespaces","title":"fn spec.rules.exclude.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourceswithnamespacesmixin","title":"fn spec.rules.exclude.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexcluderesourcesnamespaceselector","title":"obj spec.rules.exclude.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexcluderesourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexcluderesourcesselector","title":"obj spec.rules.exclude.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexcluderesourcesselectormatchexpressions","title":"obj spec.rules.exclude.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcluderesourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesexcludesubjects","title":"obj spec.rules.exclude.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludesubjectswithapigroup","title":"fn spec.rules.exclude.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludesubjectswithkind","title":"fn spec.rules.exclude.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludesubjectswithname","title":"fn spec.rules.exclude.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesexcludesubjectswithnamespace","title":"fn spec.rules.exclude.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesgenerate","title":"obj spec.rules.generate","text":"<p>\"Generation is used to create new resources.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesgeneratewithapiversion","title":"fn spec.rules.generate.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesgeneratewithdata","title":"fn spec.rules.generate.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data provides the resource declaration used to populate each generated resource. At most one of Data or Clone must be specified. If neither are provided, the generated resource will be created with default data only.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesgeneratewithkind","title":"fn spec.rules.generate.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesgeneratewithname","title":"fn spec.rules.generate.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesgeneratewithnamespace","title":"fn spec.rules.generate.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesgeneratewithsynchronize","title":"fn spec.rules.generate.withSynchronize","text":"<pre><code>withSynchronize(synchronize)\n</code></pre> <p>\"Synchronize controls if generated resources should be kept in-sync with their source resource. If Synchronize is set to \\\"true\\\" changes to generated resources will be overwritten with resource data from Data or the resource specified in the Clone declaration. Optional. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesgenerateclone","title":"obj spec.rules.generate.clone","text":"<p>\"Clone specifies the source resource used to populate each generated resource. At most one of Data or Clone can be specified. If neither are provided, the generated resource will be created with default data only.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesgenerateclonewithname","title":"fn spec.rules.generate.clone.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies name of the resource.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesgenerateclonewithnamespace","title":"fn spec.rules.generate.clone.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies source resource namespace.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesgenerateclonelist","title":"obj spec.rules.generate.cloneList","text":"<p>\"CloneList specifies the list of source resource used to populate each generated resource.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesgenerateclonelistwithkinds","title":"fn spec.rules.generate.cloneList.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesgenerateclonelistwithkindsmixin","title":"fn spec.rules.generate.cloneList.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesgenerateclonelistwithnamespace","title":"fn spec.rules.generate.cloneList.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies source resource namespace.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesgenerateclonelistselector","title":"obj spec.rules.generate.cloneList.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code>. wildcard characters are not supported.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesgenerateclonelistselectorwithmatchexpressions","title":"fn spec.rules.generate.cloneList.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesgenerateclonelistselectorwithmatchexpressionsmixin","title":"fn spec.rules.generate.cloneList.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesgenerateclonelistselectorwithmatchlabels","title":"fn spec.rules.generate.cloneList.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesgenerateclonelistselectorwithmatchlabelsmixin","title":"fn spec.rules.generate.cloneList.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesgenerateclonelistselectormatchexpressions","title":"obj spec.rules.generate.cloneList.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesgenerateclonelistselectormatchexpressionswithkey","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesgenerateclonelistselectormatchexpressionswithoperator","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesgenerateclonelistselectormatchexpressionswithvalues","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesgenerateclonelistselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatch","title":"obj spec.rules.match","text":"<p>\"MatchResources defines when this policy rule should be applied. The match criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the user name or role. At least one kind is required.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchwithall","title":"fn spec.rules.match.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchwithallmixin","title":"fn spec.rules.match.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchwithany","title":"fn spec.rules.match.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchwithanymixin","title":"fn spec.rules.match.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchwithclusterroles","title":"fn spec.rules.match.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchwithclusterrolesmixin","title":"fn spec.rules.match.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchwithroles","title":"fn spec.rules.match.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchwithrolesmixin","title":"fn spec.rules.match.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchwithsubjects","title":"fn spec.rules.match.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchwithsubjectsmixin","title":"fn spec.rules.match.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatchall","title":"obj spec.rules.match.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallwithclusterroles","title":"fn spec.rules.match.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallwithclusterrolesmixin","title":"fn spec.rules.match.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallwithroles","title":"fn spec.rules.match.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallwithrolesmixin","title":"fn spec.rules.match.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallwithsubjects","title":"fn spec.rules.match.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallwithsubjectsmixin","title":"fn spec.rules.match.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatchallresources","title":"obj spec.rules.match.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourceswithannotations","title":"fn spec.rules.match.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourceswithannotationsmixin","title":"fn spec.rules.match.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourceswithkinds","title":"fn spec.rules.match.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourceswithkindsmixin","title":"fn spec.rules.match.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourceswithname","title":"fn spec.rules.match.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourceswithnames","title":"fn spec.rules.match.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourceswithnamesmixin","title":"fn spec.rules.match.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourceswithnamespaces","title":"fn spec.rules.match.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourceswithnamespacesmixin","title":"fn spec.rules.match.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatchallresourcesnamespaceselector","title":"obj spec.rules.match.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatchallresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatchallresourcesselector","title":"obj spec.rules.match.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectorwithmatchlabels","title":"fn spec.rules.match.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatchallresourcesselectormatchexpressions","title":"obj spec.rules.match.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatchallsubjects","title":"obj spec.rules.match.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallsubjectswithapigroup","title":"fn spec.rules.match.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallsubjectswithkind","title":"fn spec.rules.match.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallsubjectswithname","title":"fn spec.rules.match.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchallsubjectswithnamespace","title":"fn spec.rules.match.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatchany","title":"obj spec.rules.match.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanywithclusterroles","title":"fn spec.rules.match.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanywithclusterrolesmixin","title":"fn spec.rules.match.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanywithroles","title":"fn spec.rules.match.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanywithrolesmixin","title":"fn spec.rules.match.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanywithsubjects","title":"fn spec.rules.match.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanywithsubjectsmixin","title":"fn spec.rules.match.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatchanyresources","title":"obj spec.rules.match.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithannotations","title":"fn spec.rules.match.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithannotationsmixin","title":"fn spec.rules.match.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithkinds","title":"fn spec.rules.match.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithkindsmixin","title":"fn spec.rules.match.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithname","title":"fn spec.rules.match.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithnames","title":"fn spec.rules.match.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithnamesmixin","title":"fn spec.rules.match.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithnamespaces","title":"fn spec.rules.match.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourceswithnamespacesmixin","title":"fn spec.rules.match.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatchanyresourcesnamespaceselector","title":"obj spec.rules.match.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatchanyresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatchanyresourcesselector","title":"obj spec.rules.match.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectorwithmatchlabels","title":"fn spec.rules.match.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatchanyresourcesselectormatchexpressions","title":"obj spec.rules.match.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatchanysubjects","title":"obj spec.rules.match.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanysubjectswithapigroup","title":"fn spec.rules.match.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanysubjectswithkind","title":"fn spec.rules.match.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanysubjectswithname","title":"fn spec.rules.match.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchanysubjectswithnamespace","title":"fn spec.rules.match.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatchresources","title":"obj spec.rules.match.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified. Requires at least one tag to be specified when under MatchResources. Specifying ResourceDescription directly under match is being deprecated. Please specify under \\\"any\\\" or \\\"all\\\" instead.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourceswithannotations","title":"fn spec.rules.match.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourceswithannotationsmixin","title":"fn spec.rules.match.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourceswithkinds","title":"fn spec.rules.match.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourceswithkindsmixin","title":"fn spec.rules.match.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourceswithname","title":"fn spec.rules.match.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourceswithnames","title":"fn spec.rules.match.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourceswithnamesmixin","title":"fn spec.rules.match.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourceswithnamespaces","title":"fn spec.rules.match.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourceswithnamespacesmixin","title":"fn spec.rules.match.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatchresourcesnamespaceselector","title":"obj spec.rules.match.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatchresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatchresourcesselector","title":"obj spec.rules.match.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourcesselectorwithmatchlabels","title":"fn spec.rules.match.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatchresourcesselectormatchexpressions","title":"obj spec.rules.match.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmatchsubjects","title":"obj spec.rules.match.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchsubjectswithapigroup","title":"fn spec.rules.match.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchsubjectswithkind","title":"fn spec.rules.match.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchsubjectswithname","title":"fn spec.rules.match.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmatchsubjectswithnamespace","title":"fn spec.rules.match.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmutate","title":"obj spec.rules.mutate","text":"<p>\"Mutation is used to modify matching resources.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutatewithforeach","title":"fn spec.rules.mutate.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutatewithforeachmixin","title":"fn spec.rules.mutate.withForeachMixin","text":"<pre><code>withForeachMixin(foreach)\n</code></pre> <p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutatewithpatchstrategicmerge","title":"fn spec.rules.mutate.withPatchStrategicMerge","text":"<pre><code>withPatchStrategicMerge(patchStrategicMerge)\n</code></pre> <p>\"PatchStrategicMerge is a strategic merge patch used to modify resources. See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutatewithpatchesjson6902","title":"fn spec.rules.mutate.withPatchesJson6902","text":"<pre><code>withPatchesJson6902(patchesJson6902)\n</code></pre> <p>\"PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources. See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutatewithtargets","title":"fn spec.rules.mutate.withTargets","text":"<pre><code>withTargets(targets)\n</code></pre> <p>\"Targets defines the target resources to be mutated.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutatewithtargetsmixin","title":"fn spec.rules.mutate.withTargetsMixin","text":"<pre><code>withTargetsMixin(targets)\n</code></pre> <p>\"Targets defines the target resources to be mutated.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmutateforeach","title":"obj spec.rules.mutate.foreach","text":"<p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachwithcontext","title":"fn spec.rules.mutate.foreach.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachwithcontextmixin","title":"fn spec.rules.mutate.foreach.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachwithforeach","title":"fn spec.rules.mutate.foreach.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"Foreach declares a nested foreach iterator\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachwithlist","title":"fn spec.rules.mutate.foreach.withList","text":"<pre><code>withList(list)\n</code></pre> <p>\"List specifies a JMESPath expression that results in one or more elements to which the validation logic is applied.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachwithpatchstrategicmerge","title":"fn spec.rules.mutate.foreach.withPatchStrategicMerge","text":"<pre><code>withPatchStrategicMerge(patchStrategicMerge)\n</code></pre> <p>\"PatchStrategicMerge is a strategic merge patch used to modify resources. See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachwithpatchesjson6902","title":"fn spec.rules.mutate.foreach.withPatchesJson6902","text":"<pre><code>withPatchesJson6902(patchesJson6902)\n</code></pre> <p>\"PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources. See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmutateforeachcontext","title":"obj spec.rules.mutate.foreach.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachcontextwithname","title":"fn spec.rules.mutate.foreach.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmutateforeachcontextapicall","title":"obj spec.rules.mutate.foreach.context.apiCall","text":"<p>\"APICall defines an HTTP request to the Kubernetes API server. The JSON data retrieved is stored in the context.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachcontextapicallwithjmespath","title":"fn spec.rules.mutate.foreach.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the API server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response to the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachcontextapicallwithurlpath","title":"fn spec.rules.mutate.foreach.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmutateforeachcontextconfigmap","title":"obj spec.rules.mutate.foreach.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachcontextconfigmapwithname","title":"fn spec.rules.mutate.foreach.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachcontextconfigmapwithnamespace","title":"fn spec.rules.mutate.foreach.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmutateforeachcontextimageregistry","title":"obj spec.rules.mutate.foreach.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachcontextimageregistrywithjmespath","title":"fn spec.rules.mutate.foreach.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachcontextimageregistrywithreference","title":"fn spec.rules.mutate.foreach.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmutateforeachcontextvariable","title":"obj spec.rules.mutate.foreach.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachcontextvariablewithdefault","title":"fn spec.rules.mutate.foreach.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachcontextvariablewithjmespath","title":"fn spec.rules.mutate.foreach.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachcontextvariablewithvalue","title":"fn spec.rules.mutate.foreach.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmutateforeachpreconditions","title":"obj spec.rules.mutate.foreach.preconditions","text":"<p>\"AnyAllConditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionswithall","title":"fn spec.rules.mutate.foreach.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionswithallmixin","title":"fn spec.rules.mutate.foreach.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionswithany","title":"fn spec.rules.mutate.foreach.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionswithanymixin","title":"fn spec.rules.mutate.foreach.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmutateforeachpreconditionsall","title":"obj spec.rules.mutate.foreach.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionsallwithkey","title":"fn spec.rules.mutate.foreach.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionsallwithoperator","title":"fn spec.rules.mutate.foreach.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionsallwithvalue","title":"fn spec.rules.mutate.foreach.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmutateforeachpreconditionsany","title":"obj spec.rules.mutate.foreach.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionsanywithkey","title":"fn spec.rules.mutate.foreach.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionsanywithoperator","title":"fn spec.rules.mutate.foreach.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutateforeachpreconditionsanywithvalue","title":"fn spec.rules.mutate.foreach.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesmutatetargets","title":"obj spec.rules.mutate.targets","text":"<p>\"Targets defines the target resources to be mutated.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutatetargetswithapiversion","title":"fn spec.rules.mutate.targets.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutatetargetswithkind","title":"fn spec.rules.mutate.targets.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutatetargetswithname","title":"fn spec.rules.mutate.targets.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesmutatetargetswithnamespace","title":"fn spec.rules.mutate.targets.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidate","title":"obj spec.rules.validate","text":"<p>\"Validation is used to validate matching resources.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatewithanypattern","title":"fn spec.rules.validate.withAnyPattern","text":"<pre><code>withAnyPattern(anyPattern)\n</code></pre> <p>\"AnyPattern specifies list of validation patterns. At least one of the patterns must be satisfied for the validation rule to succeed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatewithforeach","title":"fn spec.rules.validate.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatewithforeachmixin","title":"fn spec.rules.validate.withForeachMixin","text":"<pre><code>withForeachMixin(foreach)\n</code></pre> <p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatewithmessage","title":"fn spec.rules.validate.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message specifies a custom message to be displayed on failure.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatewithpattern","title":"fn spec.rules.validate.withPattern","text":"<pre><code>withPattern(pattern)\n</code></pre> <p>\"Pattern specifies an overlay-style pattern used to check resources.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidatedeny","title":"obj spec.rules.validate.deny","text":"<p>\"Deny defines conditions used to pass or fail a validation rule.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatedenywithconditions","title":"fn spec.rules.validate.deny.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Multiple conditions can be declared under an <code>any</code> or <code>all</code> statement. A direct list of conditions (without <code>any</code> or <code>all</code> statements) is also supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/validate/#deny-rules\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidateforeach","title":"obj spec.rules.validate.foreach","text":"<p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachwithanypattern","title":"fn spec.rules.validate.foreach.withAnyPattern","text":"<pre><code>withAnyPattern(anyPattern)\n</code></pre> <p>\"AnyPattern specifies list of validation patterns. At least one of the patterns must be satisfied for the validation rule to succeed.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachwithcontext","title":"fn spec.rules.validate.foreach.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachwithcontextmixin","title":"fn spec.rules.validate.foreach.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachwithelementscope","title":"fn spec.rules.validate.foreach.withElementScope","text":"<pre><code>withElementScope(elementScope)\n</code></pre> <p>\"ElementScope specifies whether to use the current list element as the scope for validation. Defaults to \\\"true\\\" if not specified. When set to \\\"false\\\", \\\"request.object\\\" is used as the validation scope within the foreach block to allow referencing other elements in the subtree.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachwithforeach","title":"fn spec.rules.validate.foreach.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"Foreach declares a nested foreach iterator\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachwithlist","title":"fn spec.rules.validate.foreach.withList","text":"<pre><code>withList(list)\n</code></pre> <p>\"List specifies a JMESPath expression that results in one or more elements to which the validation logic is applied.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachwithpattern","title":"fn spec.rules.validate.foreach.withPattern","text":"<pre><code>withPattern(pattern)\n</code></pre> <p>\"Pattern specifies an overlay-style pattern used to check resources.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidateforeachcontext","title":"obj spec.rules.validate.foreach.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextwithname","title":"fn spec.rules.validate.foreach.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidateforeachcontextapicall","title":"obj spec.rules.validate.foreach.context.apiCall","text":"<p>\"APICall defines an HTTP request to the Kubernetes API server. The JSON data retrieved is stored in the context.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextapicallwithjmespath","title":"fn spec.rules.validate.foreach.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the API server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response to the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextapicallwithurlpath","title":"fn spec.rules.validate.foreach.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidateforeachcontextconfigmap","title":"obj spec.rules.validate.foreach.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextconfigmapwithname","title":"fn spec.rules.validate.foreach.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextconfigmapwithnamespace","title":"fn spec.rules.validate.foreach.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidateforeachcontextimageregistry","title":"obj spec.rules.validate.foreach.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextimageregistrywithjmespath","title":"fn spec.rules.validate.foreach.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextimageregistrywithreference","title":"fn spec.rules.validate.foreach.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidateforeachcontextvariable","title":"obj spec.rules.validate.foreach.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextvariablewithdefault","title":"fn spec.rules.validate.foreach.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextvariablewithjmespath","title":"fn spec.rules.validate.foreach.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachcontextvariablewithvalue","title":"fn spec.rules.validate.foreach.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidateforeachdeny","title":"obj spec.rules.validate.foreach.deny","text":"<p>\"Deny defines conditions used to pass or fail a validation rule.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachdenywithconditions","title":"fn spec.rules.validate.foreach.deny.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Multiple conditions can be declared under an <code>any</code> or <code>all</code> statement. A direct list of conditions (without <code>any</code> or <code>all</code> statements) is also supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/validate/#deny-rules\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidateforeachpreconditions","title":"obj spec.rules.validate.foreach.preconditions","text":"<p>\"AnyAllConditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionswithall","title":"fn spec.rules.validate.foreach.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionswithallmixin","title":"fn spec.rules.validate.foreach.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionswithany","title":"fn spec.rules.validate.foreach.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionswithanymixin","title":"fn spec.rules.validate.foreach.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidateforeachpreconditionsall","title":"obj spec.rules.validate.foreach.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionsallwithkey","title":"fn spec.rules.validate.foreach.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionsallwithoperator","title":"fn spec.rules.validate.foreach.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionsallwithvalue","title":"fn spec.rules.validate.foreach.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidateforeachpreconditionsany","title":"obj spec.rules.validate.foreach.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionsanywithkey","title":"fn spec.rules.validate.foreach.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionsanywithoperator","title":"fn spec.rules.validate.foreach.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidateforeachpreconditionsanywithvalue","title":"fn spec.rules.validate.foreach.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidatemanifests","title":"obj spec.rules.validate.manifests","text":"<p>\"Manifest specifies conditions for manifest verification\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestswithannotationdomain","title":"fn spec.rules.validate.manifests.withAnnotationDomain","text":"<pre><code>withAnnotationDomain(annotationDomain)\n</code></pre> <p>\"AnnotationDomain is custom domain of annotation for message and signature. Default is \\\"cosign.sigstore.dev\\\".\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestswithattestors","title":"fn spec.rules.validate.manifests.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestswithattestorsmixin","title":"fn spec.rules.validate.manifests.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestswithignorefields","title":"fn spec.rules.validate.manifests.withIgnoreFields","text":"<pre><code>withIgnoreFields(ignoreFields)\n</code></pre> <p>\"Fields which will be ignored while comparing manifests.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestswithignorefieldsmixin","title":"fn spec.rules.validate.manifests.withIgnoreFieldsMixin","text":"<pre><code>withIgnoreFieldsMixin(ignoreFields)\n</code></pre> <p>\"Fields which will be ignored while comparing manifests.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestswithrepository","title":"fn spec.rules.validate.manifests.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for resource bundle reference. The repository can be overridden per Attestor or Attestation.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestors","title":"obj spec.rules.validate.manifests.attestors","text":"<p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorswithcount","title":"fn spec.rules.validate.manifests.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorswithentries","title":"fn spec.rules.validate.manifests.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorswithentriesmixin","title":"fn spec.rules.validate.manifests.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestorsentries","title":"obj spec.rules.validate.manifests.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieswithannotations","title":"fn spec.rules.validate.manifests.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieswithannotationsmixin","title":"fn spec.rules.validate.manifests.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieswithattestor","title":"fn spec.rules.validate.manifests.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested AttestorSet used to specify a more complex set of match authorities\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieswithrepository","title":"fn spec.rules.validate.manifests.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestorsentriescertificates","title":"obj spec.rules.validate.manifests.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentriescertificateswithcert","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Certificate is an optional PEM encoded public certificate.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentriescertificateswithcertchain","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertificateChain is an optional PEM encoded set of certificates used to verify\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestorsentriescertificatesrekor","title":"obj spec.rules.validate.manifests.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeyless","title":"obj spec.rules.validate.manifests.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithissuer","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithroots","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithsubject","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeylessrekor","title":"obj spec.rules.validate.manifests.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked and a root certificate chain is expected instead. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeys","title":"obj spec.rules.validate.manifests.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithkms","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithpublickeys","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeysrekor","title":"obj spec.rules.validate.manifests.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeysrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeyssecret","title":"obj spec.rules.validate.manifests.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeyssecretwithname","title":"fn spec.rules.validate.manifests.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.validate.manifests.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidatemanifestsdryrun","title":"obj spec.rules.validate.manifests.dryRun","text":"<p>\"DryRun configuration\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsdryrunwithenable","title":"fn spec.rules.validate.manifests.dryRun.withEnable","text":"<pre><code>withEnable(enable)\n</code></pre>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsdryrunwithnamespace","title":"fn spec.rules.validate.manifests.dryRun.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidatemanifestsignorefields","title":"obj spec.rules.validate.manifests.ignoreFields","text":"<p>\"Fields which will be ignored while comparing manifests.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsignorefieldswithfields","title":"fn spec.rules.validate.manifests.ignoreFields.withFields","text":"<pre><code>withFields(fields)\n</code></pre>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsignorefieldswithfieldsmixin","title":"fn spec.rules.validate.manifests.ignoreFields.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsignorefieldswithobjects","title":"fn spec.rules.validate.manifests.ignoreFields.withObjects","text":"<pre><code>withObjects(objects)\n</code></pre>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsignorefieldswithobjectsmixin","title":"fn spec.rules.validate.manifests.ignoreFields.withObjectsMixin","text":"<pre><code>withObjectsMixin(objects)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidatemanifestsignorefieldsobjects","title":"obj spec.rules.validate.manifests.ignoreFields.objects","text":""},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithgroup","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withGroup","text":"<pre><code>withGroup(group)\n</code></pre>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithkind","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithname","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithnamespace","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithversion","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withVersion","text":"<pre><code>withVersion(version)\n</code></pre>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidatepodsecurity","title":"obj spec.rules.validate.podSecurity","text":"<p>\"PodSecurity applies exemptions for Kubernetes Pod Security admission by specifying exclusions for Pod Security Standards controls.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatepodsecuritywithexclude","title":"fn spec.rules.validate.podSecurity.withExclude","text":"<pre><code>withExclude(exclude)\n</code></pre> <p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatepodsecuritywithexcludemixin","title":"fn spec.rules.validate.podSecurity.withExcludeMixin","text":"<pre><code>withExcludeMixin(exclude)\n</code></pre> <p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatepodsecuritywithlevel","title":"fn spec.rules.validate.podSecurity.withLevel","text":"<pre><code>withLevel(level)\n</code></pre> <p>\"Level defines the Pod Security Standard level to be applied to workloads. Allowed values are privileged, baseline, and restricted.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatepodsecuritywithversion","title":"fn spec.rules.validate.podSecurity.withVersion","text":"<pre><code>withVersion(version)\n</code></pre> <p>\"Version defines the Pod Security Standard versions that Kubernetes supports. Allowed values are v1.19, v1.20, v1.21, v1.22, v1.23, v1.24, v1.25, latest. Defaults to latest.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesvalidatepodsecurityexclude","title":"obj spec.rules.validate.podSecurity.exclude","text":"<p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatepodsecurityexcludewithcontrolname","title":"fn spec.rules.validate.podSecurity.exclude.withControlName","text":"<pre><code>withControlName(controlName)\n</code></pre> <p>\"ControlName specifies the name of the Pod Security Standard control. See: https://kubernetes.io/docs/concepts/security/pod-security-standards/\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatepodsecurityexcludewithimages","title":"fn spec.rules.validate.podSecurity.exclude.withImages","text":"<pre><code>withImages(images)\n</code></pre> <p>\"Images selects matching containers and applies the container level PSS. Each image is the image name consisting of the registry address, repository, image, and tag. Empty list matches no containers, PSS checks are applied at the pod level only. Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesvalidatepodsecurityexcludewithimagesmixin","title":"fn spec.rules.validate.podSecurity.exclude.withImagesMixin","text":"<pre><code>withImagesMixin(images)\n</code></pre> <p>\"Images selects matching containers and applies the container level PSS. Each image is the image name consisting of the registry address, repository, image, and tag. Empty list matches no containers, PSS checks are applied at the pod level only. Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimages","title":"obj spec.rules.verifyImages","text":"<p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimageswithadditionalextensions","title":"fn spec.rules.verifyImages.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing. Deprecated.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimageswithadditionalextensionsmixin","title":"fn spec.rules.verifyImages.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing. Deprecated.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimageswithannotations","title":"fn spec.rules.verifyImages.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs. Deprecated. Use annotations per Attestor instead.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimageswithannotationsmixin","title":"fn spec.rules.verifyImages.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs. Deprecated. Use annotations per Attestor instead.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimageswithattestations","title":"fn spec.rules.verifyImages.withAttestations","text":"<pre><code>withAttestations(attestations)\n</code></pre> <p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimageswithattestationsmixin","title":"fn spec.rules.verifyImages.withAttestationsMixin","text":"<pre><code>withAttestationsMixin(attestations)\n</code></pre> <p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimageswithattestors","title":"fn spec.rules.verifyImages.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimageswithattestorsmixin","title":"fn spec.rules.verifyImages.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimageswithimage","title":"fn spec.rules.verifyImages.withImage","text":"<pre><code>withImage(image)\n</code></pre> <p>\"Image is the image name consisting of the registry address, repository, image, and tag. Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images. Deprecated. Use ImageReferences instead.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimageswithimagereferences","title":"fn spec.rules.verifyImages.withImageReferences","text":"<pre><code>withImageReferences(imageReferences)\n</code></pre> <p>\"ImageReferences is a list of matching image reference patterns. At least one pattern in the list must match the image for the rule to apply. Each image reference consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest). Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimageswithimagereferencesmixin","title":"fn spec.rules.verifyImages.withImageReferencesMixin","text":"<pre><code>withImageReferencesMixin(imageReferences)\n</code></pre> <p>\"ImageReferences is a list of matching image reference patterns. At least one pattern in the list must match the image for the rule to apply. Each image reference consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest). Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimageswithissuer","title":"fn spec.rules.verifyImages.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing. Deprecated. Use KeylessAttestor instead.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimageswithkey","title":"fn spec.rules.verifyImages.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the PEM encoded public key that the image or attestation is signed with. Deprecated. Use StaticKeyAttestor instead.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimageswithmutatedigest","title":"fn spec.rules.verifyImages.withMutateDigest","text":"<pre><code>withMutateDigest(mutateDigest)\n</code></pre> <p>\"MutateDigest enables replacement of image tags with digests. Defaults to true.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimageswithrepository","title":"fn spec.rules.verifyImages.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule. If specified Repository will override the default OCI image repository configured for the installation. The repository can also be overridden per Attestor or Attestation.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimageswithrequired","title":"fn spec.rules.verifyImages.withRequired","text":"<pre><code>withRequired(required)\n</code></pre> <p>\"Required validates that images are verified i.e. have matched passed a signature or attestation check.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimageswithroots","title":"fn spec.rules.verifyImages.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is the PEM encoded Root certificate chain used for keyless signing Deprecated. Use KeylessAttestor instead.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimageswithsubject","title":"fn spec.rules.verifyImages.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the identity used for keyless signing, for example an email address Deprecated. Use KeylessAttestor instead.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimageswithverifydigest","title":"fn spec.rules.verifyImages.withVerifyDigest","text":"<pre><code>withVerifyDigest(verifyDigest)\n</code></pre> <p>\"VerifyDigest validates that images have a digest.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestations","title":"obj spec.rules.verifyImages.attestations","text":"<p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationswithattestors","title":"fn spec.rules.verifyImages.attestations.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specify the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationswithattestorsmixin","title":"fn spec.rules.verifyImages.attestations.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specify the required attestors (i.e. authorities)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationswithconditions","title":"fn spec.rules.verifyImages.attestations.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationswithconditionsmixin","title":"fn spec.rules.verifyImages.attestations.withConditionsMixin","text":"<pre><code>withConditionsMixin(conditions)\n</code></pre> <p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationswithpredicatetype","title":"fn spec.rules.verifyImages.attestations.withPredicateType","text":"<pre><code>withPredicateType(predicateType)\n</code></pre> <p>\"PredicateType defines the type of Predicate contained within the Statement.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestors","title":"obj spec.rules.verifyImages.attestations.attestors","text":"<p>\"Attestors specify the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorswithcount","title":"fn spec.rules.verifyImages.attestations.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorswithentries","title":"fn spec.rules.verifyImages.attestations.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorswithentriesmixin","title":"fn spec.rules.verifyImages.attestations.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestorsentries","title":"obj spec.rules.verifyImages.attestations.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieswithannotations","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieswithannotationsmixin","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieswithattestor","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested AttestorSet used to specify a more complex set of match authorities\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieswithrepository","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestorsentriescertificates","title":"obj spec.rules.verifyImages.attestations.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentriescertificateswithcert","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Certificate is an optional PEM encoded public certificate.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentriescertificateswithcertchain","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertificateChain is an optional PEM encoded set of certificates used to verify\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestorsentriescertificatesrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeyless","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithissuer","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithroots","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithsubject","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeylessrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked and a root certificate chain is expected instead. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeys","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithkms","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithpublickeys","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeysrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeyssecret","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyssecretwithname","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsconditions","title":"obj spec.rules.verifyImages.attestations.conditions","text":"<p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionswithall","title":"fn spec.rules.verifyImages.attestations.conditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionswithallmixin","title":"fn spec.rules.verifyImages.attestations.conditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionswithany","title":"fn spec.rules.verifyImages.attestations.conditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionswithanymixin","title":"fn spec.rules.verifyImages.attestations.conditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsconditionsall","title":"obj spec.rules.verifyImages.attestations.conditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionsallwithkey","title":"fn spec.rules.verifyImages.attestations.conditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionsallwithoperator","title":"fn spec.rules.verifyImages.attestations.conditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionsallwithvalue","title":"fn spec.rules.verifyImages.attestations.conditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestationsconditionsany","title":"obj spec.rules.verifyImages.attestations.conditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionsanywithkey","title":"fn spec.rules.verifyImages.attestations.conditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionsanywithoperator","title":"fn spec.rules.verifyImages.attestations.conditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestationsconditionsanywithvalue","title":"fn spec.rules.verifyImages.attestations.conditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestors","title":"obj spec.rules.verifyImages.attestors","text":"<p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorswithcount","title":"fn spec.rules.verifyImages.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorswithentries","title":"fn spec.rules.verifyImages.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorswithentriesmixin","title":"fn spec.rules.verifyImages.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestorsentries","title":"obj spec.rules.verifyImages.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieswithannotations","title":"fn spec.rules.verifyImages.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieswithannotationsmixin","title":"fn spec.rules.verifyImages.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieswithattestor","title":"fn spec.rules.verifyImages.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested AttestorSet used to specify a more complex set of match authorities\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieswithrepository","title":"fn spec.rules.verifyImages.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestorsentriescertificates","title":"obj spec.rules.verifyImages.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentriescertificateswithcert","title":"fn spec.rules.verifyImages.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Certificate is an optional PEM encoded public certificate.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentriescertificateswithcertchain","title":"fn spec.rules.verifyImages.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertificateChain is an optional PEM encoded set of certificates used to verify\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestorsentriescertificatesrekor","title":"obj spec.rules.verifyImages.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestorsentrieskeyless","title":"obj spec.rules.verifyImages.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeylesswithissuer","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeylesswithroots","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeylesswithsubject","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestorsentrieskeylessrekor","title":"obj spec.rules.verifyImages.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked and a root certificate chain is expected instead. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestorsentrieskeys","title":"obj spec.rules.verifyImages.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeyswithkms","title":"fn spec.rules.verifyImages.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeyswithpublickeys","title":"fn spec.rules.verifyImages.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.verifyImages.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestorsentrieskeysrekor","title":"obj spec.rules.verifyImages.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeysrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specrulesverifyimagesattestorsentrieskeyssecret","title":"obj spec.rules.verifyImages.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeyssecretwithname","title":"fn spec.rules.verifyImages.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specrulesverifyimagesattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.verifyImages.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.9/kyverno/v1/policy/#obj-specvalidationfailureactionoverrides","title":"obj spec.validationFailureActionOverrides","text":"<p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specvalidationfailureactionoverrideswithaction","title":"fn spec.validationFailureActionOverrides.withAction","text":"<pre><code>withAction(action)\n</code></pre> <p>\"ValidationFailureAction defines the policy validation failure action\"</p>"},{"location":"1.9/kyverno/v1/policy/#fn-specvalidationfailureactionoverrideswithnamespaces","title":"fn spec.validationFailureActionOverrides.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"1.9/kyverno/v1/policy/#fn-specvalidationfailureactionoverrideswithnamespacesmixin","title":"fn spec.validationFailureActionOverrides.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/","title":"kyverno.v1alpha2","text":"<ul> <li>admissionReport</li> <li>backgroundScanReport</li> <li>clusterAdmissionReport</li> <li>clusterBackgroundScanReport</li> </ul>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/","title":"kyverno.v1alpha2.admissionReport","text":"<p>\"AdmissionReport is the Schema for the AdmissionReports API\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withResults(results)</code></li> <li><code>fn withResultsMixin(results)</code></li> <li><code>obj spec.owner</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withBlockOwnerDeletion(blockOwnerDeletion)</code></li> <li><code>fn withController(controller)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec.results</code><ul> <li><code>fn withCategory(category)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPolicy(policy)</code></li> <li><code>fn withProperties(properties)</code></li> <li><code>fn withPropertiesMixin(properties)</code></li> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> <li><code>fn withResult(result)</code></li> <li><code>fn withRule(rule)</code></li> <li><code>fn withScored(scored)</code></li> <li><code>fn withSeverity(severity)</code></li> <li><code>fn withSource(source)</code></li> <li><code>obj spec.results.resourceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.results.resourceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.results.resources</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec.results.timestamp</code><ul> <li><code>fn withNanos(nanos)</code></li> <li><code>fn withSeconds(seconds)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.summary</code><ul> <li><code>fn withError(err)</code></li> <li><code>fn withFail(fail)</code></li> <li><code>fn withPass(pass)</code></li> <li><code>fn withSkip(skip)</code></li> <li><code>fn withWarn(warn)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fields","title":"Fields","text":""},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of AdmissionReport</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#obj-spec","title":"obj spec","text":""},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specwithresults","title":"fn spec.withResults","text":"<pre><code>withResults(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specwithresultsmixin","title":"fn spec.withResultsMixin","text":"<pre><code>withResultsMixin(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#obj-specowner","title":"obj spec.owner","text":"<p>\"Owner is a reference to the report owner (e.g. a Deployment, Namespace, or Node)\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specownerwithapiversion","title":"fn spec.owner.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specownerwithblockownerdeletion","title":"fn spec.owner.withBlockOwnerDeletion","text":"<pre><code>withBlockOwnerDeletion(blockOwnerDeletion)\n</code></pre> <p>\"If true, AND if the owner has the \\\"foregroundDeletion\\\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \\\"delete\\\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specownerwithcontroller","title":"fn spec.owner.withController","text":"<pre><code>withController(controller)\n</code></pre> <p>\"If true, this reference points to the managing controller.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specownerwithkind","title":"fn spec.owner.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specownerwithname","title":"fn spec.owner.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specownerwithuid","title":"fn spec.owner.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#obj-specresults","title":"obj spec.results","text":"<p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultswithcategory","title":"fn spec.results.withCategory","text":"<pre><code>withCategory(category)\n</code></pre> <p>\"Category indicates policy category\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultswithmessage","title":"fn spec.results.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Description is a short user friendly message for the policy rule\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultswithpolicy","title":"fn spec.results.withPolicy","text":"<pre><code>withPolicy(policy)\n</code></pre> <p>\"Policy is the name or identifier of the policy\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultswithproperties","title":"fn spec.results.withProperties","text":"<pre><code>withProperties(properties)\n</code></pre> <p>\"Properties provides additional information for the policy rule\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultswithpropertiesmixin","title":"fn spec.results.withPropertiesMixin","text":"<pre><code>withPropertiesMixin(properties)\n</code></pre> <p>\"Properties provides additional information for the policy rule\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultswithresources","title":"fn spec.results.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultswithresourcesmixin","title":"fn spec.results.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultswithresult","title":"fn spec.results.withResult","text":"<pre><code>withResult(result)\n</code></pre> <p>\"Result indicates the outcome of the policy rule execution\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultswithrule","title":"fn spec.results.withRule","text":"<pre><code>withRule(rule)\n</code></pre> <p>\"Rule is the name or identifier of the rule within the policy\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultswithscored","title":"fn spec.results.withScored","text":"<pre><code>withScored(scored)\n</code></pre> <p>\"Scored indicates if this result is scored\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultswithseverity","title":"fn spec.results.withSeverity","text":"<pre><code>withSeverity(severity)\n</code></pre> <p>\"Severity indicates policy check result criticality\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultswithsource","title":"fn spec.results.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source is an identifier for the policy engine that manages this report\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#obj-specresultsresourceselector","title":"obj spec.results.resourceSelector","text":"<p>\"SubjectSelector is an optional label selector for checked Kubernetes resources. For example, a policy result may apply to all pods that match a label. Either a Subject or a SubjectSelector can be specified. If neither are provided, the result is assumed to be for the policy report scope.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceselectorwithmatchexpressions","title":"fn spec.results.resourceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceselectorwithmatchexpressionsmixin","title":"fn spec.results.resourceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceselectorwithmatchlabels","title":"fn spec.results.resourceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceselectorwithmatchlabelsmixin","title":"fn spec.results.resourceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#obj-specresultsresourceselectormatchexpressions","title":"obj spec.results.resourceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceselectormatchexpressionswithkey","title":"fn spec.results.resourceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceselectormatchexpressionswithoperator","title":"fn spec.results.resourceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceselectormatchexpressionswithvalues","title":"fn spec.results.resourceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceselectormatchexpressionswithvaluesmixin","title":"fn spec.results.resourceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#obj-specresultsresources","title":"obj spec.results.resources","text":"<p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceswithapiversion","title":"fn spec.results.resources.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceswithfieldpath","title":"fn spec.results.resources.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre> <p>\"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceswithkind","title":"fn spec.results.resources.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceswithname","title":"fn spec.results.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceswithnamespace","title":"fn spec.results.resources.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceswithresourceversion","title":"fn spec.results.resources.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultsresourceswithuid","title":"fn spec.results.resources.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#obj-specresultstimestamp","title":"obj spec.results.timestamp","text":"<p>\"Timestamp indicates the time the result was found\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultstimestampwithnanos","title":"fn spec.results.timestamp.withNanos","text":"<pre><code>withNanos(nanos)\n</code></pre> <p>\"Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specresultstimestampwithseconds","title":"fn spec.results.timestamp.withSeconds","text":"<pre><code>withSeconds(seconds)\n</code></pre> <p>\"Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#obj-specsummary","title":"obj spec.summary","text":"<p>\"PolicyReportSummary provides a summary of results\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specsummarywitherror","title":"fn spec.summary.withError","text":"<pre><code>withError(err)\n</code></pre> <p>\"Error provides the count of policies that could not be evaluated\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specsummarywithfail","title":"fn spec.summary.withFail","text":"<pre><code>withFail(fail)\n</code></pre> <p>\"Fail provides the count of policies whose requirements were not met\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specsummarywithpass","title":"fn spec.summary.withPass","text":"<pre><code>withPass(pass)\n</code></pre> <p>\"Pass provides the count of policies whose requirements were met\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specsummarywithskip","title":"fn spec.summary.withSkip","text":"<pre><code>withSkip(skip)\n</code></pre> <p>\"Skip indicates the count of policies that were not selected for evaluation\"</p>"},{"location":"1.9/kyverno/v1alpha2/admissionReport/#fn-specsummarywithwarn","title":"fn spec.summary.withWarn","text":"<pre><code>withWarn(warn)\n</code></pre> <p>\"Warn provides the count of non-scored policies whose requirements were not met\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/","title":"kyverno.v1alpha2.backgroundScanReport","text":"<p>\"BackgroundScanReport is the Schema for the BackgroundScanReports API\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withResults(results)</code></li> <li><code>fn withResultsMixin(results)</code></li> <li><code>obj spec.results</code><ul> <li><code>fn withCategory(category)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPolicy(policy)</code></li> <li><code>fn withProperties(properties)</code></li> <li><code>fn withPropertiesMixin(properties)</code></li> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> <li><code>fn withResult(result)</code></li> <li><code>fn withRule(rule)</code></li> <li><code>fn withScored(scored)</code></li> <li><code>fn withSeverity(severity)</code></li> <li><code>fn withSource(source)</code></li> <li><code>obj spec.results.resourceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.results.resourceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.results.resources</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec.results.timestamp</code><ul> <li><code>fn withNanos(nanos)</code></li> <li><code>fn withSeconds(seconds)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.summary</code><ul> <li><code>fn withError(err)</code></li> <li><code>fn withFail(fail)</code></li> <li><code>fn withPass(pass)</code></li> <li><code>fn withSkip(skip)</code></li> <li><code>fn withWarn(warn)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fields","title":"Fields","text":""},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of BackgroundScanReport</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#obj-spec","title":"obj spec","text":""},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specwithresults","title":"fn spec.withResults","text":"<pre><code>withResults(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specwithresultsmixin","title":"fn spec.withResultsMixin","text":"<pre><code>withResultsMixin(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#obj-specresults","title":"obj spec.results","text":"<p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithcategory","title":"fn spec.results.withCategory","text":"<pre><code>withCategory(category)\n</code></pre> <p>\"Category indicates policy category\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithmessage","title":"fn spec.results.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Description is a short user friendly message for the policy rule\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithpolicy","title":"fn spec.results.withPolicy","text":"<pre><code>withPolicy(policy)\n</code></pre> <p>\"Policy is the name or identifier of the policy\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithproperties","title":"fn spec.results.withProperties","text":"<pre><code>withProperties(properties)\n</code></pre> <p>\"Properties provides additional information for the policy rule\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithpropertiesmixin","title":"fn spec.results.withPropertiesMixin","text":"<pre><code>withPropertiesMixin(properties)\n</code></pre> <p>\"Properties provides additional information for the policy rule\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithresources","title":"fn spec.results.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithresourcesmixin","title":"fn spec.results.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithresult","title":"fn spec.results.withResult","text":"<pre><code>withResult(result)\n</code></pre> <p>\"Result indicates the outcome of the policy rule execution\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithrule","title":"fn spec.results.withRule","text":"<pre><code>withRule(rule)\n</code></pre> <p>\"Rule is the name or identifier of the rule within the policy\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithscored","title":"fn spec.results.withScored","text":"<pre><code>withScored(scored)\n</code></pre> <p>\"Scored indicates if this result is scored\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithseverity","title":"fn spec.results.withSeverity","text":"<pre><code>withSeverity(severity)\n</code></pre> <p>\"Severity indicates policy check result criticality\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultswithsource","title":"fn spec.results.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source is an identifier for the policy engine that manages this report\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#obj-specresultsresourceselector","title":"obj spec.results.resourceSelector","text":"<p>\"SubjectSelector is an optional label selector for checked Kubernetes resources. For example, a policy result may apply to all pods that match a label. Either a Subject or a SubjectSelector can be specified. If neither are provided, the result is assumed to be for the policy report scope.\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceselectorwithmatchexpressions","title":"fn spec.results.resourceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceselectorwithmatchexpressionsmixin","title":"fn spec.results.resourceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceselectorwithmatchlabels","title":"fn spec.results.resourceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceselectorwithmatchlabelsmixin","title":"fn spec.results.resourceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#obj-specresultsresourceselectormatchexpressions","title":"obj spec.results.resourceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceselectormatchexpressionswithkey","title":"fn spec.results.resourceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceselectormatchexpressionswithoperator","title":"fn spec.results.resourceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceselectormatchexpressionswithvalues","title":"fn spec.results.resourceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceselectormatchexpressionswithvaluesmixin","title":"fn spec.results.resourceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#obj-specresultsresources","title":"obj spec.results.resources","text":"<p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceswithapiversion","title":"fn spec.results.resources.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent.\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceswithfieldpath","title":"fn spec.results.resources.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre> <p>\"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceswithkind","title":"fn spec.results.resources.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceswithname","title":"fn spec.results.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceswithnamespace","title":"fn spec.results.resources.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceswithresourceversion","title":"fn spec.results.resources.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultsresourceswithuid","title":"fn spec.results.resources.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#obj-specresultstimestamp","title":"obj spec.results.timestamp","text":"<p>\"Timestamp indicates the time the result was found\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultstimestampwithnanos","title":"fn spec.results.timestamp.withNanos","text":"<pre><code>withNanos(nanos)\n</code></pre> <p>\"Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specresultstimestampwithseconds","title":"fn spec.results.timestamp.withSeconds","text":"<pre><code>withSeconds(seconds)\n</code></pre> <p>\"Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#obj-specsummary","title":"obj spec.summary","text":"<p>\"PolicyReportSummary provides a summary of results\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specsummarywitherror","title":"fn spec.summary.withError","text":"<pre><code>withError(err)\n</code></pre> <p>\"Error provides the count of policies that could not be evaluated\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specsummarywithfail","title":"fn spec.summary.withFail","text":"<pre><code>withFail(fail)\n</code></pre> <p>\"Fail provides the count of policies whose requirements were not met\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specsummarywithpass","title":"fn spec.summary.withPass","text":"<pre><code>withPass(pass)\n</code></pre> <p>\"Pass provides the count of policies whose requirements were met\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specsummarywithskip","title":"fn spec.summary.withSkip","text":"<pre><code>withSkip(skip)\n</code></pre> <p>\"Skip indicates the count of policies that were not selected for evaluation\"</p>"},{"location":"1.9/kyverno/v1alpha2/backgroundScanReport/#fn-specsummarywithwarn","title":"fn spec.summary.withWarn","text":"<pre><code>withWarn(warn)\n</code></pre> <p>\"Warn provides the count of non-scored policies whose requirements were not met\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/","title":"kyverno.v1alpha2.clusterAdmissionReport","text":"<p>\"ClusterAdmissionReport is the Schema for the ClusterAdmissionReports API\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withResults(results)</code></li> <li><code>fn withResultsMixin(results)</code></li> <li><code>obj spec.owner</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withBlockOwnerDeletion(blockOwnerDeletion)</code></li> <li><code>fn withController(controller)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec.results</code><ul> <li><code>fn withCategory(category)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPolicy(policy)</code></li> <li><code>fn withProperties(properties)</code></li> <li><code>fn withPropertiesMixin(properties)</code></li> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> <li><code>fn withResult(result)</code></li> <li><code>fn withRule(rule)</code></li> <li><code>fn withScored(scored)</code></li> <li><code>fn withSeverity(severity)</code></li> <li><code>fn withSource(source)</code></li> <li><code>obj spec.results.resourceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.results.resourceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.results.resources</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec.results.timestamp</code><ul> <li><code>fn withNanos(nanos)</code></li> <li><code>fn withSeconds(seconds)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.summary</code><ul> <li><code>fn withError(err)</code></li> <li><code>fn withFail(fail)</code></li> <li><code>fn withPass(pass)</code></li> <li><code>fn withSkip(skip)</code></li> <li><code>fn withWarn(warn)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fields","title":"Fields","text":""},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ClusterAdmissionReport</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#obj-spec","title":"obj spec","text":""},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specwithresults","title":"fn spec.withResults","text":"<pre><code>withResults(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specwithresultsmixin","title":"fn spec.withResultsMixin","text":"<pre><code>withResultsMixin(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#obj-specowner","title":"obj spec.owner","text":"<p>\"Owner is a reference to the report owner (e.g. a Deployment, Namespace, or Node)\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specownerwithapiversion","title":"fn spec.owner.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specownerwithblockownerdeletion","title":"fn spec.owner.withBlockOwnerDeletion","text":"<pre><code>withBlockOwnerDeletion(blockOwnerDeletion)\n</code></pre> <p>\"If true, AND if the owner has the \\\"foregroundDeletion\\\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \\\"delete\\\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specownerwithcontroller","title":"fn spec.owner.withController","text":"<pre><code>withController(controller)\n</code></pre> <p>\"If true, this reference points to the managing controller.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specownerwithkind","title":"fn spec.owner.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specownerwithname","title":"fn spec.owner.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specownerwithuid","title":"fn spec.owner.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#obj-specresults","title":"obj spec.results","text":"<p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithcategory","title":"fn spec.results.withCategory","text":"<pre><code>withCategory(category)\n</code></pre> <p>\"Category indicates policy category\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithmessage","title":"fn spec.results.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Description is a short user friendly message for the policy rule\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithpolicy","title":"fn spec.results.withPolicy","text":"<pre><code>withPolicy(policy)\n</code></pre> <p>\"Policy is the name or identifier of the policy\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithproperties","title":"fn spec.results.withProperties","text":"<pre><code>withProperties(properties)\n</code></pre> <p>\"Properties provides additional information for the policy rule\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithpropertiesmixin","title":"fn spec.results.withPropertiesMixin","text":"<pre><code>withPropertiesMixin(properties)\n</code></pre> <p>\"Properties provides additional information for the policy rule\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithresources","title":"fn spec.results.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithresourcesmixin","title":"fn spec.results.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithresult","title":"fn spec.results.withResult","text":"<pre><code>withResult(result)\n</code></pre> <p>\"Result indicates the outcome of the policy rule execution\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithrule","title":"fn spec.results.withRule","text":"<pre><code>withRule(rule)\n</code></pre> <p>\"Rule is the name or identifier of the rule within the policy\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithscored","title":"fn spec.results.withScored","text":"<pre><code>withScored(scored)\n</code></pre> <p>\"Scored indicates if this result is scored\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithseverity","title":"fn spec.results.withSeverity","text":"<pre><code>withSeverity(severity)\n</code></pre> <p>\"Severity indicates policy check result criticality\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultswithsource","title":"fn spec.results.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source is an identifier for the policy engine that manages this report\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#obj-specresultsresourceselector","title":"obj spec.results.resourceSelector","text":"<p>\"SubjectSelector is an optional label selector for checked Kubernetes resources. For example, a policy result may apply to all pods that match a label. Either a Subject or a SubjectSelector can be specified. If neither are provided, the result is assumed to be for the policy report scope.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceselectorwithmatchexpressions","title":"fn spec.results.resourceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceselectorwithmatchexpressionsmixin","title":"fn spec.results.resourceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceselectorwithmatchlabels","title":"fn spec.results.resourceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceselectorwithmatchlabelsmixin","title":"fn spec.results.resourceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#obj-specresultsresourceselectormatchexpressions","title":"obj spec.results.resourceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceselectormatchexpressionswithkey","title":"fn spec.results.resourceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceselectormatchexpressionswithoperator","title":"fn spec.results.resourceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceselectormatchexpressionswithvalues","title":"fn spec.results.resourceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceselectormatchexpressionswithvaluesmixin","title":"fn spec.results.resourceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#obj-specresultsresources","title":"obj spec.results.resources","text":"<p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceswithapiversion","title":"fn spec.results.resources.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceswithfieldpath","title":"fn spec.results.resources.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre> <p>\"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceswithkind","title":"fn spec.results.resources.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceswithname","title":"fn spec.results.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceswithnamespace","title":"fn spec.results.resources.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceswithresourceversion","title":"fn spec.results.resources.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultsresourceswithuid","title":"fn spec.results.resources.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#obj-specresultstimestamp","title":"obj spec.results.timestamp","text":"<p>\"Timestamp indicates the time the result was found\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultstimestampwithnanos","title":"fn spec.results.timestamp.withNanos","text":"<pre><code>withNanos(nanos)\n</code></pre> <p>\"Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specresultstimestampwithseconds","title":"fn spec.results.timestamp.withSeconds","text":"<pre><code>withSeconds(seconds)\n</code></pre> <p>\"Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#obj-specsummary","title":"obj spec.summary","text":"<p>\"PolicyReportSummary provides a summary of results\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specsummarywitherror","title":"fn spec.summary.withError","text":"<pre><code>withError(err)\n</code></pre> <p>\"Error provides the count of policies that could not be evaluated\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specsummarywithfail","title":"fn spec.summary.withFail","text":"<pre><code>withFail(fail)\n</code></pre> <p>\"Fail provides the count of policies whose requirements were not met\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specsummarywithpass","title":"fn spec.summary.withPass","text":"<pre><code>withPass(pass)\n</code></pre> <p>\"Pass provides the count of policies whose requirements were met\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specsummarywithskip","title":"fn spec.summary.withSkip","text":"<pre><code>withSkip(skip)\n</code></pre> <p>\"Skip indicates the count of policies that were not selected for evaluation\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterAdmissionReport/#fn-specsummarywithwarn","title":"fn spec.summary.withWarn","text":"<pre><code>withWarn(warn)\n</code></pre> <p>\"Warn provides the count of non-scored policies whose requirements were not met\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/","title":"kyverno.v1alpha2.clusterBackgroundScanReport","text":"<p>\"ClusterBackgroundScanReport is the Schema for the ClusterBackgroundScanReports API\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withResults(results)</code></li> <li><code>fn withResultsMixin(results)</code></li> <li><code>obj spec.results</code><ul> <li><code>fn withCategory(category)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPolicy(policy)</code></li> <li><code>fn withProperties(properties)</code></li> <li><code>fn withPropertiesMixin(properties)</code></li> <li><code>fn withResources(resources)</code></li> <li><code>fn withResourcesMixin(resources)</code></li> <li><code>fn withResult(result)</code></li> <li><code>fn withRule(rule)</code></li> <li><code>fn withScored(scored)</code></li> <li><code>fn withSeverity(severity)</code></li> <li><code>fn withSource(source)</code></li> <li><code>obj spec.results.resourceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.results.resourceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.results.resources</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec.results.timestamp</code><ul> <li><code>fn withNanos(nanos)</code></li> <li><code>fn withSeconds(seconds)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.summary</code><ul> <li><code>fn withError(err)</code></li> <li><code>fn withFail(fail)</code></li> <li><code>fn withPass(pass)</code></li> <li><code>fn withSkip(skip)</code></li> <li><code>fn withWarn(warn)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fields","title":"Fields","text":""},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ClusterBackgroundScanReport</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#obj-spec","title":"obj spec","text":""},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specwithresults","title":"fn spec.withResults","text":"<pre><code>withResults(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specwithresultsmixin","title":"fn spec.withResultsMixin","text":"<pre><code>withResultsMixin(results)\n</code></pre> <p>\"PolicyReportResult provides result details\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#obj-specresults","title":"obj spec.results","text":"<p>\"PolicyReportResult provides result details\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithcategory","title":"fn spec.results.withCategory","text":"<pre><code>withCategory(category)\n</code></pre> <p>\"Category indicates policy category\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithmessage","title":"fn spec.results.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Description is a short user friendly message for the policy rule\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithpolicy","title":"fn spec.results.withPolicy","text":"<pre><code>withPolicy(policy)\n</code></pre> <p>\"Policy is the name or identifier of the policy\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithproperties","title":"fn spec.results.withProperties","text":"<pre><code>withProperties(properties)\n</code></pre> <p>\"Properties provides additional information for the policy rule\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithpropertiesmixin","title":"fn spec.results.withPropertiesMixin","text":"<pre><code>withPropertiesMixin(properties)\n</code></pre> <p>\"Properties provides additional information for the policy rule\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithresources","title":"fn spec.results.withResources","text":"<pre><code>withResources(resources)\n</code></pre> <p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithresourcesmixin","title":"fn spec.results.withResourcesMixin","text":"<pre><code>withResourcesMixin(resources)\n</code></pre> <p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithresult","title":"fn spec.results.withResult","text":"<pre><code>withResult(result)\n</code></pre> <p>\"Result indicates the outcome of the policy rule execution\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithrule","title":"fn spec.results.withRule","text":"<pre><code>withRule(rule)\n</code></pre> <p>\"Rule is the name or identifier of the rule within the policy\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithscored","title":"fn spec.results.withScored","text":"<pre><code>withScored(scored)\n</code></pre> <p>\"Scored indicates if this result is scored\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithseverity","title":"fn spec.results.withSeverity","text":"<pre><code>withSeverity(severity)\n</code></pre> <p>\"Severity indicates policy check result criticality\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultswithsource","title":"fn spec.results.withSource","text":"<pre><code>withSource(source)\n</code></pre> <p>\"Source is an identifier for the policy engine that manages this report\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#obj-specresultsresourceselector","title":"obj spec.results.resourceSelector","text":"<p>\"SubjectSelector is an optional label selector for checked Kubernetes resources. For example, a policy result may apply to all pods that match a label. Either a Subject or a SubjectSelector can be specified. If neither are provided, the result is assumed to be for the policy report scope.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceselectorwithmatchexpressions","title":"fn spec.results.resourceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceselectorwithmatchexpressionsmixin","title":"fn spec.results.resourceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceselectorwithmatchlabels","title":"fn spec.results.resourceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceselectorwithmatchlabelsmixin","title":"fn spec.results.resourceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#obj-specresultsresourceselectormatchexpressions","title":"obj spec.results.resourceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceselectormatchexpressionswithkey","title":"fn spec.results.resourceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceselectormatchexpressionswithoperator","title":"fn spec.results.resourceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceselectormatchexpressionswithvalues","title":"fn spec.results.resourceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceselectormatchexpressionswithvaluesmixin","title":"fn spec.results.resourceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#obj-specresultsresources","title":"obj spec.results.resources","text":"<p>\"Subjects is an optional reference to the checked Kubernetes resources\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceswithapiversion","title":"fn spec.results.resources.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"API version of the referent.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceswithfieldpath","title":"fn spec.results.resources.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre> <p>\"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered the event) or if no container name is specified \\\"spec.containers[2]\\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceswithkind","title":"fn spec.results.resources.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceswithname","title":"fn spec.results.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceswithnamespace","title":"fn spec.results.resources.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceswithresourceversion","title":"fn spec.results.resources.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultsresourceswithuid","title":"fn spec.results.resources.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#obj-specresultstimestamp","title":"obj spec.results.timestamp","text":"<p>\"Timestamp indicates the time the result was found\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultstimestampwithnanos","title":"fn spec.results.timestamp.withNanos","text":"<pre><code>withNanos(nanos)\n</code></pre> <p>\"Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specresultstimestampwithseconds","title":"fn spec.results.timestamp.withSeconds","text":"<pre><code>withSeconds(seconds)\n</code></pre> <p>\"Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#obj-specsummary","title":"obj spec.summary","text":"<p>\"PolicyReportSummary provides a summary of results\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specsummarywitherror","title":"fn spec.summary.withError","text":"<pre><code>withError(err)\n</code></pre> <p>\"Error provides the count of policies that could not be evaluated\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specsummarywithfail","title":"fn spec.summary.withFail","text":"<pre><code>withFail(fail)\n</code></pre> <p>\"Fail provides the count of policies whose requirements were not met\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specsummarywithpass","title":"fn spec.summary.withPass","text":"<pre><code>withPass(pass)\n</code></pre> <p>\"Pass provides the count of policies whose requirements were met\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specsummarywithskip","title":"fn spec.summary.withSkip","text":"<pre><code>withSkip(skip)\n</code></pre> <p>\"Skip indicates the count of policies that were not selected for evaluation\"</p>"},{"location":"1.9/kyverno/v1alpha2/clusterBackgroundScanReport/#fn-specsummarywithwarn","title":"fn spec.summary.withWarn","text":"<pre><code>withWarn(warn)\n</code></pre> <p>\"Warn provides the count of non-scored policies whose requirements were not met\"</p>"},{"location":"1.9/kyverno/v1beta1/","title":"kyverno.v1beta1","text":"<ul> <li>updateRequest</li> </ul>"},{"location":"1.9/kyverno/v1beta1/updateRequest/","title":"kyverno.v1beta1.updateRequest","text":"<p>\"UpdateRequest is a request to process mutate and generate rules in background.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withPolicy(policy)</code></li> <li><code>fn withRequestType(requestType)</code></li> <li><code>obj spec.context</code><ul> <li><code>obj spec.context.admissionRequestInfo</code><ul> <li><code>fn withOperation(operation)</code></li> <li><code>obj spec.context.admissionRequestInfo.admissionRequest</code><ul> <li><code>fn withDryRun(dryRun)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withObject(object)</code></li> <li><code>fn withObjectMixin(object)</code></li> <li><code>fn withOldObject(oldObject)</code></li> <li><code>fn withOldObjectMixin(oldObject)</code></li> <li><code>fn withOperation(operation)</code></li> <li><code>fn withOptions(options)</code></li> <li><code>fn withOptionsMixin(options)</code></li> <li><code>fn withRequestSubResource(requestSubResource)</code></li> <li><code>fn withSubResource(subResource)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>obj spec.context.admissionRequestInfo.admissionRequest.kind</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withVersion(version)</code></li> </ul> </li> <li><code>obj spec.context.admissionRequestInfo.admissionRequest.requestKind</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withVersion(version)</code></li> </ul> </li> <li><code>obj spec.context.admissionRequestInfo.admissionRequest.requestResource</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withResource(resource)</code></li> <li><code>fn withVersion(version)</code></li> </ul> </li> <li><code>obj spec.context.admissionRequestInfo.admissionRequest.resource</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withResource(resource)</code></li> <li><code>fn withVersion(version)</code></li> </ul> </li> <li><code>obj spec.context.admissionRequestInfo.admissionRequest.userInfo</code><ul> <li><code>fn withExtra(extra)</code></li> <li><code>fn withExtraMixin(extra)</code></li> <li><code>fn withGroups(groups)</code></li> <li><code>fn withGroupsMixin(groups)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>fn withUsername(username)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.context.userInfo</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>obj spec.context.userInfo.userInfo</code><ul> <li><code>fn withExtra(extra)</code></li> <li><code>fn withExtraMixin(extra)</code></li> <li><code>fn withGroups(groups)</code></li> <li><code>fn withGroupsMixin(groups)</code></li> <li><code>fn withUid(uid)</code></li> <li><code>fn withUsername(username)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.resource</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fields","title":"Fields","text":""},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of UpdateRequest</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#obj-spec","title":"obj spec","text":"<p>\"Spec is the information to identify the update request.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-specwithpolicy","title":"fn spec.withPolicy","text":"<pre><code>withPolicy(policy)\n</code></pre> <p>\"Specifies the name of the policy.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-specwithrequesttype","title":"fn spec.withRequestType","text":"<pre><code>withRequestType(requestType)\n</code></pre> <p>\"Type represents request type for background processing\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#obj-speccontext","title":"obj spec.context","text":"<p>\"Context ...\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#obj-speccontextadmissionrequestinfo","title":"obj spec.context.admissionRequestInfo","text":"<p>\"AdmissionRequestInfoObject stores the admission request and operation details\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfowithoperation","title":"fn spec.context.admissionRequestInfo.withOperation","text":"<pre><code>withOperation(operation)\n</code></pre> <p>\"Operation is the type of resource operation being checked for admission control\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#obj-speccontextadmissionrequestinfoadmissionrequest","title":"obj spec.context.admissionRequestInfo.admissionRequest","text":"<p>\"AdmissionRequest describes the admission.Attributes for the admission request.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithdryrun","title":"fn spec.context.admissionRequestInfo.admissionRequest.withDryRun","text":"<pre><code>withDryRun(dryRun)\n</code></pre> <p>\"DryRun indicates that modifications will definitely not be persisted for this request. Defaults to false.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithname","title":"fn spec.context.admissionRequestInfo.admissionRequest.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the object as presented in the request.  On a CREATE operation, the client may omit name and rely on the server to generate the name.  If that is the case, this field will contain an empty string.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithnamespace","title":"fn spec.context.admissionRequestInfo.admissionRequest.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the namespace associated with the request (if any).\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithobject","title":"fn spec.context.admissionRequestInfo.admissionRequest.withObject","text":"<pre><code>withObject(object)\n</code></pre> <p>\"Object is the object from the incoming request.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithobjectmixin","title":"fn spec.context.admissionRequestInfo.admissionRequest.withObjectMixin","text":"<pre><code>withObjectMixin(object)\n</code></pre> <p>\"Object is the object from the incoming request.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwitholdobject","title":"fn spec.context.admissionRequestInfo.admissionRequest.withOldObject","text":"<pre><code>withOldObject(oldObject)\n</code></pre> <p>\"OldObject is the existing object. Only populated for DELETE and UPDATE requests.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwitholdobjectmixin","title":"fn spec.context.admissionRequestInfo.admissionRequest.withOldObjectMixin","text":"<pre><code>withOldObjectMixin(oldObject)\n</code></pre> <p>\"OldObject is the existing object. Only populated for DELETE and UPDATE requests.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithoperation","title":"fn spec.context.admissionRequestInfo.admissionRequest.withOperation","text":"<pre><code>withOperation(operation)\n</code></pre> <p>\"Operation is the operation being performed. This may be different than the operation requested. e.g. a patch can result in either a CREATE or UPDATE Operation.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithoptions","title":"fn spec.context.admissionRequestInfo.admissionRequest.withOptions","text":"<pre><code>withOptions(options)\n</code></pre> <p>\"Options is the operation option structure of the operation being performed. e.g. <code>meta.k8s.io/v1.DeleteOptions</code> or <code>meta.k8s.io/v1.CreateOptions</code>. This may be different than the options the caller provided. e.g. for a patch request the performed Operation might be a CREATE, in which case the Options will a <code>meta.k8s.io/v1.CreateOptions</code> even though the caller provided <code>meta.k8s.io/v1.PatchOptions</code>.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithoptionsmixin","title":"fn spec.context.admissionRequestInfo.admissionRequest.withOptionsMixin","text":"<pre><code>withOptionsMixin(options)\n</code></pre> <p>\"Options is the operation option structure of the operation being performed. e.g. <code>meta.k8s.io/v1.DeleteOptions</code> or <code>meta.k8s.io/v1.CreateOptions</code>. This may be different than the options the caller provided. e.g. for a patch request the performed Operation might be a CREATE, in which case the Options will a <code>meta.k8s.io/v1.CreateOptions</code> even though the caller provided <code>meta.k8s.io/v1.PatchOptions</code>.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithrequestsubresource","title":"fn spec.context.admissionRequestInfo.admissionRequest.withRequestSubResource","text":"<pre><code>withRequestSubResource(requestSubResource)\n</code></pre> <p>\"RequestSubResource is the name of the subresource of the original API request, if any (for example, \\\"status\\\" or \\\"scale\\\") If this is specified and differs from the value in \\\"subResource\\\", an equivalent match and conversion was performed. See documentation for the \\\"matchPolicy\\\" field in the webhook configuration type.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithsubresource","title":"fn spec.context.admissionRequestInfo.admissionRequest.withSubResource","text":"<pre><code>withSubResource(subResource)\n</code></pre> <p>\"SubResource is the subresource being requested, if any (for example, \\\"status\\\" or \\\"scale\\\")\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestwithuid","title":"fn spec.context.admissionRequestInfo.admissionRequest.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is an identifier for the individual request/response. It allows us to distinguish instances of requests which are otherwise identical (parallel requests, requests when earlier requests did not modify etc) The UID is meant to track the round trip (request/response) between the KAS and the WebHook, not the user request. It is suitable for correlating log entries between the webhook and apiserver, for either auditing or debugging.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#obj-speccontextadmissionrequestinfoadmissionrequestkind","title":"obj spec.context.admissionRequestInfo.admissionRequest.kind","text":"<p>\"Kind is the fully-qualified type of object being submitted (for example, v1.Pod or autoscaling.v1.Scale)\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestkindwithgroup","title":"fn spec.context.admissionRequestInfo.admissionRequest.kind.withGroup","text":"<pre><code>withGroup(group)\n</code></pre>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestkindwithkind","title":"fn spec.context.admissionRequestInfo.admissionRequest.kind.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestkindwithversion","title":"fn spec.context.admissionRequestInfo.admissionRequest.kind.withVersion","text":"<pre><code>withVersion(version)\n</code></pre>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#obj-speccontextadmissionrequestinfoadmissionrequestrequestkind","title":"obj spec.context.admissionRequestInfo.admissionRequest.requestKind","text":"<p>\"RequestKind is the fully-qualified type of the original API request (for example, v1.Pod or autoscaling.v1.Scale). If this is specified and differs from the value in \\\"kind\\\", an equivalent match and conversion was performed. \\n For example, if deployments can be modified via apps/v1 and apps/v1beta1, and a webhook registered a rule of <code>apiGroups:[\\\"apps\\\"], apiVersions:[\\\"v1\\\"], resources: [\\\"deployments\\\"]</code> and <code>matchPolicy: Equivalent</code>, an API request to apps/v1beta1 deployments would be converted and sent to the webhook with <code>kind: {group:\\\"apps\\\", version:\\\"v1\\\", kind:\\\"Deployment\\\"}</code> (matching the rule the webhook registered for), and <code>requestKind: {group:\\\"apps\\\", version:\\\"v1beta1\\\", kind:\\\"Deployment\\\"}</code> (indicating the kind of the original API request). \\n See documentation for the \\\"matchPolicy\\\" field in the webhook configuration type for more details.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestrequestkindwithgroup","title":"fn spec.context.admissionRequestInfo.admissionRequest.requestKind.withGroup","text":"<pre><code>withGroup(group)\n</code></pre>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestrequestkindwithkind","title":"fn spec.context.admissionRequestInfo.admissionRequest.requestKind.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestrequestkindwithversion","title":"fn spec.context.admissionRequestInfo.admissionRequest.requestKind.withVersion","text":"<pre><code>withVersion(version)\n</code></pre>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#obj-speccontextadmissionrequestinfoadmissionrequestrequestresource","title":"obj spec.context.admissionRequestInfo.admissionRequest.requestResource","text":"<p>\"RequestResource is the fully-qualified resource of the original API request (for example, v1.pods). If this is specified and differs from the value in \\\"resource\\\", an equivalent match and conversion was performed. \\n For example, if deployments can be modified via apps/v1 and apps/v1beta1, and a webhook registered a rule of <code>apiGroups:[\\\"apps\\\"], apiVersions:[\\\"v1\\\"], resources: [\\\"deployments\\\"]</code> and <code>matchPolicy: Equivalent</code>, an API request to apps/v1beta1 deployments would be converted and sent to the webhook with <code>resource: {group:\\\"apps\\\", version:\\\"v1\\\", resource:\\\"deployments\\\"}</code> (matching the resource the webhook registered for), and <code>requestResource: {group:\\\"apps\\\", version:\\\"v1beta1\\\", resource:\\\"deployments\\\"}</code> (indicating the resource of the original API request). \\n See documentation for the \\\"matchPolicy\\\" field in the webhook configuration type.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestrequestresourcewithgroup","title":"fn spec.context.admissionRequestInfo.admissionRequest.requestResource.withGroup","text":"<pre><code>withGroup(group)\n</code></pre>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestrequestresourcewithresource","title":"fn spec.context.admissionRequestInfo.admissionRequest.requestResource.withResource","text":"<pre><code>withResource(resource)\n</code></pre>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestrequestresourcewithversion","title":"fn spec.context.admissionRequestInfo.admissionRequest.requestResource.withVersion","text":"<pre><code>withVersion(version)\n</code></pre>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#obj-speccontextadmissionrequestinfoadmissionrequestresource","title":"obj spec.context.admissionRequestInfo.admissionRequest.resource","text":"<p>\"Resource is the fully-qualified resource being requested (for example, v1.pods)\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestresourcewithgroup","title":"fn spec.context.admissionRequestInfo.admissionRequest.resource.withGroup","text":"<pre><code>withGroup(group)\n</code></pre>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestresourcewithresource","title":"fn spec.context.admissionRequestInfo.admissionRequest.resource.withResource","text":"<pre><code>withResource(resource)\n</code></pre>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestresourcewithversion","title":"fn spec.context.admissionRequestInfo.admissionRequest.resource.withVersion","text":"<pre><code>withVersion(version)\n</code></pre>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#obj-speccontextadmissionrequestinfoadmissionrequestuserinfo","title":"obj spec.context.admissionRequestInfo.admissionRequest.userInfo","text":"<p>\"UserInfo is information about the requesting user\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestuserinfowithextra","title":"fn spec.context.admissionRequestInfo.admissionRequest.userInfo.withExtra","text":"<pre><code>withExtra(extra)\n</code></pre> <p>\"Any additional information provided by the authenticator.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestuserinfowithextramixin","title":"fn spec.context.admissionRequestInfo.admissionRequest.userInfo.withExtraMixin","text":"<pre><code>withExtraMixin(extra)\n</code></pre> <p>\"Any additional information provided by the authenticator.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestuserinfowithgroups","title":"fn spec.context.admissionRequestInfo.admissionRequest.userInfo.withGroups","text":"<pre><code>withGroups(groups)\n</code></pre> <p>\"The names of groups this user is a part of.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestuserinfowithgroupsmixin","title":"fn spec.context.admissionRequestInfo.admissionRequest.userInfo.withGroupsMixin","text":"<pre><code>withGroupsMixin(groups)\n</code></pre> <p>\"The names of groups this user is a part of.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestuserinfowithuid","title":"fn spec.context.admissionRequestInfo.admissionRequest.userInfo.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextadmissionrequestinfoadmissionrequestuserinfowithusername","title":"fn spec.context.admissionRequestInfo.admissionRequest.userInfo.withUsername","text":"<pre><code>withUsername(username)\n</code></pre> <p>\"The name that uniquely identifies this user among all active users.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#obj-speccontextuserinfo","title":"obj spec.context.userInfo","text":"<p>\"RequestInfo contains permission info carried in an admission request.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextuserinfowithclusterroles","title":"fn spec.context.userInfo.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is a list of possible clusterRoles send the request.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextuserinfowithclusterrolesmixin","title":"fn spec.context.userInfo.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is a list of possible clusterRoles send the request.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextuserinfowithroles","title":"fn spec.context.userInfo.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is a list of possible role send the request.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextuserinfowithrolesmixin","title":"fn spec.context.userInfo.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is a list of possible role send the request.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#obj-speccontextuserinfouserinfo","title":"obj spec.context.userInfo.userInfo","text":"<p>\"UserInfo is the userInfo carried in the admission request.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextuserinfouserinfowithextra","title":"fn spec.context.userInfo.userInfo.withExtra","text":"<pre><code>withExtra(extra)\n</code></pre> <p>\"Any additional information provided by the authenticator.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextuserinfouserinfowithextramixin","title":"fn spec.context.userInfo.userInfo.withExtraMixin","text":"<pre><code>withExtraMixin(extra)\n</code></pre> <p>\"Any additional information provided by the authenticator.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextuserinfouserinfowithgroups","title":"fn spec.context.userInfo.userInfo.withGroups","text":"<pre><code>withGroups(groups)\n</code></pre> <p>\"The names of groups this user is a part of.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextuserinfouserinfowithgroupsmixin","title":"fn spec.context.userInfo.userInfo.withGroupsMixin","text":"<pre><code>withGroupsMixin(groups)\n</code></pre> <p>\"The names of groups this user is a part of.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextuserinfouserinfowithuid","title":"fn spec.context.userInfo.userInfo.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-speccontextuserinfouserinfowithusername","title":"fn spec.context.userInfo.userInfo.withUsername","text":"<pre><code>withUsername(username)\n</code></pre> <p>\"The name that uniquely identifies this user among all active users.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#obj-specresource","title":"obj spec.resource","text":"<p>\"ResourceSpec is the information to identify the update request.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-specresourcewithapiversion","title":"fn spec.resource.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-specresourcewithkind","title":"fn spec.resource.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-specresourcewithname","title":"fn spec.resource.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.9/kyverno/v1beta1/updateRequest/#fn-specresourcewithnamespace","title":"fn spec.resource.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.9/kyverno/v2alpha1/","title":"kyverno.v2alpha1","text":"<ul> <li>cleanupPolicy</li> <li>clusterCleanupPolicy</li> <li>policyException</li> </ul>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/","title":"kyverno.v2alpha1.cleanupPolicy","text":"<p>\"CleanupPolicy defines a rule for resource cleanup.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withSchedule(schedule)</code></li> <li><code>obj spec.conditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.conditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.conditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.exclude.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.exclude.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.exclude.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.exclude.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.exclude.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.match.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.match.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.match.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.match.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.match.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fields","title":"Fields","text":""},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of CleanupPolicy</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec declares policy behaviors.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specwithschedule","title":"fn spec.withSchedule","text":"<pre><code>withSchedule(schedule)\n</code></pre> <p>\"The schedule in Cron format\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specconditions","title":"obj spec.conditions","text":"<p>\"Conditions defines the conditions used to select the resources which will be cleaned up.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionswithall","title":"fn spec.conditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionswithallmixin","title":"fn spec.conditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionswithany","title":"fn spec.conditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionswithanymixin","title":"fn spec.conditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specconditionsall","title":"obj spec.conditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionsallwithkey","title":"fn spec.conditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionsallwithoperator","title":"fn spec.conditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionsallwithvalue","title":"fn spec.conditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specconditionsany","title":"obj spec.conditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionsanywithkey","title":"fn spec.conditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionsanywithoperator","title":"fn spec.conditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specconditionsanywithvalue","title":"fn spec.conditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specexclude","title":"obj spec.exclude","text":"<p>\"ExcludeResources defines when cleanuppolicy should not be applied. The exclude criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the name or role.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludewithall","title":"fn spec.exclude.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludewithallmixin","title":"fn spec.exclude.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludewithany","title":"fn spec.exclude.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludewithanymixin","title":"fn spec.exclude.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeall","title":"obj spec.exclude.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallwithclusterroles","title":"fn spec.exclude.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallwithclusterrolesmixin","title":"fn spec.exclude.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallwithroles","title":"fn spec.exclude.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallwithrolesmixin","title":"fn spec.exclude.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallwithsubjects","title":"fn spec.exclude.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallwithsubjectsmixin","title":"fn spec.exclude.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeallresources","title":"obj spec.exclude.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourceswithannotations","title":"fn spec.exclude.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourceswithannotationsmixin","title":"fn spec.exclude.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourceswithkinds","title":"fn spec.exclude.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourceswithkindsmixin","title":"fn spec.exclude.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourceswithname","title":"fn spec.exclude.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourceswithnames","title":"fn spec.exclude.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourceswithnamesmixin","title":"fn spec.exclude.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourceswithnamespaces","title":"fn spec.exclude.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourceswithnamespacesmixin","title":"fn spec.exclude.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeallresourcesnamespaceselector","title":"obj spec.exclude.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeallresourcesnamespaceselectormatchexpressions","title":"obj spec.exclude.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeallresourcesselector","title":"obj spec.exclude.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchexpressions","title":"fn spec.exclude.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.exclude.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchlabels","title":"fn spec.exclude.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchlabelsmixin","title":"fn spec.exclude.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeallresourcesselectormatchexpressions","title":"obj spec.exclude.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithkey","title":"fn spec.exclude.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithoperator","title":"fn spec.exclude.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithvalues","title":"fn spec.exclude.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeallsubjects","title":"obj spec.exclude.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallsubjectswithapigroup","title":"fn spec.exclude.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallsubjectswithkind","title":"fn spec.exclude.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallsubjectswithname","title":"fn spec.exclude.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeallsubjectswithnamespace","title":"fn spec.exclude.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeany","title":"obj spec.exclude.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanywithclusterroles","title":"fn spec.exclude.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanywithclusterrolesmixin","title":"fn spec.exclude.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanywithroles","title":"fn spec.exclude.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanywithrolesmixin","title":"fn spec.exclude.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanywithsubjects","title":"fn spec.exclude.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanywithsubjectsmixin","title":"fn spec.exclude.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeanyresources","title":"obj spec.exclude.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourceswithannotations","title":"fn spec.exclude.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourceswithannotationsmixin","title":"fn spec.exclude.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourceswithkinds","title":"fn spec.exclude.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourceswithkindsmixin","title":"fn spec.exclude.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourceswithname","title":"fn spec.exclude.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourceswithnames","title":"fn spec.exclude.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourceswithnamesmixin","title":"fn spec.exclude.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourceswithnamespaces","title":"fn spec.exclude.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourceswithnamespacesmixin","title":"fn spec.exclude.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeanyresourcesnamespaceselector","title":"obj spec.exclude.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeanyresourcesnamespaceselectormatchexpressions","title":"obj spec.exclude.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeanyresourcesselector","title":"obj spec.exclude.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchexpressions","title":"fn spec.exclude.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.exclude.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchlabels","title":"fn spec.exclude.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.exclude.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeanyresourcesselectormatchexpressions","title":"obj spec.exclude.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithkey","title":"fn spec.exclude.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithoperator","title":"fn spec.exclude.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithvalues","title":"fn spec.exclude.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specexcludeanysubjects","title":"obj spec.exclude.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanysubjectswithapigroup","title":"fn spec.exclude.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanysubjectswithkind","title":"fn spec.exclude.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanysubjectswithname","title":"fn spec.exclude.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specexcludeanysubjectswithnamespace","title":"fn spec.exclude.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specmatch","title":"obj spec.match","text":"<p>\"MatchResources defines when cleanuppolicy should be applied. The match criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the user name or role. At least one kind is required.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchwithall","title":"fn spec.match.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchwithallmixin","title":"fn spec.match.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchwithany","title":"fn spec.match.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchwithanymixin","title":"fn spec.match.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchall","title":"obj spec.match.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallwithclusterroles","title":"fn spec.match.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallwithclusterrolesmixin","title":"fn spec.match.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallwithroles","title":"fn spec.match.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallwithrolesmixin","title":"fn spec.match.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallwithsubjects","title":"fn spec.match.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallwithsubjectsmixin","title":"fn spec.match.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchallresources","title":"obj spec.match.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourceswithannotations","title":"fn spec.match.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourceswithannotationsmixin","title":"fn spec.match.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourceswithkinds","title":"fn spec.match.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourceswithkindsmixin","title":"fn spec.match.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourceswithname","title":"fn spec.match.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourceswithnames","title":"fn spec.match.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourceswithnamesmixin","title":"fn spec.match.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourceswithnamespaces","title":"fn spec.match.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourceswithnamespacesmixin","title":"fn spec.match.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchallresourcesnamespaceselector","title":"obj spec.match.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.match.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.match.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.match.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.match.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchallresourcesnamespaceselectormatchexpressions","title":"obj spec.match.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchallresourcesselector","title":"obj spec.match.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesselectorwithmatchexpressions","title":"fn spec.match.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.match.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesselectorwithmatchlabels","title":"fn spec.match.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesselectorwithmatchlabelsmixin","title":"fn spec.match.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchallresourcesselectormatchexpressions","title":"obj spec.match.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithkey","title":"fn spec.match.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithoperator","title":"fn spec.match.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithvalues","title":"fn spec.match.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.match.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchallsubjects","title":"obj spec.match.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallsubjectswithapigroup","title":"fn spec.match.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallsubjectswithkind","title":"fn spec.match.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallsubjectswithname","title":"fn spec.match.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchallsubjectswithnamespace","title":"fn spec.match.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchany","title":"obj spec.match.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanywithclusterroles","title":"fn spec.match.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanywithclusterrolesmixin","title":"fn spec.match.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanywithroles","title":"fn spec.match.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanywithrolesmixin","title":"fn spec.match.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanywithsubjects","title":"fn spec.match.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanywithsubjectsmixin","title":"fn spec.match.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchanyresources","title":"obj spec.match.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourceswithannotations","title":"fn spec.match.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourceswithannotationsmixin","title":"fn spec.match.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourceswithkinds","title":"fn spec.match.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourceswithkindsmixin","title":"fn spec.match.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourceswithname","title":"fn spec.match.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourceswithnames","title":"fn spec.match.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourceswithnamesmixin","title":"fn spec.match.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourceswithnamespaces","title":"fn spec.match.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourceswithnamespacesmixin","title":"fn spec.match.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchanyresourcesnamespaceselector","title":"obj spec.match.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.match.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.match.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.match.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.match.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchanyresourcesnamespaceselectormatchexpressions","title":"obj spec.match.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchanyresourcesselector","title":"obj spec.match.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchexpressions","title":"fn spec.match.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.match.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchlabels","title":"fn spec.match.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.match.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchanyresourcesselectormatchexpressions","title":"obj spec.match.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithkey","title":"fn spec.match.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithoperator","title":"fn spec.match.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithvalues","title":"fn spec.match.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.match.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#obj-specmatchanysubjects","title":"obj spec.match.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanysubjectswithapigroup","title":"fn spec.match.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanysubjectswithkind","title":"fn spec.match.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanysubjectswithname","title":"fn spec.match.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v2alpha1/cleanupPolicy/#fn-specmatchanysubjectswithnamespace","title":"fn spec.match.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/","title":"kyverno.v2alpha1.clusterCleanupPolicy","text":"<p>\"ClusterCleanupPolicy defines rule for resource cleanup.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withSchedule(schedule)</code></li> <li><code>obj spec.conditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.conditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.conditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.exclude.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.exclude.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.exclude.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.exclude.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.exclude.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.exclude.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.exclude.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.match.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.match.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.match.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.match.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.match.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fields","title":"Fields","text":""},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ClusterCleanupPolicy</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec declares policy behaviors.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specwithschedule","title":"fn spec.withSchedule","text":"<pre><code>withSchedule(schedule)\n</code></pre> <p>\"The schedule in Cron format\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specconditions","title":"obj spec.conditions","text":"<p>\"Conditions defines the conditions used to select the resources which will be cleaned up.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionswithall","title":"fn spec.conditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionswithallmixin","title":"fn spec.conditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionswithany","title":"fn spec.conditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionswithanymixin","title":"fn spec.conditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specconditionsall","title":"obj spec.conditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionsallwithkey","title":"fn spec.conditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionsallwithoperator","title":"fn spec.conditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionsallwithvalue","title":"fn spec.conditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specconditionsany","title":"obj spec.conditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionsanywithkey","title":"fn spec.conditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionsanywithoperator","title":"fn spec.conditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specconditionsanywithvalue","title":"fn spec.conditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexclude","title":"obj spec.exclude","text":"<p>\"ExcludeResources defines when cleanuppolicy should not be applied. The exclude criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the name or role.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludewithall","title":"fn spec.exclude.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludewithallmixin","title":"fn spec.exclude.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludewithany","title":"fn spec.exclude.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludewithanymixin","title":"fn spec.exclude.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeall","title":"obj spec.exclude.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallwithclusterroles","title":"fn spec.exclude.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallwithclusterrolesmixin","title":"fn spec.exclude.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallwithroles","title":"fn spec.exclude.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallwithrolesmixin","title":"fn spec.exclude.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallwithsubjects","title":"fn spec.exclude.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallwithsubjectsmixin","title":"fn spec.exclude.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeallresources","title":"obj spec.exclude.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourceswithannotations","title":"fn spec.exclude.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourceswithannotationsmixin","title":"fn spec.exclude.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourceswithkinds","title":"fn spec.exclude.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourceswithkindsmixin","title":"fn spec.exclude.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourceswithname","title":"fn spec.exclude.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourceswithnames","title":"fn spec.exclude.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourceswithnamesmixin","title":"fn spec.exclude.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourceswithnamespaces","title":"fn spec.exclude.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourceswithnamespacesmixin","title":"fn spec.exclude.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeallresourcesnamespaceselector","title":"obj spec.exclude.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.exclude.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeallresourcesnamespaceselectormatchexpressions","title":"obj spec.exclude.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeallresourcesselector","title":"obj spec.exclude.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchexpressions","title":"fn spec.exclude.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.exclude.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchlabels","title":"fn spec.exclude.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectorwithmatchlabelsmixin","title":"fn spec.exclude.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeallresourcesselectormatchexpressions","title":"obj spec.exclude.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithkey","title":"fn spec.exclude.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithoperator","title":"fn spec.exclude.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithvalues","title":"fn spec.exclude.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeallsubjects","title":"obj spec.exclude.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallsubjectswithapigroup","title":"fn spec.exclude.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallsubjectswithkind","title":"fn spec.exclude.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallsubjectswithname","title":"fn spec.exclude.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeallsubjectswithnamespace","title":"fn spec.exclude.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeany","title":"obj spec.exclude.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanywithclusterroles","title":"fn spec.exclude.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanywithclusterrolesmixin","title":"fn spec.exclude.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanywithroles","title":"fn spec.exclude.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanywithrolesmixin","title":"fn spec.exclude.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanywithsubjects","title":"fn spec.exclude.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanywithsubjectsmixin","title":"fn spec.exclude.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeanyresources","title":"obj spec.exclude.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithannotations","title":"fn spec.exclude.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithannotationsmixin","title":"fn spec.exclude.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithkinds","title":"fn spec.exclude.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithkindsmixin","title":"fn spec.exclude.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithname","title":"fn spec.exclude.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithnames","title":"fn spec.exclude.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithnamesmixin","title":"fn spec.exclude.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithnamespaces","title":"fn spec.exclude.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourceswithnamespacesmixin","title":"fn spec.exclude.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeanyresourcesnamespaceselector","title":"obj spec.exclude.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.exclude.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeanyresourcesnamespaceselectormatchexpressions","title":"obj spec.exclude.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeanyresourcesselector","title":"obj spec.exclude.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchexpressions","title":"fn spec.exclude.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.exclude.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchlabels","title":"fn spec.exclude.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.exclude.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeanyresourcesselectormatchexpressions","title":"obj spec.exclude.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithkey","title":"fn spec.exclude.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithoperator","title":"fn spec.exclude.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithvalues","title":"fn spec.exclude.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.exclude.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specexcludeanysubjects","title":"obj spec.exclude.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanysubjectswithapigroup","title":"fn spec.exclude.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanysubjectswithkind","title":"fn spec.exclude.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanysubjectswithname","title":"fn spec.exclude.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specexcludeanysubjectswithnamespace","title":"fn spec.exclude.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatch","title":"obj spec.match","text":"<p>\"MatchResources defines when cleanuppolicy should be applied. The match criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the user name or role. At least one kind is required.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchwithall","title":"fn spec.match.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchwithallmixin","title":"fn spec.match.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchwithany","title":"fn spec.match.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchwithanymixin","title":"fn spec.match.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchall","title":"obj spec.match.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallwithclusterroles","title":"fn spec.match.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallwithclusterrolesmixin","title":"fn spec.match.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallwithroles","title":"fn spec.match.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallwithrolesmixin","title":"fn spec.match.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallwithsubjects","title":"fn spec.match.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallwithsubjectsmixin","title":"fn spec.match.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchallresources","title":"obj spec.match.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourceswithannotations","title":"fn spec.match.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourceswithannotationsmixin","title":"fn spec.match.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourceswithkinds","title":"fn spec.match.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourceswithkindsmixin","title":"fn spec.match.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourceswithname","title":"fn spec.match.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourceswithnames","title":"fn spec.match.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourceswithnamesmixin","title":"fn spec.match.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourceswithnamespaces","title":"fn spec.match.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourceswithnamespacesmixin","title":"fn spec.match.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchallresourcesnamespaceselector","title":"obj spec.match.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.match.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.match.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.match.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.match.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchallresourcesnamespaceselectormatchexpressions","title":"obj spec.match.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchallresourcesselector","title":"obj spec.match.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesselectorwithmatchexpressions","title":"fn spec.match.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.match.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesselectorwithmatchlabels","title":"fn spec.match.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesselectorwithmatchlabelsmixin","title":"fn spec.match.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchallresourcesselectormatchexpressions","title":"obj spec.match.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithkey","title":"fn spec.match.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithoperator","title":"fn spec.match.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithvalues","title":"fn spec.match.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.match.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchallsubjects","title":"obj spec.match.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallsubjectswithapigroup","title":"fn spec.match.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallsubjectswithkind","title":"fn spec.match.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallsubjectswithname","title":"fn spec.match.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchallsubjectswithnamespace","title":"fn spec.match.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchany","title":"obj spec.match.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanywithclusterroles","title":"fn spec.match.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanywithclusterrolesmixin","title":"fn spec.match.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanywithroles","title":"fn spec.match.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanywithrolesmixin","title":"fn spec.match.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanywithsubjects","title":"fn spec.match.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanywithsubjectsmixin","title":"fn spec.match.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchanyresources","title":"obj spec.match.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourceswithannotations","title":"fn spec.match.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourceswithannotationsmixin","title":"fn spec.match.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourceswithkinds","title":"fn spec.match.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourceswithkindsmixin","title":"fn spec.match.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourceswithname","title":"fn spec.match.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourceswithnames","title":"fn spec.match.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourceswithnamesmixin","title":"fn spec.match.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourceswithnamespaces","title":"fn spec.match.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourceswithnamespacesmixin","title":"fn spec.match.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchanyresourcesnamespaceselector","title":"obj spec.match.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.match.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.match.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.match.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.match.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchanyresourcesnamespaceselectormatchexpressions","title":"obj spec.match.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchanyresourcesselector","title":"obj spec.match.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchexpressions","title":"fn spec.match.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.match.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchlabels","title":"fn spec.match.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.match.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchanyresourcesselectormatchexpressions","title":"obj spec.match.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithkey","title":"fn spec.match.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithoperator","title":"fn spec.match.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithvalues","title":"fn spec.match.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.match.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#obj-specmatchanysubjects","title":"obj spec.match.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanysubjectswithapigroup","title":"fn spec.match.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanysubjectswithkind","title":"fn spec.match.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanysubjectswithname","title":"fn spec.match.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v2alpha1/clusterCleanupPolicy/#fn-specmatchanysubjectswithnamespace","title":"fn spec.match.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/","title":"kyverno.v2alpha1.policyException","text":"<p>\"PolicyException declares resources to be excluded from specified policies.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withExceptions(exceptions)</code></li> <li><code>fn withExceptionsMixin(exceptions)</code></li> <li><code>obj spec.exceptions</code><ul> <li><code>fn withPolicyName(policyName)</code></li> <li><code>fn withRuleNames(ruleNames)</code></li> <li><code>fn withRuleNamesMixin(ruleNames)</code></li> </ul> </li> <li><code>obj spec.match</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.match.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.match.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.match.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.match.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.match.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.match.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.match.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.match.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fields","title":"Fields","text":""},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of PolicyException</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#obj-spec","title":"obj spec","text":"<p>\"Spec declares policy exception behaviors.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specwithexceptions","title":"fn spec.withExceptions","text":"<pre><code>withExceptions(exceptions)\n</code></pre> <p>\"Exceptions is a list policy/rules to be excluded\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specwithexceptionsmixin","title":"fn spec.withExceptionsMixin","text":"<pre><code>withExceptionsMixin(exceptions)\n</code></pre> <p>\"Exceptions is a list policy/rules to be excluded\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#obj-specexceptions","title":"obj spec.exceptions","text":"<p>\"Exceptions is a list policy/rules to be excluded\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specexceptionswithpolicyname","title":"fn spec.exceptions.withPolicyName","text":"<pre><code>withPolicyName(policyName)\n</code></pre> <p>\"PolicyName identifies the policy to which the exception is applied. The policy name uses the format / unless it references a ClusterPolicy.\""},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specexceptionswithrulenames","title":"fn spec.exceptions.withRuleNames","text":"<pre><code>withRuleNames(ruleNames)\n</code></pre> <p>\"RuleNames identifies the rules to which the exception is applied.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specexceptionswithrulenamesmixin","title":"fn spec.exceptions.withRuleNamesMixin","text":"<pre><code>withRuleNamesMixin(ruleNames)\n</code></pre> <p>\"RuleNames identifies the rules to which the exception is applied.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#obj-specmatch","title":"obj spec.match","text":"<p>\"Match defines match clause used to check if a resource applies to the exception\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchwithall","title":"fn spec.match.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchwithallmixin","title":"fn spec.match.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchwithany","title":"fn spec.match.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchwithanymixin","title":"fn spec.match.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#obj-specmatchall","title":"obj spec.match.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallwithclusterroles","title":"fn spec.match.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallwithclusterrolesmixin","title":"fn spec.match.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallwithroles","title":"fn spec.match.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallwithrolesmixin","title":"fn spec.match.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallwithsubjects","title":"fn spec.match.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallwithsubjectsmixin","title":"fn spec.match.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#obj-specmatchallresources","title":"obj spec.match.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourceswithannotations","title":"fn spec.match.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourceswithannotationsmixin","title":"fn spec.match.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourceswithkinds","title":"fn spec.match.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourceswithkindsmixin","title":"fn spec.match.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourceswithname","title":"fn spec.match.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourceswithnames","title":"fn spec.match.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourceswithnamesmixin","title":"fn spec.match.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourceswithnamespaces","title":"fn spec.match.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourceswithnamespacesmixin","title":"fn spec.match.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#obj-specmatchallresourcesnamespaceselector","title":"obj spec.match.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.match.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.match.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.match.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.match.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#obj-specmatchallresourcesnamespaceselectormatchexpressions","title":"obj spec.match.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.match.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#obj-specmatchallresourcesselector","title":"obj spec.match.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesselectorwithmatchexpressions","title":"fn spec.match.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.match.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesselectorwithmatchlabels","title":"fn spec.match.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesselectorwithmatchlabelsmixin","title":"fn spec.match.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#obj-specmatchallresourcesselectormatchexpressions","title":"obj spec.match.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesselectormatchexpressionswithkey","title":"fn spec.match.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesselectormatchexpressionswithoperator","title":"fn spec.match.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesselectormatchexpressionswithvalues","title":"fn spec.match.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.match.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#obj-specmatchallsubjects","title":"obj spec.match.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallsubjectswithapigroup","title":"fn spec.match.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallsubjectswithkind","title":"fn spec.match.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallsubjectswithname","title":"fn spec.match.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchallsubjectswithnamespace","title":"fn spec.match.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#obj-specmatchany","title":"obj spec.match.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanywithclusterroles","title":"fn spec.match.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanywithclusterrolesmixin","title":"fn spec.match.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanywithroles","title":"fn spec.match.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanywithrolesmixin","title":"fn spec.match.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanywithsubjects","title":"fn spec.match.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanywithsubjectsmixin","title":"fn spec.match.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#obj-specmatchanyresources","title":"obj spec.match.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourceswithannotations","title":"fn spec.match.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourceswithannotationsmixin","title":"fn spec.match.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourceswithkinds","title":"fn spec.match.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourceswithkindsmixin","title":"fn spec.match.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourceswithname","title":"fn spec.match.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourceswithnames","title":"fn spec.match.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourceswithnamesmixin","title":"fn spec.match.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourceswithnamespaces","title":"fn spec.match.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourceswithnamespacesmixin","title":"fn spec.match.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#obj-specmatchanyresourcesnamespaceselector","title":"obj spec.match.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.match.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.match.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.match.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.match.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#obj-specmatchanyresourcesnamespaceselectormatchexpressions","title":"obj spec.match.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.match.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#obj-specmatchanyresourcesselector","title":"obj spec.match.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesselectorwithmatchexpressions","title":"fn spec.match.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.match.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesselectorwithmatchlabels","title":"fn spec.match.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.match.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#obj-specmatchanyresourcesselectormatchexpressions","title":"obj spec.match.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesselectormatchexpressionswithkey","title":"fn spec.match.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesselectormatchexpressionswithoperator","title":"fn spec.match.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesselectormatchexpressionswithvalues","title":"fn spec.match.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.match.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#obj-specmatchanysubjects","title":"obj spec.match.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanysubjectswithapigroup","title":"fn spec.match.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanysubjectswithkind","title":"fn spec.match.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanysubjectswithname","title":"fn spec.match.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v2alpha1/policyException/#fn-specmatchanysubjectswithnamespace","title":"fn spec.match.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2beta1/","title":"kyverno.v2beta1","text":"<ul> <li>clusterPolicy</li> <li>policy</li> </ul>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/","title":"kyverno.v2beta1.clusterPolicy","text":"<p>\"ClusterPolicy declares validation, mutation, and generation behaviors for matching resources.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withApplyRules(applyRules)</code></li> <li><code>fn withBackground(background)</code></li> <li><code>fn withFailurePolicy(failurePolicy)</code></li> <li><code>fn withGenerateExistingOnPolicyUpdate(generateExistingOnPolicyUpdate)</code></li> <li><code>fn withMutateExistingOnPolicyUpdate(mutateExistingOnPolicyUpdate)</code></li> <li><code>fn withRules(rules)</code></li> <li><code>fn withRulesMixin(rules)</code></li> <li><code>fn withSchemaValidation(schemaValidation)</code></li> <li><code>fn withValidationFailureAction(validationFailureAction)</code></li> <li><code>fn withValidationFailureActionOverrides(validationFailureActionOverrides)</code></li> <li><code>fn withValidationFailureActionOverridesMixin(validationFailureActionOverrides)</code></li> <li><code>fn withWebhookTimeoutSeconds(webhookTimeoutSeconds)</code></li> <li><code>obj spec.rules</code><ul> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withImageExtractors(imageExtractors)</code></li> <li><code>fn withImageExtractorsMixin(imageExtractors)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withVerifyImages(verifyImages)</code></li> <li><code>fn withVerifyImagesMixin(verifyImages)</code></li> <li><code>obj spec.rules.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.context.apiCall</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> </ul> </li> <li><code>obj spec.rules.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> </ul> </li> <li><code>obj spec.rules.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.exclude.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.exclude.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.exclude.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.generate</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withData(data)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withSynchronize(synchronize)</code></li> <li><code>obj spec.rules.generate.clone</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.generate.cloneList</code><ul> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.rules.generate.cloneList.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.generate.cloneList.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.match.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.match.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.match.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate</code><ul> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withForeachMixin(foreach)</code></li> <li><code>fn withPatchStrategicMerge(patchStrategicMerge)</code></li> <li><code>fn withPatchesJson6902(patchesJson6902)</code></li> <li><code>fn withTargets(targets)</code></li> <li><code>fn withTargetsMixin(targets)</code></li> <li><code>obj spec.rules.mutate.foreach</code><ul> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withList(list)</code></li> <li><code>fn withPatchStrategicMerge(patchStrategicMerge)</code></li> <li><code>fn withPatchesJson6902(patchesJson6902)</code></li> <li><code>obj spec.rules.mutate.foreach.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.mutate.foreach.context.apiCall</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.mutate.foreach.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.targets</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate</code><ul> <li><code>fn withAnyPattern(anyPattern)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withForeachMixin(foreach)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPattern(pattern)</code></li> <li><code>obj spec.rules.validate.deny</code><ul> <li><code>obj spec.rules.validate.deny.conditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.validate.deny.conditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.validate.deny.conditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach</code><ul> <li><code>fn withAnyPattern(anyPattern)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withElementScope(elementScope)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withList(list)</code></li> <li><code>fn withPattern(pattern)</code></li> <li><code>obj spec.rules.validate.foreach.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.validate.foreach.context.apiCall</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach.deny</code><ul> <li><code>fn withConditions(conditions)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.validate.foreach.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests</code><ul> <li><code>fn withAnnotationDomain(annotationDomain)</code></li> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withIgnoreFields(ignoreFields)</code></li> <li><code>fn withIgnoreFieldsMixin(ignoreFields)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.validate.manifests.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.certificates.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keyless.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.dryRun</code><ul> <li><code>fn withEnable(enable)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.ignoreFields</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>fn withObjects(objects)</code></li> <li><code>fn withObjectsMixin(objects)</code></li> <li><code>obj spec.rules.validate.manifests.ignoreFields.objects</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withVersion(version)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.podSecurity</code><ul> <li><code>fn withExclude(exclude)</code></li> <li><code>fn withExcludeMixin(exclude)</code></li> <li><code>fn withLevel(level)</code></li> <li><code>fn withVersion(version)</code></li> <li><code>obj spec.rules.validate.podSecurity.exclude</code><ul> <li><code>fn withControlName(controlName)</code></li> <li><code>fn withImages(images)</code></li> <li><code>fn withImagesMixin(images)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages</code><ul> <li><code>fn withAttestations(attestations)</code></li> <li><code>fn withAttestationsMixin(attestations)</code></li> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withImageReferences(imageReferences)</code></li> <li><code>fn withImageReferencesMixin(imageReferences)</code></li> <li><code>fn withMutateDigest(mutateDigest)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>fn withRequired(required)</code></li> <li><code>fn withVerifyDigest(verifyDigest)</code></li> <li><code>obj spec.rules.verifyImages.attestations</code><ul> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withConditions(conditions)</code></li> <li><code>fn withConditionsMixin(conditions)</code></li> <li><code>fn withPredicateType(predicateType)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.conditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.verifyImages.attestations.conditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.conditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.certificates.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.keyless.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.validationFailureActionOverrides</code><ul> <li><code>fn withAction(action)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fields","title":"Fields","text":""},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ClusterPolicy</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-spec","title":"obj spec","text":"<p>\"Spec declares policy behaviors.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specwithapplyrules","title":"fn spec.withApplyRules","text":"<pre><code>withApplyRules(applyRules)\n</code></pre> <p>\"ApplyRules controls how rules in a policy are applied. Rule are processed in the order of declaration. When set to <code>One</code> processing stops after a rule has been applied i.e. the rule matches and results in a pass, fail, or error. When set to <code>All</code> all rules in the policy are processed. The default is <code>All</code>.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specwithbackground","title":"fn spec.withBackground","text":"<pre><code>withBackground(background)\n</code></pre> <p>\"Background controls if rules are applied to existing resources during a background scan. Optional. Default value is \\\"true\\\". The value must be set to \\\"false\\\" if the policy rule uses variables that are only available in the admission review request (e.g. user name).\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specwithfailurepolicy","title":"fn spec.withFailurePolicy","text":"<pre><code>withFailurePolicy(failurePolicy)\n</code></pre> <p>\"FailurePolicy defines how unexpected policy errors and webhook response timeout errors are handled. Rules within the same policy share the same failure behavior. Allowed values are Ignore or Fail. Defaults to Fail.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specwithgenerateexistingonpolicyupdate","title":"fn spec.withGenerateExistingOnPolicyUpdate","text":"<pre><code>withGenerateExistingOnPolicyUpdate(generateExistingOnPolicyUpdate)\n</code></pre> <p>\"GenerateExistingOnPolicyUpdate controls whether to trigger generate rule in existing resources If is set to \\\"true\\\" generate rule will be triggered and applied to existing matched resources. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specwithmutateexistingonpolicyupdate","title":"fn spec.withMutateExistingOnPolicyUpdate","text":"<pre><code>withMutateExistingOnPolicyUpdate(mutateExistingOnPolicyUpdate)\n</code></pre> <p>\"MutateExistingOnPolicyUpdate controls if a mutateExisting policy is applied on policy events. Default value is \\\"false\\\".\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specwithrules","title":"fn spec.withRules","text":"<pre><code>withRules(rules)\n</code></pre> <p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specwithrulesmixin","title":"fn spec.withRulesMixin","text":"<pre><code>withRulesMixin(rules)\n</code></pre> <p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specwithschemavalidation","title":"fn spec.withSchemaValidation","text":"<pre><code>withSchemaValidation(schemaValidation)\n</code></pre> <p>\"SchemaValidation skips validation checks for policies as well as patched resources. Optional. The default value is set to \\\"true\\\", it must be set to \\\"false\\\" to disable the validation checks.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specwithvalidationfailureaction","title":"fn spec.withValidationFailureAction","text":"<pre><code>withValidationFailureAction(validationFailureAction)\n</code></pre> <p>\"ValidationFailureAction defines if a validation policy rule violation should block the admission review request (enforce), or allow (audit) the admission review request and report an error in a policy report. Optional. Allowed values are audit or enforce. The default value is \\\"Audit\\\".\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specwithvalidationfailureactionoverrides","title":"fn spec.withValidationFailureActionOverrides","text":"<pre><code>withValidationFailureActionOverrides(validationFailureActionOverrides)\n</code></pre> <p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specwithvalidationfailureactionoverridesmixin","title":"fn spec.withValidationFailureActionOverridesMixin","text":"<pre><code>withValidationFailureActionOverridesMixin(validationFailureActionOverrides)\n</code></pre> <p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specwithwebhooktimeoutseconds","title":"fn spec.withWebhookTimeoutSeconds","text":"<pre><code>withWebhookTimeoutSeconds(webhookTimeoutSeconds)\n</code></pre> <p>\"WebhookTimeoutSeconds specifies the maximum time in seconds allowed to apply this policy. After the configured time expires, the admission request may fail, or may simply ignore the policy results, based on the failure policy. The default timeout is 10s, the value must be between 1 and 30 seconds.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrules","title":"obj spec.rules","text":"<p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specruleswithcontext","title":"fn spec.rules.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specruleswithcontextmixin","title":"fn spec.rules.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specruleswithimageextractors","title":"fn spec.rules.withImageExtractors","text":"<pre><code>withImageExtractors(imageExtractors)\n</code></pre> <p>\"ImageExtractors defines a mapping from kinds to ImageExtractorConfigs. This config is only valid for verifyImages rules.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specruleswithimageextractorsmixin","title":"fn spec.rules.withImageExtractorsMixin","text":"<pre><code>withImageExtractorsMixin(imageExtractors)\n</code></pre> <p>\"ImageExtractors defines a mapping from kinds to ImageExtractorConfigs. This config is only valid for verifyImages rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specruleswithname","title":"fn spec.rules.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a label to identify the rule, It must be unique within the policy.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specruleswithverifyimages","title":"fn spec.rules.withVerifyImages","text":"<pre><code>withVerifyImages(verifyImages)\n</code></pre> <p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specruleswithverifyimagesmixin","title":"fn spec.rules.withVerifyImagesMixin","text":"<pre><code>withVerifyImagesMixin(verifyImages)\n</code></pre> <p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulescontext","title":"obj spec.rules.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextwithname","title":"fn spec.rules.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulescontextapicall","title":"obj spec.rules.context.apiCall","text":"<p>\"APICall defines an HTTP request to the Kubernetes API server. The JSON data retrieved is stored in the context.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextapicallwithjmespath","title":"fn spec.rules.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the API server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response to the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextapicallwithurlpath","title":"fn spec.rules.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulescontextconfigmap","title":"obj spec.rules.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextconfigmapwithname","title":"fn spec.rules.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextconfigmapwithnamespace","title":"fn spec.rules.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulescontextimageregistry","title":"obj spec.rules.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextimageregistrywithjmespath","title":"fn spec.rules.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextimageregistrywithreference","title":"fn spec.rules.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulescontextvariable","title":"obj spec.rules.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextvariablewithdefault","title":"fn spec.rules.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextvariablewithjmespath","title":"fn spec.rules.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulescontextvariablewithvalue","title":"fn spec.rules.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesexclude","title":"obj spec.rules.exclude","text":"<p>\"ExcludeResources defines when this policy rule should not be applied. The exclude criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the name or role.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludewithall","title":"fn spec.rules.exclude.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludewithallmixin","title":"fn spec.rules.exclude.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludewithany","title":"fn spec.rules.exclude.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludewithanymixin","title":"fn spec.rules.exclude.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeall","title":"obj spec.rules.exclude.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallwithclusterroles","title":"fn spec.rules.exclude.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallwithclusterrolesmixin","title":"fn spec.rules.exclude.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallwithroles","title":"fn spec.rules.exclude.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallwithrolesmixin","title":"fn spec.rules.exclude.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallwithsubjects","title":"fn spec.rules.exclude.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallwithsubjectsmixin","title":"fn spec.rules.exclude.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeallresources","title":"obj spec.rules.exclude.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourceswithannotations","title":"fn spec.rules.exclude.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourceswithannotationsmixin","title":"fn spec.rules.exclude.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourceswithkinds","title":"fn spec.rules.exclude.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourceswithkindsmixin","title":"fn spec.rules.exclude.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourceswithname","title":"fn spec.rules.exclude.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourceswithnames","title":"fn spec.rules.exclude.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourceswithnamesmixin","title":"fn spec.rules.exclude.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourceswithnamespaces","title":"fn spec.rules.exclude.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourceswithnamespacesmixin","title":"fn spec.rules.exclude.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeallresourcesnamespaceselector","title":"obj spec.rules.exclude.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeallresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeallresourcesselector","title":"obj spec.rules.exclude.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeallresourcesselectormatchexpressions","title":"obj spec.rules.exclude.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeallsubjects","title":"obj spec.rules.exclude.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallsubjectswithapigroup","title":"fn spec.rules.exclude.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallsubjectswithkind","title":"fn spec.rules.exclude.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallsubjectswithname","title":"fn spec.rules.exclude.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeallsubjectswithnamespace","title":"fn spec.rules.exclude.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeany","title":"obj spec.rules.exclude.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanywithclusterroles","title":"fn spec.rules.exclude.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanywithclusterrolesmixin","title":"fn spec.rules.exclude.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanywithroles","title":"fn spec.rules.exclude.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanywithrolesmixin","title":"fn spec.rules.exclude.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanywithsubjects","title":"fn spec.rules.exclude.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanywithsubjectsmixin","title":"fn spec.rules.exclude.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeanyresources","title":"obj spec.rules.exclude.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourceswithannotations","title":"fn spec.rules.exclude.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourceswithannotationsmixin","title":"fn spec.rules.exclude.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourceswithkinds","title":"fn spec.rules.exclude.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourceswithkindsmixin","title":"fn spec.rules.exclude.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourceswithname","title":"fn spec.rules.exclude.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourceswithnames","title":"fn spec.rules.exclude.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourceswithnamesmixin","title":"fn spec.rules.exclude.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourceswithnamespaces","title":"fn spec.rules.exclude.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourceswithnamespacesmixin","title":"fn spec.rules.exclude.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeanyresourcesnamespaceselector","title":"obj spec.rules.exclude.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeanyresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeanyresourcesselector","title":"obj spec.rules.exclude.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeanyresourcesselectormatchexpressions","title":"obj spec.rules.exclude.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesexcludeanysubjects","title":"obj spec.rules.exclude.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanysubjectswithapigroup","title":"fn spec.rules.exclude.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanysubjectswithkind","title":"fn spec.rules.exclude.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanysubjectswithname","title":"fn spec.rules.exclude.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesexcludeanysubjectswithnamespace","title":"fn spec.rules.exclude.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesgenerate","title":"obj spec.rules.generate","text":"<p>\"Generation is used to create new resources.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesgeneratewithapiversion","title":"fn spec.rules.generate.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesgeneratewithdata","title":"fn spec.rules.generate.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data provides the resource declaration used to populate each generated resource. At most one of Data or Clone must be specified. If neither are provided, the generated resource will be created with default data only.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesgeneratewithkind","title":"fn spec.rules.generate.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesgeneratewithname","title":"fn spec.rules.generate.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesgeneratewithnamespace","title":"fn spec.rules.generate.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesgeneratewithsynchronize","title":"fn spec.rules.generate.withSynchronize","text":"<pre><code>withSynchronize(synchronize)\n</code></pre> <p>\"Synchronize controls if generated resources should be kept in-sync with their source resource. If Synchronize is set to \\\"true\\\" changes to generated resources will be overwritten with resource data from Data or the resource specified in the Clone declaration. Optional. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesgenerateclone","title":"obj spec.rules.generate.clone","text":"<p>\"Clone specifies the source resource used to populate each generated resource. At most one of Data or Clone can be specified. If neither are provided, the generated resource will be created with default data only.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonewithname","title":"fn spec.rules.generate.clone.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies name of the resource.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonewithnamespace","title":"fn spec.rules.generate.clone.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies source resource namespace.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesgenerateclonelist","title":"obj spec.rules.generate.cloneList","text":"<p>\"CloneList specifies the list of source resource used to populate each generated resource.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistwithkinds","title":"fn spec.rules.generate.cloneList.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistwithkindsmixin","title":"fn spec.rules.generate.cloneList.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistwithnamespace","title":"fn spec.rules.generate.cloneList.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies source resource namespace.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesgenerateclonelistselector","title":"obj spec.rules.generate.cloneList.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code>. wildcard characters are not supported.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistselectorwithmatchexpressions","title":"fn spec.rules.generate.cloneList.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistselectorwithmatchexpressionsmixin","title":"fn spec.rules.generate.cloneList.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistselectorwithmatchlabels","title":"fn spec.rules.generate.cloneList.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistselectorwithmatchlabelsmixin","title":"fn spec.rules.generate.cloneList.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesgenerateclonelistselectormatchexpressions","title":"obj spec.rules.generate.cloneList.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistselectormatchexpressionswithkey","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistselectormatchexpressionswithoperator","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistselectormatchexpressionswithvalues","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesgenerateclonelistselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatch","title":"obj spec.rules.match","text":"<p>\"MatchResources defines when this policy rule should be applied. The match criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the user name or role. At least one kind is required.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchwithall","title":"fn spec.rules.match.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchwithallmixin","title":"fn spec.rules.match.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchwithany","title":"fn spec.rules.match.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchwithanymixin","title":"fn spec.rules.match.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchall","title":"obj spec.rules.match.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallwithclusterroles","title":"fn spec.rules.match.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallwithclusterrolesmixin","title":"fn spec.rules.match.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallwithroles","title":"fn spec.rules.match.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallwithrolesmixin","title":"fn spec.rules.match.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallwithsubjects","title":"fn spec.rules.match.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallwithsubjectsmixin","title":"fn spec.rules.match.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchallresources","title":"obj spec.rules.match.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourceswithannotations","title":"fn spec.rules.match.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourceswithannotationsmixin","title":"fn spec.rules.match.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourceswithkinds","title":"fn spec.rules.match.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourceswithkindsmixin","title":"fn spec.rules.match.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourceswithname","title":"fn spec.rules.match.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourceswithnames","title":"fn spec.rules.match.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourceswithnamesmixin","title":"fn spec.rules.match.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourceswithnamespaces","title":"fn spec.rules.match.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourceswithnamespacesmixin","title":"fn spec.rules.match.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchallresourcesnamespaceselector","title":"obj spec.rules.match.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchallresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchallresourcesselector","title":"obj spec.rules.match.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesselectorwithmatchlabels","title":"fn spec.rules.match.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchallresourcesselectormatchexpressions","title":"obj spec.rules.match.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchallsubjects","title":"obj spec.rules.match.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallsubjectswithapigroup","title":"fn spec.rules.match.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallsubjectswithkind","title":"fn spec.rules.match.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallsubjectswithname","title":"fn spec.rules.match.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchallsubjectswithnamespace","title":"fn spec.rules.match.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchany","title":"obj spec.rules.match.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanywithclusterroles","title":"fn spec.rules.match.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanywithclusterrolesmixin","title":"fn spec.rules.match.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanywithroles","title":"fn spec.rules.match.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanywithrolesmixin","title":"fn spec.rules.match.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanywithsubjects","title":"fn spec.rules.match.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanywithsubjectsmixin","title":"fn spec.rules.match.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchanyresources","title":"obj spec.rules.match.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourceswithannotations","title":"fn spec.rules.match.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourceswithannotationsmixin","title":"fn spec.rules.match.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourceswithkinds","title":"fn spec.rules.match.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourceswithkindsmixin","title":"fn spec.rules.match.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourceswithname","title":"fn spec.rules.match.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourceswithnames","title":"fn spec.rules.match.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourceswithnamesmixin","title":"fn spec.rules.match.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourceswithnamespaces","title":"fn spec.rules.match.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourceswithnamespacesmixin","title":"fn spec.rules.match.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchanyresourcesnamespaceselector","title":"obj spec.rules.match.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchanyresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchanyresourcesselector","title":"obj spec.rules.match.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesselectorwithmatchlabels","title":"fn spec.rules.match.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchanyresourcesselectormatchexpressions","title":"obj spec.rules.match.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmatchanysubjects","title":"obj spec.rules.match.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanysubjectswithapigroup","title":"fn spec.rules.match.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanysubjectswithkind","title":"fn spec.rules.match.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanysubjectswithname","title":"fn spec.rules.match.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmatchanysubjectswithnamespace","title":"fn spec.rules.match.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutate","title":"obj spec.rules.mutate","text":"<p>\"Mutation is used to modify matching resources.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatewithforeach","title":"fn spec.rules.mutate.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatewithforeachmixin","title":"fn spec.rules.mutate.withForeachMixin","text":"<pre><code>withForeachMixin(foreach)\n</code></pre> <p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatewithpatchstrategicmerge","title":"fn spec.rules.mutate.withPatchStrategicMerge","text":"<pre><code>withPatchStrategicMerge(patchStrategicMerge)\n</code></pre> <p>\"PatchStrategicMerge is a strategic merge patch used to modify resources. See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatewithpatchesjson6902","title":"fn spec.rules.mutate.withPatchesJson6902","text":"<pre><code>withPatchesJson6902(patchesJson6902)\n</code></pre> <p>\"PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources. See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatewithtargets","title":"fn spec.rules.mutate.withTargets","text":"<pre><code>withTargets(targets)\n</code></pre> <p>\"Targets defines the target resources to be mutated.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatewithtargetsmixin","title":"fn spec.rules.mutate.withTargetsMixin","text":"<pre><code>withTargetsMixin(targets)\n</code></pre> <p>\"Targets defines the target resources to be mutated.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeach","title":"obj spec.rules.mutate.foreach","text":"<p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachwithcontext","title":"fn spec.rules.mutate.foreach.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachwithcontextmixin","title":"fn spec.rules.mutate.foreach.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachwithforeach","title":"fn spec.rules.mutate.foreach.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"Foreach declares a nested foreach iterator\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachwithlist","title":"fn spec.rules.mutate.foreach.withList","text":"<pre><code>withList(list)\n</code></pre> <p>\"List specifies a JMESPath expression that results in one or more elements to which the validation logic is applied.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachwithpatchstrategicmerge","title":"fn spec.rules.mutate.foreach.withPatchStrategicMerge","text":"<pre><code>withPatchStrategicMerge(patchStrategicMerge)\n</code></pre> <p>\"PatchStrategicMerge is a strategic merge patch used to modify resources. See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachwithpatchesjson6902","title":"fn spec.rules.mutate.foreach.withPatchesJson6902","text":"<pre><code>withPatchesJson6902(patchesJson6902)\n</code></pre> <p>\"PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources. See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeachcontext","title":"obj spec.rules.mutate.foreach.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextwithname","title":"fn spec.rules.mutate.foreach.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeachcontextapicall","title":"obj spec.rules.mutate.foreach.context.apiCall","text":"<p>\"APICall defines an HTTP request to the Kubernetes API server. The JSON data retrieved is stored in the context.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextapicallwithjmespath","title":"fn spec.rules.mutate.foreach.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the API server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response to the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextapicallwithurlpath","title":"fn spec.rules.mutate.foreach.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeachcontextconfigmap","title":"obj spec.rules.mutate.foreach.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextconfigmapwithname","title":"fn spec.rules.mutate.foreach.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextconfigmapwithnamespace","title":"fn spec.rules.mutate.foreach.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeachcontextimageregistry","title":"obj spec.rules.mutate.foreach.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextimageregistrywithjmespath","title":"fn spec.rules.mutate.foreach.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextimageregistrywithreference","title":"fn spec.rules.mutate.foreach.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeachcontextvariable","title":"obj spec.rules.mutate.foreach.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextvariablewithdefault","title":"fn spec.rules.mutate.foreach.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextvariablewithjmespath","title":"fn spec.rules.mutate.foreach.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachcontextvariablewithvalue","title":"fn spec.rules.mutate.foreach.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeachpreconditions","title":"obj spec.rules.mutate.foreach.preconditions","text":"<p>\"AnyAllConditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionswithall","title":"fn spec.rules.mutate.foreach.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionswithallmixin","title":"fn spec.rules.mutate.foreach.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionswithany","title":"fn spec.rules.mutate.foreach.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionswithanymixin","title":"fn spec.rules.mutate.foreach.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeachpreconditionsall","title":"obj spec.rules.mutate.foreach.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsallwithkey","title":"fn spec.rules.mutate.foreach.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsallwithoperator","title":"fn spec.rules.mutate.foreach.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsallwithvalue","title":"fn spec.rules.mutate.foreach.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutateforeachpreconditionsany","title":"obj spec.rules.mutate.foreach.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsanywithkey","title":"fn spec.rules.mutate.foreach.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsanywithoperator","title":"fn spec.rules.mutate.foreach.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutateforeachpreconditionsanywithvalue","title":"fn spec.rules.mutate.foreach.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesmutatetargets","title":"obj spec.rules.mutate.targets","text":"<p>\"Targets defines the target resources to be mutated.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetswithapiversion","title":"fn spec.rules.mutate.targets.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetswithkind","title":"fn spec.rules.mutate.targets.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetswithname","title":"fn spec.rules.mutate.targets.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesmutatetargetswithnamespace","title":"fn spec.rules.mutate.targets.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulespreconditions","title":"obj spec.rules.preconditions","text":"<p>\"Preconditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. A direct list of conditions (without <code>any</code> or <code>all</code> statements is supported for backwards compatibility but See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionswithall","title":"fn spec.rules.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionswithallmixin","title":"fn spec.rules.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionswithany","title":"fn spec.rules.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionswithanymixin","title":"fn spec.rules.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulespreconditionsall","title":"obj spec.rules.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionsallwithkey","title":"fn spec.rules.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionsallwithoperator","title":"fn spec.rules.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionsallwithvalue","title":"fn spec.rules.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulespreconditionsany","title":"obj spec.rules.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionsanywithkey","title":"fn spec.rules.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionsanywithoperator","title":"fn spec.rules.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulespreconditionsanywithvalue","title":"fn spec.rules.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidate","title":"obj spec.rules.validate","text":"<p>\"Validation is used to validate matching resources.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatewithanypattern","title":"fn spec.rules.validate.withAnyPattern","text":"<pre><code>withAnyPattern(anyPattern)\n</code></pre> <p>\"AnyPattern specifies list of validation patterns. At least one of the patterns must be satisfied for the validation rule to succeed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatewithforeach","title":"fn spec.rules.validate.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatewithforeachmixin","title":"fn spec.rules.validate.withForeachMixin","text":"<pre><code>withForeachMixin(foreach)\n</code></pre> <p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatewithmessage","title":"fn spec.rules.validate.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message specifies a custom message to be displayed on failure.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatewithpattern","title":"fn spec.rules.validate.withPattern","text":"<pre><code>withPattern(pattern)\n</code></pre> <p>\"Pattern specifies an overlay-style pattern used to check resources.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatedeny","title":"obj spec.rules.validate.deny","text":"<p>\"Deny defines conditions used to pass or fail a validation rule.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatedenyconditions","title":"obj spec.rules.validate.deny.conditions","text":"<p>\"Multiple conditions can be declared under an <code>any</code> or <code>all</code> statement. A direct list of conditions (without <code>any</code> or <code>all</code> statements) is also supported for backwards compatibility See: https://kyverno.io/docs/writing-policies/validate/#deny-rules\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionswithall","title":"fn spec.rules.validate.deny.conditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionswithallmixin","title":"fn spec.rules.validate.deny.conditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionswithany","title":"fn spec.rules.validate.deny.conditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionswithanymixin","title":"fn spec.rules.validate.deny.conditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatedenyconditionsall","title":"obj spec.rules.validate.deny.conditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionsallwithkey","title":"fn spec.rules.validate.deny.conditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionsallwithoperator","title":"fn spec.rules.validate.deny.conditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionsallwithvalue","title":"fn spec.rules.validate.deny.conditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatedenyconditionsany","title":"obj spec.rules.validate.deny.conditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionsanywithkey","title":"fn spec.rules.validate.deny.conditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionsanywithoperator","title":"fn spec.rules.validate.deny.conditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatedenyconditionsanywithvalue","title":"fn spec.rules.validate.deny.conditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeach","title":"obj spec.rules.validate.foreach","text":"<p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachwithanypattern","title":"fn spec.rules.validate.foreach.withAnyPattern","text":"<pre><code>withAnyPattern(anyPattern)\n</code></pre> <p>\"AnyPattern specifies list of validation patterns. At least one of the patterns must be satisfied for the validation rule to succeed.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachwithcontext","title":"fn spec.rules.validate.foreach.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachwithcontextmixin","title":"fn spec.rules.validate.foreach.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachwithelementscope","title":"fn spec.rules.validate.foreach.withElementScope","text":"<pre><code>withElementScope(elementScope)\n</code></pre> <p>\"ElementScope specifies whether to use the current list element as the scope for validation. Defaults to \\\"true\\\" if not specified. When set to \\\"false\\\", \\\"request.object\\\" is used as the validation scope within the foreach block to allow referencing other elements in the subtree.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachwithforeach","title":"fn spec.rules.validate.foreach.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"Foreach declares a nested foreach iterator\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachwithlist","title":"fn spec.rules.validate.foreach.withList","text":"<pre><code>withList(list)\n</code></pre> <p>\"List specifies a JMESPath expression that results in one or more elements to which the validation logic is applied.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachwithpattern","title":"fn spec.rules.validate.foreach.withPattern","text":"<pre><code>withPattern(pattern)\n</code></pre> <p>\"Pattern specifies an overlay-style pattern used to check resources.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachcontext","title":"obj spec.rules.validate.foreach.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextwithname","title":"fn spec.rules.validate.foreach.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachcontextapicall","title":"obj spec.rules.validate.foreach.context.apiCall","text":"<p>\"APICall defines an HTTP request to the Kubernetes API server. The JSON data retrieved is stored in the context.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicallwithjmespath","title":"fn spec.rules.validate.foreach.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the API server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response to the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextapicallwithurlpath","title":"fn spec.rules.validate.foreach.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachcontextconfigmap","title":"obj spec.rules.validate.foreach.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextconfigmapwithname","title":"fn spec.rules.validate.foreach.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextconfigmapwithnamespace","title":"fn spec.rules.validate.foreach.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachcontextimageregistry","title":"obj spec.rules.validate.foreach.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextimageregistrywithjmespath","title":"fn spec.rules.validate.foreach.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextimageregistrywithreference","title":"fn spec.rules.validate.foreach.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachcontextvariable","title":"obj spec.rules.validate.foreach.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextvariablewithdefault","title":"fn spec.rules.validate.foreach.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextvariablewithjmespath","title":"fn spec.rules.validate.foreach.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachcontextvariablewithvalue","title":"fn spec.rules.validate.foreach.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachdeny","title":"obj spec.rules.validate.foreach.deny","text":"<p>\"Deny defines conditions used to pass or fail a validation rule.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachdenywithconditions","title":"fn spec.rules.validate.foreach.deny.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Multiple conditions can be declared under an <code>any</code> or <code>all</code> statement. A direct list of conditions (without <code>any</code> or <code>all</code> statements) is also supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/validate/#deny-rules\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachpreconditions","title":"obj spec.rules.validate.foreach.preconditions","text":"<p>\"AnyAllConditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionswithall","title":"fn spec.rules.validate.foreach.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionswithallmixin","title":"fn spec.rules.validate.foreach.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionswithany","title":"fn spec.rules.validate.foreach.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionswithanymixin","title":"fn spec.rules.validate.foreach.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachpreconditionsall","title":"obj spec.rules.validate.foreach.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsallwithkey","title":"fn spec.rules.validate.foreach.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsallwithoperator","title":"fn spec.rules.validate.foreach.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsallwithvalue","title":"fn spec.rules.validate.foreach.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidateforeachpreconditionsany","title":"obj spec.rules.validate.foreach.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsanywithkey","title":"fn spec.rules.validate.foreach.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsanywithoperator","title":"fn spec.rules.validate.foreach.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidateforeachpreconditionsanywithvalue","title":"fn spec.rules.validate.foreach.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifests","title":"obj spec.rules.validate.manifests","text":"<p>\"Manifest specifies conditions for manifest verification\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestswithannotationdomain","title":"fn spec.rules.validate.manifests.withAnnotationDomain","text":"<pre><code>withAnnotationDomain(annotationDomain)\n</code></pre> <p>\"AnnotationDomain is custom domain of annotation for message and signature. Default is \\\"cosign.sigstore.dev\\\".\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestswithattestors","title":"fn spec.rules.validate.manifests.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestswithattestorsmixin","title":"fn spec.rules.validate.manifests.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestswithignorefields","title":"fn spec.rules.validate.manifests.withIgnoreFields","text":"<pre><code>withIgnoreFields(ignoreFields)\n</code></pre> <p>\"Fields which will be ignored while comparing manifests.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestswithignorefieldsmixin","title":"fn spec.rules.validate.manifests.withIgnoreFieldsMixin","text":"<pre><code>withIgnoreFieldsMixin(ignoreFields)\n</code></pre> <p>\"Fields which will be ignored while comparing manifests.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestswithrepository","title":"fn spec.rules.validate.manifests.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for resource bundle reference. The repository can be overridden per Attestor or Attestation.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestors","title":"obj spec.rules.validate.manifests.attestors","text":"<p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorswithcount","title":"fn spec.rules.validate.manifests.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorswithentries","title":"fn spec.rules.validate.manifests.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorswithentriesmixin","title":"fn spec.rules.validate.manifests.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentries","title":"obj spec.rules.validate.manifests.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieswithannotations","title":"fn spec.rules.validate.manifests.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieswithannotationsmixin","title":"fn spec.rules.validate.manifests.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieswithattestor","title":"fn spec.rules.validate.manifests.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested AttestorSet used to specify a more complex set of match authorities\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieswithrepository","title":"fn spec.rules.validate.manifests.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentriescertificates","title":"obj spec.rules.validate.manifests.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentriescertificateswithcert","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Certificate is an optional PEM encoded public certificate.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentriescertificateswithcertchain","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertificateChain is an optional PEM encoded set of certificates used to verify\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentriescertificatesrekor","title":"obj spec.rules.validate.manifests.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeyless","title":"obj spec.rules.validate.manifests.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithissuer","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithroots","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithsubject","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeylessrekor","title":"obj spec.rules.validate.manifests.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked and a root certificate chain is expected instead. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeys","title":"obj spec.rules.validate.manifests.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithkms","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithpublickeys","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeysrekor","title":"obj spec.rules.validate.manifests.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeysrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsattestorsentrieskeyssecret","title":"obj spec.rules.validate.manifests.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeyssecretwithname","title":"fn spec.rules.validate.manifests.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.validate.manifests.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsdryrun","title":"obj spec.rules.validate.manifests.dryRun","text":"<p>\"DryRun configuration\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsdryrunwithenable","title":"fn spec.rules.validate.manifests.dryRun.withEnable","text":"<pre><code>withEnable(enable)\n</code></pre>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsdryrunwithnamespace","title":"fn spec.rules.validate.manifests.dryRun.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsignorefields","title":"obj spec.rules.validate.manifests.ignoreFields","text":"<p>\"Fields which will be ignored while comparing manifests.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldswithfields","title":"fn spec.rules.validate.manifests.ignoreFields.withFields","text":"<pre><code>withFields(fields)\n</code></pre>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldswithfieldsmixin","title":"fn spec.rules.validate.manifests.ignoreFields.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldswithobjects","title":"fn spec.rules.validate.manifests.ignoreFields.withObjects","text":"<pre><code>withObjects(objects)\n</code></pre>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldswithobjectsmixin","title":"fn spec.rules.validate.manifests.ignoreFields.withObjectsMixin","text":"<pre><code>withObjectsMixin(objects)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatemanifestsignorefieldsobjects","title":"obj spec.rules.validate.manifests.ignoreFields.objects","text":""},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithgroup","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withGroup","text":"<pre><code>withGroup(group)\n</code></pre>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithkind","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithname","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithnamespace","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithversion","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withVersion","text":"<pre><code>withVersion(version)\n</code></pre>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatepodsecurity","title":"obj spec.rules.validate.podSecurity","text":"<p>\"PodSecurity applies exemptions for Kubernetes Pod Security admission by specifying exclusions for Pod Security Standards controls.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatepodsecuritywithexclude","title":"fn spec.rules.validate.podSecurity.withExclude","text":"<pre><code>withExclude(exclude)\n</code></pre> <p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatepodsecuritywithexcludemixin","title":"fn spec.rules.validate.podSecurity.withExcludeMixin","text":"<pre><code>withExcludeMixin(exclude)\n</code></pre> <p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatepodsecuritywithlevel","title":"fn spec.rules.validate.podSecurity.withLevel","text":"<pre><code>withLevel(level)\n</code></pre> <p>\"Level defines the Pod Security Standard level to be applied to workloads. Allowed values are privileged, baseline, and restricted.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatepodsecuritywithversion","title":"fn spec.rules.validate.podSecurity.withVersion","text":"<pre><code>withVersion(version)\n</code></pre> <p>\"Version defines the Pod Security Standard versions that Kubernetes supports. Allowed values are v1.19, v1.20, v1.21, v1.22, v1.23, v1.24, v1.25, latest. Defaults to latest.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesvalidatepodsecurityexclude","title":"obj spec.rules.validate.podSecurity.exclude","text":"<p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatepodsecurityexcludewithcontrolname","title":"fn spec.rules.validate.podSecurity.exclude.withControlName","text":"<pre><code>withControlName(controlName)\n</code></pre> <p>\"ControlName specifies the name of the Pod Security Standard control. See: https://kubernetes.io/docs/concepts/security/pod-security-standards/\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatepodsecurityexcludewithimages","title":"fn spec.rules.validate.podSecurity.exclude.withImages","text":"<pre><code>withImages(images)\n</code></pre> <p>\"Images selects matching containers and applies the container level PSS. Each image is the image name consisting of the registry address, repository, image, and tag. Empty list matches no containers, PSS checks are applied at the pod level only. Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesvalidatepodsecurityexcludewithimagesmixin","title":"fn spec.rules.validate.podSecurity.exclude.withImagesMixin","text":"<pre><code>withImagesMixin(images)\n</code></pre> <p>\"Images selects matching containers and applies the container level PSS. Each image is the image name consisting of the registry address, repository, image, and tag. Empty list matches no containers, PSS checks are applied at the pod level only. Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimages","title":"obj spec.rules.verifyImages","text":"<p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithattestations","title":"fn spec.rules.verifyImages.withAttestations","text":"<pre><code>withAttestations(attestations)\n</code></pre> <p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithattestationsmixin","title":"fn spec.rules.verifyImages.withAttestationsMixin","text":"<pre><code>withAttestationsMixin(attestations)\n</code></pre> <p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithattestors","title":"fn spec.rules.verifyImages.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithattestorsmixin","title":"fn spec.rules.verifyImages.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithimagereferences","title":"fn spec.rules.verifyImages.withImageReferences","text":"<pre><code>withImageReferences(imageReferences)\n</code></pre> <p>\"ImageReferences is a list of matching image reference patterns. At least one pattern in the list must match the image for the rule to apply. Each image reference consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest). Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithimagereferencesmixin","title":"fn spec.rules.verifyImages.withImageReferencesMixin","text":"<pre><code>withImageReferencesMixin(imageReferences)\n</code></pre> <p>\"ImageReferences is a list of matching image reference patterns. At least one pattern in the list must match the image for the rule to apply. Each image reference consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest). Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithmutatedigest","title":"fn spec.rules.verifyImages.withMutateDigest","text":"<pre><code>withMutateDigest(mutateDigest)\n</code></pre> <p>\"MutateDigest enables replacement of image tags with digests. Defaults to true.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithrepository","title":"fn spec.rules.verifyImages.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule. If specified Repository will override the default OCI image repository configured for the installation. The repository can also be overridden per Attestor or Attestation.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithrequired","title":"fn spec.rules.verifyImages.withRequired","text":"<pre><code>withRequired(required)\n</code></pre> <p>\"Required validates that images are verified i.e. have matched passed a signature or attestation check.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimageswithverifydigest","title":"fn spec.rules.verifyImages.withVerifyDigest","text":"<pre><code>withVerifyDigest(verifyDigest)\n</code></pre> <p>\"VerifyDigest validates that images have a digest.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestations","title":"obj spec.rules.verifyImages.attestations","text":"<p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationswithattestors","title":"fn spec.rules.verifyImages.attestations.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specify the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationswithattestorsmixin","title":"fn spec.rules.verifyImages.attestations.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specify the required attestors (i.e. authorities)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationswithconditions","title":"fn spec.rules.verifyImages.attestations.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationswithconditionsmixin","title":"fn spec.rules.verifyImages.attestations.withConditionsMixin","text":"<pre><code>withConditionsMixin(conditions)\n</code></pre> <p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationswithpredicatetype","title":"fn spec.rules.verifyImages.attestations.withPredicateType","text":"<pre><code>withPredicateType(predicateType)\n</code></pre> <p>\"PredicateType defines the type of Predicate contained within the Statement.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestors","title":"obj spec.rules.verifyImages.attestations.attestors","text":"<p>\"Attestors specify the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorswithcount","title":"fn spec.rules.verifyImages.attestations.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorswithentries","title":"fn spec.rules.verifyImages.attestations.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorswithentriesmixin","title":"fn spec.rules.verifyImages.attestations.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentries","title":"obj spec.rules.verifyImages.attestations.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieswithannotations","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieswithannotationsmixin","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieswithattestor","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested AttestorSet used to specify a more complex set of match authorities\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieswithrepository","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentriescertificates","title":"obj spec.rules.verifyImages.attestations.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentriescertificateswithcert","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Certificate is an optional PEM encoded public certificate.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentriescertificateswithcertchain","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertificateChain is an optional PEM encoded set of certificates used to verify\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentriescertificatesrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeyless","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithissuer","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithroots","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithsubject","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeylessrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked and a root certificate chain is expected instead. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeys","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithkms","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithpublickeys","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeysrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsattestorsentrieskeyssecret","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyssecretwithname","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsconditions","title":"obj spec.rules.verifyImages.attestations.conditions","text":"<p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionswithall","title":"fn spec.rules.verifyImages.attestations.conditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionswithallmixin","title":"fn spec.rules.verifyImages.attestations.conditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionswithany","title":"fn spec.rules.verifyImages.attestations.conditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionswithanymixin","title":"fn spec.rules.verifyImages.attestations.conditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsconditionsall","title":"obj spec.rules.verifyImages.attestations.conditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsallwithkey","title":"fn spec.rules.verifyImages.attestations.conditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsallwithoperator","title":"fn spec.rules.verifyImages.attestations.conditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsallwithvalue","title":"fn spec.rules.verifyImages.attestations.conditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestationsconditionsany","title":"obj spec.rules.verifyImages.attestations.conditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsanywithkey","title":"fn spec.rules.verifyImages.attestations.conditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsanywithoperator","title":"fn spec.rules.verifyImages.attestations.conditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestationsconditionsanywithvalue","title":"fn spec.rules.verifyImages.attestations.conditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestors","title":"obj spec.rules.verifyImages.attestors","text":"<p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorswithcount","title":"fn spec.rules.verifyImages.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorswithentries","title":"fn spec.rules.verifyImages.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorswithentriesmixin","title":"fn spec.rules.verifyImages.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestorsentries","title":"obj spec.rules.verifyImages.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieswithannotations","title":"fn spec.rules.verifyImages.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieswithannotationsmixin","title":"fn spec.rules.verifyImages.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieswithattestor","title":"fn spec.rules.verifyImages.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested AttestorSet used to specify a more complex set of match authorities\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieswithrepository","title":"fn spec.rules.verifyImages.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestorsentriescertificates","title":"obj spec.rules.verifyImages.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentriescertificateswithcert","title":"fn spec.rules.verifyImages.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Certificate is an optional PEM encoded public certificate.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentriescertificateswithcertchain","title":"fn spec.rules.verifyImages.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertificateChain is an optional PEM encoded set of certificates used to verify\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestorsentriescertificatesrekor","title":"obj spec.rules.verifyImages.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeyless","title":"obj spec.rules.verifyImages.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylesswithissuer","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylesswithroots","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylesswithsubject","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeylessrekor","title":"obj spec.rules.verifyImages.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked and a root certificate chain is expected instead. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeys","title":"obj spec.rules.verifyImages.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeyswithkms","title":"fn spec.rules.verifyImages.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeyswithpublickeys","title":"fn spec.rules.verifyImages.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.verifyImages.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeysrekor","title":"obj spec.rules.verifyImages.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeysrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specrulesverifyimagesattestorsentrieskeyssecret","title":"obj spec.rules.verifyImages.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeyssecretwithname","title":"fn spec.rules.verifyImages.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specrulesverifyimagesattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.verifyImages.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#obj-specvalidationfailureactionoverrides","title":"obj spec.validationFailureActionOverrides","text":"<p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specvalidationfailureactionoverrideswithaction","title":"fn spec.validationFailureActionOverrides.withAction","text":"<pre><code>withAction(action)\n</code></pre> <p>\"ValidationFailureAction defines the policy validation failure action\"</p>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specvalidationfailureactionoverrideswithnamespaces","title":"fn spec.validationFailureActionOverrides.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"1.9/kyverno/v2beta1/clusterPolicy/#fn-specvalidationfailureactionoverrideswithnamespacesmixin","title":"fn spec.validationFailureActionOverrides.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/","title":"kyverno.v2beta1.policy","text":"<p>\"Policy declares validation, mutation, and generation behaviors for matching resources. See: https://kyverno.io/docs/writing-policies/ for more information.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withApplyRules(applyRules)</code></li> <li><code>fn withBackground(background)</code></li> <li><code>fn withFailurePolicy(failurePolicy)</code></li> <li><code>fn withGenerateExistingOnPolicyUpdate(generateExistingOnPolicyUpdate)</code></li> <li><code>fn withMutateExistingOnPolicyUpdate(mutateExistingOnPolicyUpdate)</code></li> <li><code>fn withRules(rules)</code></li> <li><code>fn withRulesMixin(rules)</code></li> <li><code>fn withSchemaValidation(schemaValidation)</code></li> <li><code>fn withValidationFailureAction(validationFailureAction)</code></li> <li><code>fn withValidationFailureActionOverrides(validationFailureActionOverrides)</code></li> <li><code>fn withValidationFailureActionOverridesMixin(validationFailureActionOverrides)</code></li> <li><code>fn withWebhookTimeoutSeconds(webhookTimeoutSeconds)</code></li> <li><code>obj spec.rules</code><ul> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withImageExtractors(imageExtractors)</code></li> <li><code>fn withImageExtractorsMixin(imageExtractors)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withVerifyImages(verifyImages)</code></li> <li><code>fn withVerifyImagesMixin(verifyImages)</code></li> <li><code>obj spec.rules.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.context.apiCall</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> </ul> </li> <li><code>obj spec.rules.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> </ul> </li> <li><code>obj spec.rules.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.exclude.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.exclude.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.exclude.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.exclude.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.exclude.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.exclude.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.generate</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withData(data)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withSynchronize(synchronize)</code></li> <li><code>obj spec.rules.generate.clone</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.generate.cloneList</code><ul> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>obj spec.rules.generate.cloneList.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.generate.cloneList.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.match.all</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.all.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.match.all.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.all.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.all.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.all.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.all.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any</code><ul> <li><code>fn withClusterRoles(clusterRoles)</code></li> <li><code>fn withClusterRolesMixin(clusterRoles)</code></li> <li><code>fn withRoles(roles)</code></li> <li><code>fn withRolesMixin(roles)</code></li> <li><code>fn withSubjects(subjects)</code></li> <li><code>fn withSubjectsMixin(subjects)</code></li> <li><code>obj spec.rules.match.any.resources</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withKinds(kinds)</code></li> <li><code>fn withKindsMixin(kinds)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNames(names)</code></li> <li><code>fn withNamesMixin(names)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>obj spec.rules.match.any.resources.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.any.resources.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any.resources.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.rules.match.any.resources.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.match.any.subjects</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate</code><ul> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withForeachMixin(foreach)</code></li> <li><code>fn withPatchStrategicMerge(patchStrategicMerge)</code></li> <li><code>fn withPatchesJson6902(patchesJson6902)</code></li> <li><code>fn withTargets(targets)</code></li> <li><code>fn withTargetsMixin(targets)</code></li> <li><code>obj spec.rules.mutate.foreach</code><ul> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withList(list)</code></li> <li><code>fn withPatchStrategicMerge(patchStrategicMerge)</code></li> <li><code>fn withPatchesJson6902(patchesJson6902)</code></li> <li><code>obj spec.rules.mutate.foreach.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.mutate.foreach.context.apiCall</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.mutate.foreach.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.mutate.foreach.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.mutate.targets</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate</code><ul> <li><code>fn withAnyPattern(anyPattern)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withForeachMixin(foreach)</code></li> <li><code>fn withMessage(message)</code></li> <li><code>fn withPattern(pattern)</code></li> <li><code>obj spec.rules.validate.deny</code><ul> <li><code>obj spec.rules.validate.deny.conditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.validate.deny.conditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.validate.deny.conditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach</code><ul> <li><code>fn withAnyPattern(anyPattern)</code></li> <li><code>fn withContext(context)</code></li> <li><code>fn withContextMixin(context)</code></li> <li><code>fn withElementScope(elementScope)</code></li> <li><code>fn withForeach(foreach)</code></li> <li><code>fn withList(list)</code></li> <li><code>fn withPattern(pattern)</code></li> <li><code>obj spec.rules.validate.foreach.context</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.rules.validate.foreach.context.apiCall</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withUrlPath(urlPath)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.configMap</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.imageRegistry</code><ul> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withReference(reference)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.context.variable</code><ul> <li><code>fn withDefault(default)</code></li> <li><code>fn withJmesPath(jmesPath)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.foreach.deny</code><ul> <li><code>fn withConditions(conditions)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.preconditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.validate.foreach.preconditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.validate.foreach.preconditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests</code><ul> <li><code>fn withAnnotationDomain(annotationDomain)</code></li> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withIgnoreFields(ignoreFields)</code></li> <li><code>fn withIgnoreFieldsMixin(ignoreFields)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.validate.manifests.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.certificates.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keyless.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.manifests.dryRun</code><ul> <li><code>fn withEnable(enable)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.rules.validate.manifests.ignoreFields</code><ul> <li><code>fn withFields(fields)</code></li> <li><code>fn withFieldsMixin(fields)</code></li> <li><code>fn withObjects(objects)</code></li> <li><code>fn withObjectsMixin(objects)</code></li> <li><code>obj spec.rules.validate.manifests.ignoreFields.objects</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withVersion(version)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.validate.podSecurity</code><ul> <li><code>fn withExclude(exclude)</code></li> <li><code>fn withExcludeMixin(exclude)</code></li> <li><code>fn withLevel(level)</code></li> <li><code>fn withVersion(version)</code></li> <li><code>obj spec.rules.validate.podSecurity.exclude</code><ul> <li><code>fn withControlName(controlName)</code></li> <li><code>fn withImages(images)</code></li> <li><code>fn withImagesMixin(images)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages</code><ul> <li><code>fn withAttestations(attestations)</code></li> <li><code>fn withAttestationsMixin(attestations)</code></li> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withImageReferences(imageReferences)</code></li> <li><code>fn withImageReferencesMixin(imageReferences)</code></li> <li><code>fn withMutateDigest(mutateDigest)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>fn withRequired(required)</code></li> <li><code>fn withVerifyDigest(verifyDigest)</code></li> <li><code>obj spec.rules.verifyImages.attestations</code><ul> <li><code>fn withAttestors(attestors)</code></li> <li><code>fn withAttestorsMixin(attestors)</code></li> <li><code>fn withConditions(conditions)</code></li> <li><code>fn withConditionsMixin(conditions)</code></li> <li><code>fn withPredicateType(predicateType)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.conditions</code><ul> <li><code>fn withAll(all)</code></li> <li><code>fn withAllMixin(all)</code></li> <li><code>fn withAny(any)</code></li> <li><code>fn withAnyMixin(any)</code></li> <li><code>obj spec.rules.verifyImages.attestations.conditions.all</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestations.conditions.any</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors</code><ul> <li><code>fn withCount(count)</code></li> <li><code>fn withEntries(entries)</code></li> <li><code>fn withEntriesMixin(entries)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withAttestor(attestor)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.certificates</code><ul> <li><code>fn withCert(cert)</code></li> <li><code>fn withCertChain(certChain)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.certificates.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keyless</code><ul> <li><code>fn withAdditionalExtensions(additionalExtensions)</code></li> <li><code>fn withAdditionalExtensionsMixin(additionalExtensions)</code></li> <li><code>fn withIssuer(issuer)</code></li> <li><code>fn withRoots(roots)</code></li> <li><code>fn withSubject(subject)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.keyless.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys</code><ul> <li><code>fn withKms(kms)</code></li> <li><code>fn withPublicKeys(publicKeys)</code></li> <li><code>fn withSignatureAlgorithm(signatureAlgorithm)</code></li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys.rekor</code><ul> <li><code>fn withUrl(url)</code></li> </ul> </li> <li><code>obj spec.rules.verifyImages.attestors.entries.keys.secret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.validationFailureActionOverrides</code><ul> <li><code>fn withAction(action)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.9/kyverno/v2beta1/policy/#fields","title":"Fields","text":""},{"location":"1.9/kyverno/v2beta1/policy/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of Policy</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-spec","title":"obj spec","text":"<p>\"Spec defines policy behaviors and contains one or more rules.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specwithapplyrules","title":"fn spec.withApplyRules","text":"<pre><code>withApplyRules(applyRules)\n</code></pre> <p>\"ApplyRules controls how rules in a policy are applied. Rule are processed in the order of declaration. When set to <code>One</code> processing stops after a rule has been applied i.e. the rule matches and results in a pass, fail, or error. When set to <code>All</code> all rules in the policy are processed. The default is <code>All</code>.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specwithbackground","title":"fn spec.withBackground","text":"<pre><code>withBackground(background)\n</code></pre> <p>\"Background controls if rules are applied to existing resources during a background scan. Optional. Default value is \\\"true\\\". The value must be set to \\\"false\\\" if the policy rule uses variables that are only available in the admission review request (e.g. user name).\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specwithfailurepolicy","title":"fn spec.withFailurePolicy","text":"<pre><code>withFailurePolicy(failurePolicy)\n</code></pre> <p>\"FailurePolicy defines how unexpected policy errors and webhook response timeout errors are handled. Rules within the same policy share the same failure behavior. Allowed values are Ignore or Fail. Defaults to Fail.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specwithgenerateexistingonpolicyupdate","title":"fn spec.withGenerateExistingOnPolicyUpdate","text":"<pre><code>withGenerateExistingOnPolicyUpdate(generateExistingOnPolicyUpdate)\n</code></pre> <p>\"GenerateExistingOnPolicyUpdate controls whether to trigger generate rule in existing resources If is set to \\\"true\\\" generate rule will be triggered and applied to existing matched resources. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specwithmutateexistingonpolicyupdate","title":"fn spec.withMutateExistingOnPolicyUpdate","text":"<pre><code>withMutateExistingOnPolicyUpdate(mutateExistingOnPolicyUpdate)\n</code></pre> <p>\"MutateExistingOnPolicyUpdate controls if a mutateExisting policy is applied on policy events. Default value is \\\"false\\\".\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specwithrules","title":"fn spec.withRules","text":"<pre><code>withRules(rules)\n</code></pre> <p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specwithrulesmixin","title":"fn spec.withRulesMixin","text":"<pre><code>withRulesMixin(rules)\n</code></pre> <p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specwithschemavalidation","title":"fn spec.withSchemaValidation","text":"<pre><code>withSchemaValidation(schemaValidation)\n</code></pre> <p>\"SchemaValidation skips validation checks for policies as well as patched resources. Optional. The default value is set to \\\"true\\\", it must be set to \\\"false\\\" to disable the validation checks.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specwithvalidationfailureaction","title":"fn spec.withValidationFailureAction","text":"<pre><code>withValidationFailureAction(validationFailureAction)\n</code></pre> <p>\"ValidationFailureAction defines if a validation policy rule violation should block the admission review request (enforce), or allow (audit) the admission review request and report an error in a policy report. Optional. Allowed values are audit or enforce. The default value is \\\"Audit\\\".\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specwithvalidationfailureactionoverrides","title":"fn spec.withValidationFailureActionOverrides","text":"<pre><code>withValidationFailureActionOverrides(validationFailureActionOverrides)\n</code></pre> <p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specwithvalidationfailureactionoverridesmixin","title":"fn spec.withValidationFailureActionOverridesMixin","text":"<pre><code>withValidationFailureActionOverridesMixin(validationFailureActionOverrides)\n</code></pre> <p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specwithwebhooktimeoutseconds","title":"fn spec.withWebhookTimeoutSeconds","text":"<pre><code>withWebhookTimeoutSeconds(webhookTimeoutSeconds)\n</code></pre> <p>\"WebhookTimeoutSeconds specifies the maximum time in seconds allowed to apply this policy. After the configured time expires, the admission request may fail, or may simply ignore the policy results, based on the failure policy. The default timeout is 10s, the value must be between 1 and 30 seconds.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrules","title":"obj spec.rules","text":"<p>\"Rules is a list of Rule instances. A Policy contains multiple rules and each rule can validate, mutate, or generate resources.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specruleswithcontext","title":"fn spec.rules.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specruleswithcontextmixin","title":"fn spec.rules.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specruleswithimageextractors","title":"fn spec.rules.withImageExtractors","text":"<pre><code>withImageExtractors(imageExtractors)\n</code></pre> <p>\"ImageExtractors defines a mapping from kinds to ImageExtractorConfigs. This config is only valid for verifyImages rules.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specruleswithimageextractorsmixin","title":"fn spec.rules.withImageExtractorsMixin","text":"<pre><code>withImageExtractorsMixin(imageExtractors)\n</code></pre> <p>\"ImageExtractors defines a mapping from kinds to ImageExtractorConfigs. This config is only valid for verifyImages rules.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specruleswithname","title":"fn spec.rules.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is a label to identify the rule, It must be unique within the policy.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specruleswithverifyimages","title":"fn spec.rules.withVerifyImages","text":"<pre><code>withVerifyImages(verifyImages)\n</code></pre> <p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specruleswithverifyimagesmixin","title":"fn spec.rules.withVerifyImagesMixin","text":"<pre><code>withVerifyImagesMixin(verifyImages)\n</code></pre> <p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulescontext","title":"obj spec.rules.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulescontextwithname","title":"fn spec.rules.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulescontextapicall","title":"obj spec.rules.context.apiCall","text":"<p>\"APICall defines an HTTP request to the Kubernetes API server. The JSON data retrieved is stored in the context.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulescontextapicallwithjmespath","title":"fn spec.rules.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the API server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response to the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulescontextapicallwithurlpath","title":"fn spec.rules.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulescontextconfigmap","title":"obj spec.rules.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulescontextconfigmapwithname","title":"fn spec.rules.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulescontextconfigmapwithnamespace","title":"fn spec.rules.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulescontextimageregistry","title":"obj spec.rules.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulescontextimageregistrywithjmespath","title":"fn spec.rules.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulescontextimageregistrywithreference","title":"fn spec.rules.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulescontextvariable","title":"obj spec.rules.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulescontextvariablewithdefault","title":"fn spec.rules.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulescontextvariablewithjmespath","title":"fn spec.rules.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulescontextvariablewithvalue","title":"fn spec.rules.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesexclude","title":"obj spec.rules.exclude","text":"<p>\"ExcludeResources defines when this policy rule should not be applied. The exclude criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the name or role.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludewithall","title":"fn spec.rules.exclude.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludewithallmixin","title":"fn spec.rules.exclude.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludewithany","title":"fn spec.rules.exclude.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludewithanymixin","title":"fn spec.rules.exclude.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesexcludeall","title":"obj spec.rules.exclude.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallwithclusterroles","title":"fn spec.rules.exclude.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallwithclusterrolesmixin","title":"fn spec.rules.exclude.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallwithroles","title":"fn spec.rules.exclude.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallwithrolesmixin","title":"fn spec.rules.exclude.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallwithsubjects","title":"fn spec.rules.exclude.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallwithsubjectsmixin","title":"fn spec.rules.exclude.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesexcludeallresources","title":"obj spec.rules.exclude.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourceswithannotations","title":"fn spec.rules.exclude.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourceswithannotationsmixin","title":"fn spec.rules.exclude.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourceswithkinds","title":"fn spec.rules.exclude.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourceswithkindsmixin","title":"fn spec.rules.exclude.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourceswithname","title":"fn spec.rules.exclude.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourceswithnames","title":"fn spec.rules.exclude.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourceswithnamesmixin","title":"fn spec.rules.exclude.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourceswithnamespaces","title":"fn spec.rules.exclude.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourceswithnamespacesmixin","title":"fn spec.rules.exclude.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesexcludeallresourcesnamespaceselector","title":"obj spec.rules.exclude.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesexcludeallresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesexcludeallresourcesselector","title":"obj spec.rules.exclude.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesexcludeallresourcesselectormatchexpressions","title":"obj spec.rules.exclude.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesexcludeallsubjects","title":"obj spec.rules.exclude.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallsubjectswithapigroup","title":"fn spec.rules.exclude.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallsubjectswithkind","title":"fn spec.rules.exclude.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallsubjectswithname","title":"fn spec.rules.exclude.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeallsubjectswithnamespace","title":"fn spec.rules.exclude.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesexcludeany","title":"obj spec.rules.exclude.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanywithclusterroles","title":"fn spec.rules.exclude.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanywithclusterrolesmixin","title":"fn spec.rules.exclude.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanywithroles","title":"fn spec.rules.exclude.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanywithrolesmixin","title":"fn spec.rules.exclude.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanywithsubjects","title":"fn spec.rules.exclude.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanywithsubjectsmixin","title":"fn spec.rules.exclude.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesexcludeanyresources","title":"obj spec.rules.exclude.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourceswithannotations","title":"fn spec.rules.exclude.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourceswithannotationsmixin","title":"fn spec.rules.exclude.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourceswithkinds","title":"fn spec.rules.exclude.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourceswithkindsmixin","title":"fn spec.rules.exclude.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourceswithname","title":"fn spec.rules.exclude.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourceswithnames","title":"fn spec.rules.exclude.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourceswithnamesmixin","title":"fn spec.rules.exclude.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourceswithnamespaces","title":"fn spec.rules.exclude.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourceswithnamespacesmixin","title":"fn spec.rules.exclude.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesexcludeanyresourcesnamespaceselector","title":"obj spec.rules.exclude.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesexcludeanyresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.exclude.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesexcludeanyresourcesselector","title":"obj spec.rules.exclude.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesselectorwithmatchexpressions","title":"fn spec.rules.exclude.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.exclude.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesselectorwithmatchlabels","title":"fn spec.rules.exclude.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.exclude.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesexcludeanyresourcesselectormatchexpressions","title":"obj spec.rules.exclude.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithkey","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.exclude.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesexcludeanysubjects","title":"obj spec.rules.exclude.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanysubjectswithapigroup","title":"fn spec.rules.exclude.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanysubjectswithkind","title":"fn spec.rules.exclude.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanysubjectswithname","title":"fn spec.rules.exclude.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesexcludeanysubjectswithnamespace","title":"fn spec.rules.exclude.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesgenerate","title":"obj spec.rules.generate","text":"<p>\"Generation is used to create new resources.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesgeneratewithapiversion","title":"fn spec.rules.generate.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesgeneratewithdata","title":"fn spec.rules.generate.withData","text":"<pre><code>withData(data)\n</code></pre> <p>\"Data provides the resource declaration used to populate each generated resource. At most one of Data or Clone must be specified. If neither are provided, the generated resource will be created with default data only.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesgeneratewithkind","title":"fn spec.rules.generate.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesgeneratewithname","title":"fn spec.rules.generate.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesgeneratewithnamespace","title":"fn spec.rules.generate.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesgeneratewithsynchronize","title":"fn spec.rules.generate.withSynchronize","text":"<pre><code>withSynchronize(synchronize)\n</code></pre> <p>\"Synchronize controls if generated resources should be kept in-sync with their source resource. If Synchronize is set to \\\"true\\\" changes to generated resources will be overwritten with resource data from Data or the resource specified in the Clone declaration. Optional. Defaults to \\\"false\\\" if not specified.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesgenerateclone","title":"obj spec.rules.generate.clone","text":"<p>\"Clone specifies the source resource used to populate each generated resource. At most one of Data or Clone can be specified. If neither are provided, the generated resource will be created with default data only.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesgenerateclonewithname","title":"fn spec.rules.generate.clone.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies name of the resource.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesgenerateclonewithnamespace","title":"fn spec.rules.generate.clone.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies source resource namespace.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesgenerateclonelist","title":"obj spec.rules.generate.cloneList","text":"<p>\"CloneList specifies the list of source resource used to populate each generated resource.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistwithkinds","title":"fn spec.rules.generate.cloneList.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistwithkindsmixin","title":"fn spec.rules.generate.cloneList.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistwithnamespace","title":"fn spec.rules.generate.cloneList.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies source resource namespace.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesgenerateclonelistselector","title":"obj spec.rules.generate.cloneList.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code>. wildcard characters are not supported.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistselectorwithmatchexpressions","title":"fn spec.rules.generate.cloneList.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistselectorwithmatchexpressionsmixin","title":"fn spec.rules.generate.cloneList.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistselectorwithmatchlabels","title":"fn spec.rules.generate.cloneList.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistselectorwithmatchlabelsmixin","title":"fn spec.rules.generate.cloneList.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesgenerateclonelistselectormatchexpressions","title":"obj spec.rules.generate.cloneList.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistselectormatchexpressionswithkey","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistselectormatchexpressionswithoperator","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistselectormatchexpressionswithvalues","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesgenerateclonelistselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.generate.cloneList.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmatch","title":"obj spec.rules.match","text":"<p>\"MatchResources defines when this policy rule should be applied. The match criteria can include resource information (e.g. kind, name, namespace, labels) and admission review request information like the user name or role. At least one kind is required.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchwithall","title":"fn spec.rules.match.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchwithallmixin","title":"fn spec.rules.match.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"All allows specifying resources which will be ANDed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchwithany","title":"fn spec.rules.match.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchwithanymixin","title":"fn spec.rules.match.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"Any allows specifying resources which will be ORed\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmatchall","title":"obj spec.rules.match.all","text":"<p>\"All allows specifying resources which will be ANDed\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallwithclusterroles","title":"fn spec.rules.match.all.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallwithclusterrolesmixin","title":"fn spec.rules.match.all.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallwithroles","title":"fn spec.rules.match.all.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallwithrolesmixin","title":"fn spec.rules.match.all.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallwithsubjects","title":"fn spec.rules.match.all.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallwithsubjectsmixin","title":"fn spec.rules.match.all.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmatchallresources","title":"obj spec.rules.match.all.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourceswithannotations","title":"fn spec.rules.match.all.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourceswithannotationsmixin","title":"fn spec.rules.match.all.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourceswithkinds","title":"fn spec.rules.match.all.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourceswithkindsmixin","title":"fn spec.rules.match.all.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourceswithname","title":"fn spec.rules.match.all.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourceswithnames","title":"fn spec.rules.match.all.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourceswithnamesmixin","title":"fn spec.rules.match.all.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourceswithnamespaces","title":"fn spec.rules.match.all.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourceswithnamespacesmixin","title":"fn spec.rules.match.all.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmatchallresourcesnamespaceselector","title":"obj spec.rules.match.all.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmatchallresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.all.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.all.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmatchallresourcesselector","title":"obj spec.rules.match.all.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.all.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.all.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesselectorwithmatchlabels","title":"fn spec.rules.match.all.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.all.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmatchallresourcesselectormatchexpressions","title":"obj spec.rules.match.all.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.all.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmatchallsubjects","title":"obj spec.rules.match.all.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallsubjectswithapigroup","title":"fn spec.rules.match.all.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallsubjectswithkind","title":"fn spec.rules.match.all.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallsubjectswithname","title":"fn spec.rules.match.all.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchallsubjectswithnamespace","title":"fn spec.rules.match.all.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmatchany","title":"obj spec.rules.match.any","text":"<p>\"Any allows specifying resources which will be ORed\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanywithclusterroles","title":"fn spec.rules.match.any.withClusterRoles","text":"<pre><code>withClusterRoles(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanywithclusterrolesmixin","title":"fn spec.rules.match.any.withClusterRolesMixin","text":"<pre><code>withClusterRolesMixin(clusterRoles)\n</code></pre> <p>\"ClusterRoles is the list of cluster-wide role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanywithroles","title":"fn spec.rules.match.any.withRoles","text":"<pre><code>withRoles(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanywithrolesmixin","title":"fn spec.rules.match.any.withRolesMixin","text":"<pre><code>withRolesMixin(roles)\n</code></pre> <p>\"Roles is the list of namespaced role names for the user.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanywithsubjects","title":"fn spec.rules.match.any.withSubjects","text":"<pre><code>withSubjects(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanywithsubjectsmixin","title":"fn spec.rules.match.any.withSubjectsMixin","text":"<pre><code>withSubjectsMixin(subjects)\n</code></pre> <p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmatchanyresources","title":"obj spec.rules.match.any.resources","text":"<p>\"ResourceDescription contains information about the resource being created or modified.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourceswithannotations","title":"fn spec.rules.match.any.resources.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourceswithannotationsmixin","title":"fn spec.rules.match.any.resources.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is a  map of annotations (key-value pairs of type string). Annotation keys and values support the wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (matches at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourceswithkinds","title":"fn spec.rules.match.any.resources.withKinds","text":"<pre><code>withKinds(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourceswithkindsmixin","title":"fn spec.rules.match.any.resources.withKindsMixin","text":"<pre><code>withKindsMixin(kinds)\n</code></pre> <p>\"Kinds is a list of resource kinds.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourceswithname","title":"fn spec.rules.match.any.resources.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the name of the resource. The name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character). NOTE: \\\"Name\\\" is being deprecated in favor of \\\"Names\\\".\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourceswithnames","title":"fn spec.rules.match.any.resources.withNames","text":"<pre><code>withNames(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourceswithnamesmixin","title":"fn spec.rules.match.any.resources.withNamesMixin","text":"<pre><code>withNamesMixin(names)\n</code></pre> <p>\"Names are the names of the resources. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourceswithnamespaces","title":"fn spec.rules.match.any.resources.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourceswithnamespacesmixin","title":"fn spec.rules.match.any.resources.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces is a list of namespaces names. Each name supports wildcard characters \\\"*\\\" (matches zero or many characters) and \\\"?\\\" (at least one character).\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmatchanyresourcesnamespaceselector","title":"obj spec.rules.match.any.resources.namespaceSelector","text":"<p>\"NamespaceSelector is a label selector for the resource namespace. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character).Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchexpressions","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchlabels","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesnamespaceselectorwithmatchlabelsmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmatchanyresourcesnamespaceselectormatchexpressions","title":"obj spec.rules.match.any.resources.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithkey","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithoperator","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithvalues","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.any.resources.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmatchanyresourcesselector","title":"obj spec.rules.match.any.resources.selector","text":"<p>\"Selector is a label selector. Label keys and values in <code>matchLabels</code> support the wildcard characters <code>*</code> (matches zero or many characters) and <code>?</code> (matches one character). Wildcards allows writing label selectors like [\\\"storage.k8s.io/\\\": \\\"\\\"]. Note that using [\\\"\\\" : \\\"\\\"] matches any key and value but does not match an empty label set.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesselectorwithmatchexpressions","title":"fn spec.rules.match.any.resources.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesselectorwithmatchexpressionsmixin","title":"fn spec.rules.match.any.resources.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesselectorwithmatchlabels","title":"fn spec.rules.match.any.resources.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesselectorwithmatchlabelsmixin","title":"fn spec.rules.match.any.resources.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmatchanyresourcesselectormatchexpressions","title":"obj spec.rules.match.any.resources.selector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithkey","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithoperator","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithvalues","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanyresourcesselectormatchexpressionswithvaluesmixin","title":"fn spec.rules.match.any.resources.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmatchanysubjects","title":"obj spec.rules.match.any.subjects","text":"<p>\"Subjects is the list of subject names like users, user groups, and service accounts.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanysubjectswithapigroup","title":"fn spec.rules.match.any.subjects.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre> <p>\"APIGroup holds the API group of the referenced subject. Defaults to \\\"\\\" for ServiceAccount subjects. Defaults to \\\"rbac.authorization.k8s.io\\\" for User and Group subjects.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanysubjectswithkind","title":"fn spec.rules.match.any.subjects.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind of object being referenced. Values defined by this API group are \\\"User\\\", \\\"Group\\\", and \\\"ServiceAccount\\\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanysubjectswithname","title":"fn spec.rules.match.any.subjects.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the object being referenced.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmatchanysubjectswithnamespace","title":"fn spec.rules.match.any.subjects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace of the referenced object.  If the object kind is non-namespace, such as \\\"User\\\" or \\\"Group\\\", and this value is not empty the Authorizer should report an error.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmutate","title":"obj spec.rules.mutate","text":"<p>\"Mutation is used to modify matching resources.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutatewithforeach","title":"fn spec.rules.mutate.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutatewithforeachmixin","title":"fn spec.rules.mutate.withForeachMixin","text":"<pre><code>withForeachMixin(foreach)\n</code></pre> <p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutatewithpatchstrategicmerge","title":"fn spec.rules.mutate.withPatchStrategicMerge","text":"<pre><code>withPatchStrategicMerge(patchStrategicMerge)\n</code></pre> <p>\"PatchStrategicMerge is a strategic merge patch used to modify resources. See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutatewithpatchesjson6902","title":"fn spec.rules.mutate.withPatchesJson6902","text":"<pre><code>withPatchesJson6902(patchesJson6902)\n</code></pre> <p>\"PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources. See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutatewithtargets","title":"fn spec.rules.mutate.withTargets","text":"<pre><code>withTargets(targets)\n</code></pre> <p>\"Targets defines the target resources to be mutated.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutatewithtargetsmixin","title":"fn spec.rules.mutate.withTargetsMixin","text":"<pre><code>withTargetsMixin(targets)\n</code></pre> <p>\"Targets defines the target resources to be mutated.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmutateforeach","title":"obj spec.rules.mutate.foreach","text":"<p>\"ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachwithcontext","title":"fn spec.rules.mutate.foreach.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachwithcontextmixin","title":"fn spec.rules.mutate.foreach.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachwithforeach","title":"fn spec.rules.mutate.foreach.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"Foreach declares a nested foreach iterator\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachwithlist","title":"fn spec.rules.mutate.foreach.withList","text":"<pre><code>withList(list)\n</code></pre> <p>\"List specifies a JMESPath expression that results in one or more elements to which the validation logic is applied.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachwithpatchstrategicmerge","title":"fn spec.rules.mutate.foreach.withPatchStrategicMerge","text":"<pre><code>withPatchStrategicMerge(patchStrategicMerge)\n</code></pre> <p>\"PatchStrategicMerge is a strategic merge patch used to modify resources. See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachwithpatchesjson6902","title":"fn spec.rules.mutate.foreach.withPatchesJson6902","text":"<pre><code>withPatchesJson6902(patchesJson6902)\n</code></pre> <p>\"PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources. See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmutateforeachcontext","title":"obj spec.rules.mutate.foreach.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextwithname","title":"fn spec.rules.mutate.foreach.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmutateforeachcontextapicall","title":"obj spec.rules.mutate.foreach.context.apiCall","text":"<p>\"APICall defines an HTTP request to the Kubernetes API server. The JSON data retrieved is stored in the context.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextapicallwithjmespath","title":"fn spec.rules.mutate.foreach.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the API server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response to the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextapicallwithurlpath","title":"fn spec.rules.mutate.foreach.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmutateforeachcontextconfigmap","title":"obj spec.rules.mutate.foreach.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextconfigmapwithname","title":"fn spec.rules.mutate.foreach.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextconfigmapwithnamespace","title":"fn spec.rules.mutate.foreach.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmutateforeachcontextimageregistry","title":"obj spec.rules.mutate.foreach.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextimageregistrywithjmespath","title":"fn spec.rules.mutate.foreach.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextimageregistrywithreference","title":"fn spec.rules.mutate.foreach.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmutateforeachcontextvariable","title":"obj spec.rules.mutate.foreach.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextvariablewithdefault","title":"fn spec.rules.mutate.foreach.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextvariablewithjmespath","title":"fn spec.rules.mutate.foreach.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachcontextvariablewithvalue","title":"fn spec.rules.mutate.foreach.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmutateforeachpreconditions","title":"obj spec.rules.mutate.foreach.preconditions","text":"<p>\"AnyAllConditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionswithall","title":"fn spec.rules.mutate.foreach.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionswithallmixin","title":"fn spec.rules.mutate.foreach.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionswithany","title":"fn spec.rules.mutate.foreach.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionswithanymixin","title":"fn spec.rules.mutate.foreach.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmutateforeachpreconditionsall","title":"obj spec.rules.mutate.foreach.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionsallwithkey","title":"fn spec.rules.mutate.foreach.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionsallwithoperator","title":"fn spec.rules.mutate.foreach.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionsallwithvalue","title":"fn spec.rules.mutate.foreach.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmutateforeachpreconditionsany","title":"obj spec.rules.mutate.foreach.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionsanywithkey","title":"fn spec.rules.mutate.foreach.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionsanywithoperator","title":"fn spec.rules.mutate.foreach.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutateforeachpreconditionsanywithvalue","title":"fn spec.rules.mutate.foreach.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesmutatetargets","title":"obj spec.rules.mutate.targets","text":"<p>\"Targets defines the target resources to be mutated.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutatetargetswithapiversion","title":"fn spec.rules.mutate.targets.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre> <p>\"APIVersion specifies resource apiVersion.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutatetargetswithkind","title":"fn spec.rules.mutate.targets.withKind","text":"<pre><code>withKind(kind)\n</code></pre> <p>\"Kind specifies resource kind.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutatetargetswithname","title":"fn spec.rules.mutate.targets.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name specifies the resource name.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesmutatetargetswithnamespace","title":"fn spec.rules.mutate.targets.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace specifies resource namespace.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulespreconditions","title":"obj spec.rules.preconditions","text":"<p>\"Preconditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. A direct list of conditions (without <code>any</code> or <code>all</code> statements is supported for backwards compatibility but See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulespreconditionswithall","title":"fn spec.rules.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulespreconditionswithallmixin","title":"fn spec.rules.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulespreconditionswithany","title":"fn spec.rules.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulespreconditionswithanymixin","title":"fn spec.rules.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulespreconditionsall","title":"obj spec.rules.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulespreconditionsallwithkey","title":"fn spec.rules.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulespreconditionsallwithoperator","title":"fn spec.rules.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulespreconditionsallwithvalue","title":"fn spec.rules.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulespreconditionsany","title":"obj spec.rules.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulespreconditionsanywithkey","title":"fn spec.rules.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulespreconditionsanywithoperator","title":"fn spec.rules.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulespreconditionsanywithvalue","title":"fn spec.rules.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidate","title":"obj spec.rules.validate","text":"<p>\"Validation is used to validate matching resources.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatewithanypattern","title":"fn spec.rules.validate.withAnyPattern","text":"<pre><code>withAnyPattern(anyPattern)\n</code></pre> <p>\"AnyPattern specifies list of validation patterns. At least one of the patterns must be satisfied for the validation rule to succeed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatewithforeach","title":"fn spec.rules.validate.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatewithforeachmixin","title":"fn spec.rules.validate.withForeachMixin","text":"<pre><code>withForeachMixin(foreach)\n</code></pre> <p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatewithmessage","title":"fn spec.rules.validate.withMessage","text":"<pre><code>withMessage(message)\n</code></pre> <p>\"Message specifies a custom message to be displayed on failure.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatewithpattern","title":"fn spec.rules.validate.withPattern","text":"<pre><code>withPattern(pattern)\n</code></pre> <p>\"Pattern specifies an overlay-style pattern used to check resources.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidatedeny","title":"obj spec.rules.validate.deny","text":"<p>\"Deny defines conditions used to pass or fail a validation rule.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidatedenyconditions","title":"obj spec.rules.validate.deny.conditions","text":"<p>\"Multiple conditions can be declared under an <code>any</code> or <code>all</code> statement. A direct list of conditions (without <code>any</code> or <code>all</code> statements) is also supported for backwards compatibility See: https://kyverno.io/docs/writing-policies/validate/#deny-rules\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionswithall","title":"fn spec.rules.validate.deny.conditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionswithallmixin","title":"fn spec.rules.validate.deny.conditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionswithany","title":"fn spec.rules.validate.deny.conditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionswithanymixin","title":"fn spec.rules.validate.deny.conditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidatedenyconditionsall","title":"obj spec.rules.validate.deny.conditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionsallwithkey","title":"fn spec.rules.validate.deny.conditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionsallwithoperator","title":"fn spec.rules.validate.deny.conditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionsallwithvalue","title":"fn spec.rules.validate.deny.conditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidatedenyconditionsany","title":"obj spec.rules.validate.deny.conditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionsanywithkey","title":"fn spec.rules.validate.deny.conditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionsanywithoperator","title":"fn spec.rules.validate.deny.conditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatedenyconditionsanywithvalue","title":"fn spec.rules.validate.deny.conditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidateforeach","title":"obj spec.rules.validate.foreach","text":"<p>\"ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachwithanypattern","title":"fn spec.rules.validate.foreach.withAnyPattern","text":"<pre><code>withAnyPattern(anyPattern)\n</code></pre> <p>\"AnyPattern specifies list of validation patterns. At least one of the patterns must be satisfied for the validation rule to succeed.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachwithcontext","title":"fn spec.rules.validate.foreach.withContext","text":"<pre><code>withContext(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachwithcontextmixin","title":"fn spec.rules.validate.foreach.withContextMixin","text":"<pre><code>withContextMixin(context)\n</code></pre> <p>\"Context defines variables and data sources that can be used during rule execution.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachwithelementscope","title":"fn spec.rules.validate.foreach.withElementScope","text":"<pre><code>withElementScope(elementScope)\n</code></pre> <p>\"ElementScope specifies whether to use the current list element as the scope for validation. Defaults to \\\"true\\\" if not specified. When set to \\\"false\\\", \\\"request.object\\\" is used as the validation scope within the foreach block to allow referencing other elements in the subtree.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachwithforeach","title":"fn spec.rules.validate.foreach.withForeach","text":"<pre><code>withForeach(foreach)\n</code></pre> <p>\"Foreach declares a nested foreach iterator\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachwithlist","title":"fn spec.rules.validate.foreach.withList","text":"<pre><code>withList(list)\n</code></pre> <p>\"List specifies a JMESPath expression that results in one or more elements to which the validation logic is applied.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachwithpattern","title":"fn spec.rules.validate.foreach.withPattern","text":"<pre><code>withPattern(pattern)\n</code></pre> <p>\"Pattern specifies an overlay-style pattern used to check resources.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachcontext","title":"obj spec.rules.validate.foreach.context","text":"<p>\"Context defines variables and data sources that can be used during rule execution.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextwithname","title":"fn spec.rules.validate.foreach.context.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the variable name.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachcontextapicall","title":"obj spec.rules.validate.foreach.context.apiCall","text":"<p>\"APICall defines an HTTP request to the Kubernetes API server. The JSON data retrieved is stored in the context.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextapicallwithjmespath","title":"fn spec.rules.validate.foreach.context.apiCall.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the JSON response returned from the API server. For example a JMESPath of \\\"items | length(@)\\\" applied to the API server response to the URLPath \\\"/apis/apps/v1/deployments\\\" will return the total count of deployments across all namespaces.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextapicallwithurlpath","title":"fn spec.rules.validate.foreach.context.apiCall.withUrlPath","text":"<pre><code>withUrlPath(urlPath)\n</code></pre> <p>\"URLPath is the URL path to be used in the HTTP GET request to the Kubernetes API server (e.g. \\\"/api/v1/namespaces\\\" or  \\\"/apis/apps/v1/deployments\\\"). The format required is the same format used by the <code>kubectl get --raw</code> command.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachcontextconfigmap","title":"obj spec.rules.validate.foreach.context.configMap","text":"<p>\"ConfigMap is the ConfigMap reference.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextconfigmapwithname","title":"fn spec.rules.validate.foreach.context.configMap.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name is the ConfigMap name.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextconfigmapwithnamespace","title":"fn spec.rules.validate.foreach.context.configMap.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace is the ConfigMap namespace.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachcontextimageregistry","title":"obj spec.rules.validate.foreach.context.imageRegistry","text":"<p>\"ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image details.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextimageregistrywithjmespath","title":"fn spec.rules.validate.foreach.context.imageRegistry.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JSON Match Expression that can be used to transform the ImageData struct returned as a result of processing the image reference.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextimageregistrywithreference","title":"fn spec.rules.validate.foreach.context.imageRegistry.withReference","text":"<pre><code>withReference(reference)\n</code></pre> <p>\"Reference is image reference to a container image in the registry. Example: ghcr.io/kyverno/kyverno:latest\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachcontextvariable","title":"obj spec.rules.validate.foreach.context.variable","text":"<p>\"Variable defines an arbitrary JMESPath context variable that can be defined inline.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextvariablewithdefault","title":"fn spec.rules.validate.foreach.context.variable.withDefault","text":"<pre><code>withDefault(default)\n</code></pre> <p>\"Default is an optional arbitrary JSON object that the variable may take if the JMESPath expression evaluates to nil\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextvariablewithjmespath","title":"fn spec.rules.validate.foreach.context.variable.withJmesPath","text":"<pre><code>withJmesPath(jmesPath)\n</code></pre> <p>\"JMESPath is an optional JMESPath Expression that can be used to transform the variable.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachcontextvariablewithvalue","title":"fn spec.rules.validate.foreach.context.variable.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is any arbitrary JSON object representable in YAML or JSON form.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachdeny","title":"obj spec.rules.validate.foreach.deny","text":"<p>\"Deny defines conditions used to pass or fail a validation rule.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachdenywithconditions","title":"fn spec.rules.validate.foreach.deny.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Multiple conditions can be declared under an <code>any</code> or <code>all</code> statement. A direct list of conditions (without <code>any</code> or <code>all</code> statements) is also supported for backwards compatibility but will be deprecated in the next major release. See: https://kyverno.io/docs/writing-policies/validate/#deny-rules\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachpreconditions","title":"obj spec.rules.validate.foreach.preconditions","text":"<p>\"AnyAllConditions are used to determine if a policy rule should be applied by evaluating a set of conditions. The declaration can contain nested <code>any</code> or <code>all</code> statements. See: https://kyverno.io/docs/writing-policies/preconditions/\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionswithall","title":"fn spec.rules.validate.foreach.preconditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionswithallmixin","title":"fn spec.rules.validate.foreach.preconditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionswithany","title":"fn spec.rules.validate.foreach.preconditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionswithanymixin","title":"fn spec.rules.validate.foreach.preconditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachpreconditionsall","title":"obj spec.rules.validate.foreach.preconditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionsallwithkey","title":"fn spec.rules.validate.foreach.preconditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionsallwithoperator","title":"fn spec.rules.validate.foreach.preconditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionsallwithvalue","title":"fn spec.rules.validate.foreach.preconditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidateforeachpreconditionsany","title":"obj spec.rules.validate.foreach.preconditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionsanywithkey","title":"fn spec.rules.validate.foreach.preconditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionsanywithoperator","title":"fn spec.rules.validate.foreach.preconditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidateforeachpreconditionsanywithvalue","title":"fn spec.rules.validate.foreach.preconditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifests","title":"obj spec.rules.validate.manifests","text":"<p>\"Manifest specifies conditions for manifest verification\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestswithannotationdomain","title":"fn spec.rules.validate.manifests.withAnnotationDomain","text":"<pre><code>withAnnotationDomain(annotationDomain)\n</code></pre> <p>\"AnnotationDomain is custom domain of annotation for message and signature. Default is \\\"cosign.sigstore.dev\\\".\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestswithattestors","title":"fn spec.rules.validate.manifests.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestswithattestorsmixin","title":"fn spec.rules.validate.manifests.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestswithignorefields","title":"fn spec.rules.validate.manifests.withIgnoreFields","text":"<pre><code>withIgnoreFields(ignoreFields)\n</code></pre> <p>\"Fields which will be ignored while comparing manifests.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestswithignorefieldsmixin","title":"fn spec.rules.validate.manifests.withIgnoreFieldsMixin","text":"<pre><code>withIgnoreFieldsMixin(ignoreFields)\n</code></pre> <p>\"Fields which will be ignored while comparing manifests.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestswithrepository","title":"fn spec.rules.validate.manifests.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for resource bundle reference. The repository can be overridden per Attestor or Attestation.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestors","title":"obj spec.rules.validate.manifests.attestors","text":"<p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorswithcount","title":"fn spec.rules.validate.manifests.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorswithentries","title":"fn spec.rules.validate.manifests.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorswithentriesmixin","title":"fn spec.rules.validate.manifests.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestorsentries","title":"obj spec.rules.validate.manifests.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieswithannotations","title":"fn spec.rules.validate.manifests.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieswithannotationsmixin","title":"fn spec.rules.validate.manifests.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieswithattestor","title":"fn spec.rules.validate.manifests.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested AttestorSet used to specify a more complex set of match authorities\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieswithrepository","title":"fn spec.rules.validate.manifests.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestorsentriescertificates","title":"obj spec.rules.validate.manifests.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentriescertificateswithcert","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Certificate is an optional PEM encoded public certificate.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentriescertificateswithcertchain","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertificateChain is an optional PEM encoded set of certificates used to verify\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestorsentriescertificatesrekor","title":"obj spec.rules.validate.manifests.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeyless","title":"obj spec.rules.validate.manifests.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithissuer","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithroots","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylesswithsubject","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeylessrekor","title":"obj spec.rules.validate.manifests.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked and a root certificate chain is expected instead. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeys","title":"obj spec.rules.validate.manifests.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithkms","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithpublickeys","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.validate.manifests.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeysrekor","title":"obj spec.rules.validate.manifests.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeysrekorwithurl","title":"fn spec.rules.validate.manifests.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsattestorsentrieskeyssecret","title":"obj spec.rules.validate.manifests.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeyssecretwithname","title":"fn spec.rules.validate.manifests.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.validate.manifests.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsdryrun","title":"obj spec.rules.validate.manifests.dryRun","text":"<p>\"DryRun configuration\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsdryrunwithenable","title":"fn spec.rules.validate.manifests.dryRun.withEnable","text":"<pre><code>withEnable(enable)\n</code></pre>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsdryrunwithnamespace","title":"fn spec.rules.validate.manifests.dryRun.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsignorefields","title":"obj spec.rules.validate.manifests.ignoreFields","text":"<p>\"Fields which will be ignored while comparing manifests.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsignorefieldswithfields","title":"fn spec.rules.validate.manifests.ignoreFields.withFields","text":"<pre><code>withFields(fields)\n</code></pre>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsignorefieldswithfieldsmixin","title":"fn spec.rules.validate.manifests.ignoreFields.withFieldsMixin","text":"<pre><code>withFieldsMixin(fields)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsignorefieldswithobjects","title":"fn spec.rules.validate.manifests.ignoreFields.withObjects","text":"<pre><code>withObjects(objects)\n</code></pre>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsignorefieldswithobjectsmixin","title":"fn spec.rules.validate.manifests.ignoreFields.withObjectsMixin","text":"<pre><code>withObjectsMixin(objects)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidatemanifestsignorefieldsobjects","title":"obj spec.rules.validate.manifests.ignoreFields.objects","text":""},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithgroup","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withGroup","text":"<pre><code>withGroup(group)\n</code></pre>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithkind","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithname","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithnamespace","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatemanifestsignorefieldsobjectswithversion","title":"fn spec.rules.validate.manifests.ignoreFields.objects.withVersion","text":"<pre><code>withVersion(version)\n</code></pre>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidatepodsecurity","title":"obj spec.rules.validate.podSecurity","text":"<p>\"PodSecurity applies exemptions for Kubernetes Pod Security admission by specifying exclusions for Pod Security Standards controls.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatepodsecuritywithexclude","title":"fn spec.rules.validate.podSecurity.withExclude","text":"<pre><code>withExclude(exclude)\n</code></pre> <p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatepodsecuritywithexcludemixin","title":"fn spec.rules.validate.podSecurity.withExcludeMixin","text":"<pre><code>withExcludeMixin(exclude)\n</code></pre> <p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatepodsecuritywithlevel","title":"fn spec.rules.validate.podSecurity.withLevel","text":"<pre><code>withLevel(level)\n</code></pre> <p>\"Level defines the Pod Security Standard level to be applied to workloads. Allowed values are privileged, baseline, and restricted.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatepodsecuritywithversion","title":"fn spec.rules.validate.podSecurity.withVersion","text":"<pre><code>withVersion(version)\n</code></pre> <p>\"Version defines the Pod Security Standard versions that Kubernetes supports. Allowed values are v1.19, v1.20, v1.21, v1.22, v1.23, v1.24, v1.25, latest. Defaults to latest.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesvalidatepodsecurityexclude","title":"obj spec.rules.validate.podSecurity.exclude","text":"<p>\"Exclude specifies the Pod Security Standard controls to be excluded.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatepodsecurityexcludewithcontrolname","title":"fn spec.rules.validate.podSecurity.exclude.withControlName","text":"<pre><code>withControlName(controlName)\n</code></pre> <p>\"ControlName specifies the name of the Pod Security Standard control. See: https://kubernetes.io/docs/concepts/security/pod-security-standards/\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatepodsecurityexcludewithimages","title":"fn spec.rules.validate.podSecurity.exclude.withImages","text":"<pre><code>withImages(images)\n</code></pre> <p>\"Images selects matching containers and applies the container level PSS. Each image is the image name consisting of the registry address, repository, image, and tag. Empty list matches no containers, PSS checks are applied at the pod level only. Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesvalidatepodsecurityexcludewithimagesmixin","title":"fn spec.rules.validate.podSecurity.exclude.withImagesMixin","text":"<pre><code>withImagesMixin(images)\n</code></pre> <p>\"Images selects matching containers and applies the container level PSS. Each image is the image name consisting of the registry address, repository, image, and tag. Empty list matches no containers, PSS checks are applied at the pod level only. Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimages","title":"obj spec.rules.verifyImages","text":"<p>\"VerifyImages is used to verify image signatures and mutate them to add a digest\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithattestations","title":"fn spec.rules.verifyImages.withAttestations","text":"<pre><code>withAttestations(attestations)\n</code></pre> <p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithattestationsmixin","title":"fn spec.rules.verifyImages.withAttestationsMixin","text":"<pre><code>withAttestationsMixin(attestations)\n</code></pre> <p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithattestors","title":"fn spec.rules.verifyImages.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithattestorsmixin","title":"fn spec.rules.verifyImages.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specified the required attestors (i.e. authorities)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithimagereferences","title":"fn spec.rules.verifyImages.withImageReferences","text":"<pre><code>withImageReferences(imageReferences)\n</code></pre> <p>\"ImageReferences is a list of matching image reference patterns. At least one pattern in the list must match the image for the rule to apply. Each image reference consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest). Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithimagereferencesmixin","title":"fn spec.rules.verifyImages.withImageReferencesMixin","text":"<pre><code>withImageReferencesMixin(imageReferences)\n</code></pre> <p>\"ImageReferences is a list of matching image reference patterns. At least one pattern in the list must match the image for the rule to apply. Each image reference consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest). Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithmutatedigest","title":"fn spec.rules.verifyImages.withMutateDigest","text":"<pre><code>withMutateDigest(mutateDigest)\n</code></pre> <p>\"MutateDigest enables replacement of image tags with digests. Defaults to true.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithrepository","title":"fn spec.rules.verifyImages.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule. If specified Repository will override the default OCI image repository configured for the installation. The repository can also be overridden per Attestor or Attestation.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithrequired","title":"fn spec.rules.verifyImages.withRequired","text":"<pre><code>withRequired(required)\n</code></pre> <p>\"Required validates that images are verified i.e. have matched passed a signature or attestation check.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimageswithverifydigest","title":"fn spec.rules.verifyImages.withVerifyDigest","text":"<pre><code>withVerifyDigest(verifyDigest)\n</code></pre> <p>\"VerifyDigest validates that images have a digest.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestations","title":"obj spec.rules.verifyImages.attestations","text":"<p>\"Attestations are optional checks for signed in-toto Statements used to verify the image. See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the OCI registry and decodes them into a list of Statement declarations.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationswithattestors","title":"fn spec.rules.verifyImages.attestations.withAttestors","text":"<pre><code>withAttestors(attestors)\n</code></pre> <p>\"Attestors specify the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationswithattestorsmixin","title":"fn spec.rules.verifyImages.attestations.withAttestorsMixin","text":"<pre><code>withAttestorsMixin(attestors)\n</code></pre> <p>\"Attestors specify the required attestors (i.e. authorities)\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationswithconditions","title":"fn spec.rules.verifyImages.attestations.withConditions","text":"<pre><code>withConditions(conditions)\n</code></pre> <p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationswithconditionsmixin","title":"fn spec.rules.verifyImages.attestations.withConditionsMixin","text":"<pre><code>withConditionsMixin(conditions)\n</code></pre> <p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationswithpredicatetype","title":"fn spec.rules.verifyImages.attestations.withPredicateType","text":"<pre><code>withPredicateType(predicateType)\n</code></pre> <p>\"PredicateType defines the type of Predicate contained within the Statement.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestors","title":"obj spec.rules.verifyImages.attestations.attestors","text":"<p>\"Attestors specify the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorswithcount","title":"fn spec.rules.verifyImages.attestations.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorswithentries","title":"fn spec.rules.verifyImages.attestations.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorswithentriesmixin","title":"fn spec.rules.verifyImages.attestations.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestorsentries","title":"obj spec.rules.verifyImages.attestations.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieswithannotations","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieswithannotationsmixin","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieswithattestor","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested AttestorSet used to specify a more complex set of match authorities\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieswithrepository","title":"fn spec.rules.verifyImages.attestations.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestorsentriescertificates","title":"obj spec.rules.verifyImages.attestations.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentriescertificateswithcert","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Certificate is an optional PEM encoded public certificate.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentriescertificateswithcertchain","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertificateChain is an optional PEM encoded set of certificates used to verify\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestorsentriescertificatesrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeyless","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithissuer","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithroots","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylesswithsubject","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeylessrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked and a root certificate chain is expected instead. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeys","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithkms","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithpublickeys","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeysrekor","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeysrekorwithurl","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsattestorsentrieskeyssecret","title":"obj spec.rules.verifyImages.attestations.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyssecretwithname","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.verifyImages.attestations.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsconditions","title":"obj spec.rules.verifyImages.attestations.conditions","text":"<p>\"Conditions are used to verify attributes within a Predicate. If no Conditions are specified the attestation check is satisfied as long there are predicates that match the predicate type.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionswithall","title":"fn spec.rules.verifyImages.attestations.conditions.withAll","text":"<pre><code>withAll(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionswithallmixin","title":"fn spec.rules.verifyImages.attestations.conditions.withAllMixin","text":"<pre><code>withAllMixin(all)\n</code></pre> <p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionswithany","title":"fn spec.rules.verifyImages.attestations.conditions.withAny","text":"<pre><code>withAny(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionswithanymixin","title":"fn spec.rules.verifyImages.attestations.conditions.withAnyMixin","text":"<pre><code>withAnyMixin(any)\n</code></pre> <p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsconditionsall","title":"obj spec.rules.verifyImages.attestations.conditions.all","text":"<p>\"AllConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, all of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionsallwithkey","title":"fn spec.rules.verifyImages.attestations.conditions.all.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionsallwithoperator","title":"fn spec.rules.verifyImages.attestations.conditions.all.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionsallwithvalue","title":"fn spec.rules.verifyImages.attestations.conditions.all.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestationsconditionsany","title":"obj spec.rules.verifyImages.attestations.conditions.any","text":"<p>\"AnyConditions enable variable-based conditional rule execution. This is useful for finer control of when an rule is applied. A condition can reference object data using JMESPath notation. Here, at least one of the conditions need to pass\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionsanywithkey","title":"fn spec.rules.verifyImages.attestations.conditions.any.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the context entry (using JMESPath) for conditional rule evaluation.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionsanywithoperator","title":"fn spec.rules.verifyImages.attestations.conditions.any.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator is the conditional operation to perform. Valid operators are: Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals, GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan, DurationLessThanOrEquals, DurationLessThan\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestationsconditionsanywithvalue","title":"fn spec.rules.verifyImages.attestations.conditions.any.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the conditional value, or set of values. The values can be fixed set or can be variables declared using JMESPath.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestors","title":"obj spec.rules.verifyImages.attestors","text":"<p>\"Attestors specified the required attestors (i.e. authorities)\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorswithcount","title":"fn spec.rules.verifyImages.attestors.withCount","text":"<pre><code>withCount(count)\n</code></pre> <p>\"Count specifies the required number of entries that must match. If the count is null, all entries must match (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a value N, then N must be less than or equal to the size of entries, and at least N entries must match.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorswithentries","title":"fn spec.rules.verifyImages.attestors.withEntries","text":"<pre><code>withEntries(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorswithentriesmixin","title":"fn spec.rules.verifyImages.attestors.withEntriesMixin","text":"<pre><code>withEntriesMixin(entries)\n</code></pre> <p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestorsentries","title":"obj spec.rules.verifyImages.attestors.entries","text":"<p>\"Entries contains the available attestors. An attestor can be a static key, attributes for keyless verification, or a nested attestor declaration.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieswithannotations","title":"fn spec.rules.verifyImages.attestors.entries.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieswithannotationsmixin","title":"fn spec.rules.verifyImages.attestors.entries.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations are used for image verification. Every specified key-value pair must exist and match in the verified payload. The payload may contain other key-value pairs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieswithattestor","title":"fn spec.rules.verifyImages.attestors.entries.withAttestor","text":"<pre><code>withAttestor(attestor)\n</code></pre> <p>\"Attestor is a nested AttestorSet used to specify a more complex set of match authorities\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieswithrepository","title":"fn spec.rules.verifyImages.attestors.entries.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre> <p>\"Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule. If specified Repository will override other OCI image repository locations for this Attestor.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestorsentriescertificates","title":"obj spec.rules.verifyImages.attestors.entries.certificates","text":"<p>\"Certificates specifies one or more certificates\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentriescertificateswithcert","title":"fn spec.rules.verifyImages.attestors.entries.certificates.withCert","text":"<pre><code>withCert(cert)\n</code></pre> <p>\"Certificate is an optional PEM encoded public certificate.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentriescertificateswithcertchain","title":"fn spec.rules.verifyImages.attestors.entries.certificates.withCertChain","text":"<pre><code>withCertChain(certChain)\n</code></pre> <p>\"CertificateChain is an optional PEM encoded set of certificates used to verify\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestorsentriescertificatesrekor","title":"obj spec.rules.verifyImages.attestors.entries.certificates.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentriescertificatesrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.certificates.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestorsentrieskeyless","title":"obj spec.rules.verifyImages.attestors.entries.keyless","text":"<p>\"Keyless is a set of attribute used to verify a Sigstore keyless attestor. See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeylesswithadditionalextensions","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withAdditionalExtensions","text":"<pre><code>withAdditionalExtensions(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeylesswithadditionalextensionsmixin","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withAdditionalExtensionsMixin","text":"<pre><code>withAdditionalExtensionsMixin(additionalExtensions)\n</code></pre> <p>\"AdditionalExtensions are certificate-extensions used for keyless signing.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeylesswithissuer","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withIssuer","text":"<pre><code>withIssuer(issuer)\n</code></pre> <p>\"Issuer is the certificate issuer used for keyless signing.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeylesswithroots","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withRoots","text":"<pre><code>withRoots(roots)\n</code></pre> <p>\"Roots is an optional set of PEM encoded trusted root certificates. If not provided, the system roots are used.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeylesswithsubject","title":"fn spec.rules.verifyImages.attestors.entries.keyless.withSubject","text":"<pre><code>withSubject(subject)\n</code></pre> <p>\"Subject is the verified identity used for keyless signing, for example the email address\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestorsentrieskeylessrekor","title":"obj spec.rules.verifyImages.attestors.entries.keyless.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked and a root certificate chain is expected instead. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeylessrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.keyless.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestorsentrieskeys","title":"obj spec.rules.verifyImages.attestors.entries.keys","text":"<p>\"Keys specifies one or more public keys\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeyswithkms","title":"fn spec.rules.verifyImages.attestors.entries.keys.withKms","text":"<pre><code>withKms(kms)\n</code></pre> <p>\"KMS provides the URI to the public key stored in a Key Management System. See: https://github.com/sigstore/cosign/blob/main/KMS.md\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeyswithpublickeys","title":"fn spec.rules.verifyImages.attestors.entries.keys.withPublicKeys","text":"<pre><code>withPublicKeys(publicKeys)\n</code></pre> <p>\"Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly specified or can be a variable reference to a key specified in a ConfigMap (see https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret elsewhere in the cluster by specifying it in the format \\\"k8s:///\\\". The named Secret must specify a key <code>cosign.pub</code> containing the public key used for verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret). When multiple keys are specified each key is processed as a separate staticKey entry (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.\""},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeyswithsignaturealgorithm","title":"fn spec.rules.verifyImages.attestors.entries.keys.withSignatureAlgorithm","text":"<pre><code>withSignatureAlgorithm(signatureAlgorithm)\n</code></pre> <p>\"Specify signature algorithm for public keys. Supported values are sha256 and sha512\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestorsentrieskeysrekor","title":"obj spec.rules.verifyImages.attestors.entries.keys.rekor","text":"<p>\"Rekor provides configuration for the Rekor transparency log service. If the value is nil, Rekor is not checked. If an empty object is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeysrekorwithurl","title":"fn spec.rules.verifyImages.attestors.entries.keys.rekor.withUrl","text":"<pre><code>withUrl(url)\n</code></pre> <p>\"URL is the address of the transparency log. Defaults to the public log https://rekor.sigstore.dev.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specrulesverifyimagesattestorsentrieskeyssecret","title":"obj spec.rules.verifyImages.attestors.entries.keys.secret","text":"<p>\"Reference to a Secret resource that contains a public key\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeyssecretwithname","title":"fn spec.rules.verifyImages.attestors.entries.keys.secret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the secret. The provided secret must contain a key named cosign.pub.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specrulesverifyimagesattestorsentrieskeyssecretwithnamespace","title":"fn spec.rules.verifyImages.attestors.entries.keys.secret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace name where the Secret exists.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#obj-specvalidationfailureactionoverrides","title":"obj spec.validationFailureActionOverrides","text":"<p>\"ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction namespace-wise. It overrides ValidationFailureAction for the specified namespaces.\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specvalidationfailureactionoverrideswithaction","title":"fn spec.validationFailureActionOverrides.withAction","text":"<pre><code>withAction(action)\n</code></pre> <p>\"ValidationFailureAction defines the policy validation failure action\"</p>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specvalidationfailureactionoverrideswithnamespaces","title":"fn spec.validationFailureActionOverrides.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"1.9/kyverno/v2beta1/policy/#fn-specvalidationfailureactionoverrideswithnamespacesmixin","title":"fn spec.validationFailureActionOverrides.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"}]}